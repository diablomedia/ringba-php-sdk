<?php
/**
 * OverrideRTBSettingsforaPublisherRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Ringba
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ringba API Documentation
 *
 * Ringbaâ€™s APIs allow you to interact, gather information, and make dynamic changes in real-time. All functions found within the Ringba portal are also available programmatically through our API.   If this is your first time using our API, please read the __Getting Started__ section below.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Ringba\Model;

use \ArrayAccess;
use \Ringba\ObjectSerializer;

/**
 * OverrideRTBSettingsforaPublisherRequest Class Doc Comment
 *
 * @category Class
 * @package  Ringba
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OverrideRTBSettingsforaPublisherRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OverrideRTBSettingsforaPublisherRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'enabled' => 'bool',
        'callerIdRequiredOverride' => 'bool',
        'rateLimitOverride' => '\Ringba\Model\RateLimitOverride',
        'bidSettingsOverride' => '\Ringba\Model\BidSettingsOverride',
        'bidAdjustmentsOverride' => '\Ringba\Model\BidAdjustmentsOverride[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'enabled' => null,
        'callerIdRequiredOverride' => null,
        'rateLimitOverride' => null,
        'bidSettingsOverride' => null,
        'bidAdjustmentsOverride' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'enabled' => 'enabled',
        'callerIdRequiredOverride' => 'callerIdRequiredOverride',
        'rateLimitOverride' => 'rateLimitOverride',
        'bidSettingsOverride' => 'bidSettingsOverride',
        'bidAdjustmentsOverride' => 'bidAdjustmentsOverride'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'enabled' => 'setEnabled',
        'callerIdRequiredOverride' => 'setCallerIdRequiredOverride',
        'rateLimitOverride' => 'setRateLimitOverride',
        'bidSettingsOverride' => 'setBidSettingsOverride',
        'bidAdjustmentsOverride' => 'setBidAdjustmentsOverride'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'enabled' => 'getEnabled',
        'callerIdRequiredOverride' => 'getCallerIdRequiredOverride',
        'rateLimitOverride' => 'getRateLimitOverride',
        'bidSettingsOverride' => 'getBidSettingsOverride',
        'bidAdjustmentsOverride' => 'getBidAdjustmentsOverride'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['enabled'] = $data['enabled'] ?? null;
        $this->container['callerIdRequiredOverride'] = $data['callerIdRequiredOverride'] ?? null;
        $this->container['rateLimitOverride'] = $data['rateLimitOverride'] ?? null;
        $this->container['bidSettingsOverride'] = $data['bidSettingsOverride'] ?? null;
        $this->container['bidAdjustmentsOverride'] = $data['bidAdjustmentsOverride'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['enabled'] === null) {
            $invalidProperties[] = "'enabled' can't be null";
        }
        if ($this->container['callerIdRequiredOverride'] === null) {
            $invalidProperties[] = "'callerIdRequiredOverride' can't be null";
        }
        if ($this->container['rateLimitOverride'] === null) {
            $invalidProperties[] = "'rateLimitOverride' can't be null";
        }
        if ($this->container['bidSettingsOverride'] === null) {
            $invalidProperties[] = "'bidSettingsOverride' can't be null";
        }
        if ($this->container['bidAdjustmentsOverride'] === null) {
            $invalidProperties[] = "'bidAdjustmentsOverride' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets enabled
     *
     * @return bool
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool $enabled enabled
     *
     * @return self
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets callerIdRequiredOverride
     *
     * @return bool
     */
    public function getCallerIdRequiredOverride()
    {
        return $this->container['callerIdRequiredOverride'];
    }

    /**
     * Sets callerIdRequiredOverride
     *
     * @param bool $callerIdRequiredOverride callerIdRequiredOverride
     *
     * @return self
     */
    public function setCallerIdRequiredOverride($callerIdRequiredOverride)
    {
        $this->container['callerIdRequiredOverride'] = $callerIdRequiredOverride;

        return $this;
    }

    /**
     * Gets rateLimitOverride
     *
     * @return \Ringba\Model\RateLimitOverride
     */
    public function getRateLimitOverride()
    {
        return $this->container['rateLimitOverride'];
    }

    /**
     * Sets rateLimitOverride
     *
     * @param \Ringba\Model\RateLimitOverride $rateLimitOverride rateLimitOverride
     *
     * @return self
     */
    public function setRateLimitOverride($rateLimitOverride)
    {
        $this->container['rateLimitOverride'] = $rateLimitOverride;

        return $this;
    }

    /**
     * Gets bidSettingsOverride
     *
     * @return \Ringba\Model\BidSettingsOverride
     */
    public function getBidSettingsOverride()
    {
        return $this->container['bidSettingsOverride'];
    }

    /**
     * Sets bidSettingsOverride
     *
     * @param \Ringba\Model\BidSettingsOverride $bidSettingsOverride bidSettingsOverride
     *
     * @return self
     */
    public function setBidSettingsOverride($bidSettingsOverride)
    {
        $this->container['bidSettingsOverride'] = $bidSettingsOverride;

        return $this;
    }

    /**
     * Gets bidAdjustmentsOverride
     *
     * @return \Ringba\Model\BidAdjustmentsOverride[]
     */
    public function getBidAdjustmentsOverride()
    {
        return $this->container['bidAdjustmentsOverride'];
    }

    /**
     * Sets bidAdjustmentsOverride
     *
     * @param \Ringba\Model\BidAdjustmentsOverride[] $bidAdjustmentsOverride 
     *
     * @return self
     */
    public function setBidAdjustmentsOverride($bidAdjustmentsOverride)
    {
        $this->container['bidAdjustmentsOverride'] = $bidAdjustmentsOverride;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


