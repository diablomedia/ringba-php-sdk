<?php
/**
 * Draft
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Ringba
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ringba API Documentation
 *
 * Ringbaâ€™s APIs allow you to interact, gather information, and make dynamic changes in real-time. All functions found within the Ringba portal are also available programmatically through our API.   If this is your first time using our API, please read the __Getting Started__ section below.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Ringba\Model;

use \ArrayAccess;
use \Ringba\ObjectSerializer;

/**
 * Draft Class Doc Comment
 *
 * @category Class
 * @package  Ringba
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Draft implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Draft';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'revision' => 'int',
        'notes' => 'string',
        'category' => 'string',
        'languageCodes' => 'string[]',
        'numberRestrictions' => '\Ringba\Model\NumberRestrictions',
        'campaignId' => 'string',
        'name' => 'string',
        'description' => 'string',
        'offerState' => 'string',
        'offerVisibility' => 'string',
        'requireApproval' => 'bool',
        'expiration' => 'string',
        'timeZoneId' => 'string',
        'publisherHasNumber' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'revision' => 'int32',
        'notes' => null,
        'category' => null,
        'languageCodes' => null,
        'numberRestrictions' => null,
        'campaignId' => null,
        'name' => null,
        'description' => null,
        'offerState' => null,
        'offerVisibility' => null,
        'requireApproval' => null,
        'expiration' => null,
        'timeZoneId' => null,
        'publisherHasNumber' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'revision' => 'revision',
        'notes' => 'notes',
        'category' => 'category',
        'languageCodes' => 'languageCodes',
        'numberRestrictions' => 'numberRestrictions',
        'campaignId' => 'campaignId',
        'name' => 'name',
        'description' => 'description',
        'offerState' => 'offerState',
        'offerVisibility' => 'offerVisibility',
        'requireApproval' => 'requireApproval',
        'expiration' => 'expiration',
        'timeZoneId' => 'timeZoneId',
        'publisherHasNumber' => 'publisherHasNumber'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'revision' => 'setRevision',
        'notes' => 'setNotes',
        'category' => 'setCategory',
        'languageCodes' => 'setLanguageCodes',
        'numberRestrictions' => 'setNumberRestrictions',
        'campaignId' => 'setCampaignId',
        'name' => 'setName',
        'description' => 'setDescription',
        'offerState' => 'setOfferState',
        'offerVisibility' => 'setOfferVisibility',
        'requireApproval' => 'setRequireApproval',
        'expiration' => 'setExpiration',
        'timeZoneId' => 'setTimeZoneId',
        'publisherHasNumber' => 'setPublisherHasNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'revision' => 'getRevision',
        'notes' => 'getNotes',
        'category' => 'getCategory',
        'languageCodes' => 'getLanguageCodes',
        'numberRestrictions' => 'getNumberRestrictions',
        'campaignId' => 'getCampaignId',
        'name' => 'getName',
        'description' => 'getDescription',
        'offerState' => 'getOfferState',
        'offerVisibility' => 'getOfferVisibility',
        'requireApproval' => 'getRequireApproval',
        'expiration' => 'getExpiration',
        'timeZoneId' => 'getTimeZoneId',
        'publisherHasNumber' => 'getPublisherHasNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['revision'] = $data['revision'] ?? null;
        $this->container['notes'] = $data['notes'] ?? null;
        $this->container['category'] = $data['category'] ?? null;
        $this->container['languageCodes'] = $data['languageCodes'] ?? null;
        $this->container['numberRestrictions'] = $data['numberRestrictions'] ?? null;
        $this->container['campaignId'] = $data['campaignId'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['offerState'] = $data['offerState'] ?? null;
        $this->container['offerVisibility'] = $data['offerVisibility'] ?? null;
        $this->container['requireApproval'] = $data['requireApproval'] ?? null;
        $this->container['expiration'] = $data['expiration'] ?? null;
        $this->container['timeZoneId'] = $data['timeZoneId'] ?? null;
        $this->container['publisherHasNumber'] = $data['publisherHasNumber'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['revision'] === null) {
            $invalidProperties[] = "'revision' can't be null";
        }
        if ($this->container['notes'] === null) {
            $invalidProperties[] = "'notes' can't be null";
        }
        if ($this->container['category'] === null) {
            $invalidProperties[] = "'category' can't be null";
        }
        if ($this->container['languageCodes'] === null) {
            $invalidProperties[] = "'languageCodes' can't be null";
        }
        if ($this->container['numberRestrictions'] === null) {
            $invalidProperties[] = "'numberRestrictions' can't be null";
        }
        if ($this->container['campaignId'] === null) {
            $invalidProperties[] = "'campaignId' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['offerState'] === null) {
            $invalidProperties[] = "'offerState' can't be null";
        }
        if ($this->container['offerVisibility'] === null) {
            $invalidProperties[] = "'offerVisibility' can't be null";
        }
        if ($this->container['requireApproval'] === null) {
            $invalidProperties[] = "'requireApproval' can't be null";
        }
        if ($this->container['expiration'] === null) {
            $invalidProperties[] = "'expiration' can't be null";
        }
        if ($this->container['timeZoneId'] === null) {
            $invalidProperties[] = "'timeZoneId' can't be null";
        }
        if ($this->container['publisherHasNumber'] === null) {
            $invalidProperties[] = "'publisherHasNumber' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets revision
     *
     * @return int
     */
    public function getRevision()
    {
        return $this->container['revision'];
    }

    /**
     * Sets revision
     *
     * @param int $revision revision
     *
     * @return self
     */
    public function setRevision($revision)
    {
        $this->container['revision'] = $revision;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string $notes notes
     *
     * @return self
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string $category category
     *
     * @return self
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets languageCodes
     *
     * @return string[]
     */
    public function getLanguageCodes()
    {
        return $this->container['languageCodes'];
    }

    /**
     * Sets languageCodes
     *
     * @param string[] $languageCodes 
     *
     * @return self
     */
    public function setLanguageCodes($languageCodes)
    {
        $this->container['languageCodes'] = $languageCodes;

        return $this;
    }

    /**
     * Gets numberRestrictions
     *
     * @return \Ringba\Model\NumberRestrictions
     */
    public function getNumberRestrictions()
    {
        return $this->container['numberRestrictions'];
    }

    /**
     * Sets numberRestrictions
     *
     * @param \Ringba\Model\NumberRestrictions $numberRestrictions numberRestrictions
     *
     * @return self
     */
    public function setNumberRestrictions($numberRestrictions)
    {
        $this->container['numberRestrictions'] = $numberRestrictions;

        return $this;
    }

    /**
     * Gets campaignId
     *
     * @return string
     */
    public function getCampaignId()
    {
        return $this->container['campaignId'];
    }

    /**
     * Sets campaignId
     *
     * @param string $campaignId campaignId
     *
     * @return self
     */
    public function setCampaignId($campaignId)
    {
        $this->container['campaignId'] = $campaignId;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets offerState
     *
     * @return string
     */
    public function getOfferState()
    {
        return $this->container['offerState'];
    }

    /**
     * Sets offerState
     *
     * @param string $offerState offerState
     *
     * @return self
     */
    public function setOfferState($offerState)
    {
        $this->container['offerState'] = $offerState;

        return $this;
    }

    /**
     * Gets offerVisibility
     *
     * @return string
     */
    public function getOfferVisibility()
    {
        return $this->container['offerVisibility'];
    }

    /**
     * Sets offerVisibility
     *
     * @param string $offerVisibility offerVisibility
     *
     * @return self
     */
    public function setOfferVisibility($offerVisibility)
    {
        $this->container['offerVisibility'] = $offerVisibility;

        return $this;
    }

    /**
     * Gets requireApproval
     *
     * @return bool
     */
    public function getRequireApproval()
    {
        return $this->container['requireApproval'];
    }

    /**
     * Sets requireApproval
     *
     * @param bool $requireApproval requireApproval
     *
     * @return self
     */
    public function setRequireApproval($requireApproval)
    {
        $this->container['requireApproval'] = $requireApproval;

        return $this;
    }

    /**
     * Gets expiration
     *
     * @return string
     */
    public function getExpiration()
    {
        return $this->container['expiration'];
    }

    /**
     * Sets expiration
     *
     * @param string $expiration expiration
     *
     * @return self
     */
    public function setExpiration($expiration)
    {
        $this->container['expiration'] = $expiration;

        return $this;
    }

    /**
     * Gets timeZoneId
     *
     * @return string
     */
    public function getTimeZoneId()
    {
        return $this->container['timeZoneId'];
    }

    /**
     * Sets timeZoneId
     *
     * @param string $timeZoneId timeZoneId
     *
     * @return self
     */
    public function setTimeZoneId($timeZoneId)
    {
        $this->container['timeZoneId'] = $timeZoneId;

        return $this;
    }

    /**
     * Gets publisherHasNumber
     *
     * @return bool
     */
    public function getPublisherHasNumber()
    {
        return $this->container['publisherHasNumber'];
    }

    /**
     * Sets publisherHasNumber
     *
     * @param bool $publisherHasNumber publisherHasNumber
     *
     * @return self
     */
    public function setPublisherHasNumber($publisherHasNumber)
    {
        $this->container['publisherHasNumber'] = $publisherHasNumber;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


