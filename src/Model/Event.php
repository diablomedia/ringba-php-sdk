<?php
/**
 * Event
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Ringba
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ringba API Documentation
 *
 * Ringbaâ€™s APIs allow you to interact, gather information, and make dynamic changes in real-time. All functions found within the Ringba portal are also available programmatically through our API.   If this is your first time using our API, please read the __Getting Started__ section below.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Ringba\Model;

use \ArrayAccess;
use \Ringba\ObjectSerializer;

/**
 * Event Class Doc Comment
 *
 * @category Class
 * @package  Ringba
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Event implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Event';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'ineligibleTargets' => 'string',
        'eligibleOrderedTargets' => 'string',
        'dtStamp' => 'string',
        'targetBuyerSubId' => 'string',
        'targetName' => 'string',
        'targetId' => 'string',
        'targetBuyer' => 'string',
        'targetBuyerId' => 'string',
        'totalAmount' => 'float',
        'targetNumber' => 'string',
        'targetSubId' => 'string',
        'timeToConnect' => 'int',
        'callConnectionDt' => 'int',
        'callLengthInSeconds' => 'int',
        'callCompletedDt' => 'int',
        'recordingUrl' => 'string',
        'conversionAmount' => 'int',
        'payoutAmount' => 'int',
        'source' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'ineligibleTargets' => null,
        'eligibleOrderedTargets' => null,
        'dtStamp' => null,
        'targetBuyerSubId' => null,
        'targetName' => null,
        'targetId' => null,
        'targetBuyer' => null,
        'targetBuyerId' => null,
        'totalAmount' => null,
        'targetNumber' => null,
        'targetSubId' => null,
        'timeToConnect' => 'int32',
        'callConnectionDt' => 'int64',
        'callLengthInSeconds' => 'int32',
        'callCompletedDt' => 'int64',
        'recordingUrl' => null,
        'conversionAmount' => 'int32',
        'payoutAmount' => 'int32',
        'source' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'ineligibleTargets' => 'ineligibleTargets',
        'eligibleOrderedTargets' => 'eligibleOrderedTargets',
        'dtStamp' => 'dtStamp',
        'targetBuyerSubId' => 'targetBuyerSubId',
        'targetName' => 'targetName',
        'targetId' => 'targetId',
        'targetBuyer' => 'targetBuyer',
        'targetBuyerId' => 'targetBuyerId',
        'totalAmount' => 'totalAmount',
        'targetNumber' => 'targetNumber',
        'targetSubId' => 'targetSubId',
        'timeToConnect' => 'timeToConnect',
        'callConnectionDt' => 'callConnectionDt',
        'callLengthInSeconds' => 'callLengthInSeconds',
        'callCompletedDt' => 'callCompletedDt',
        'recordingUrl' => 'recordingUrl',
        'conversionAmount' => 'conversionAmount',
        'payoutAmount' => 'payoutAmount',
        'source' => 'source'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'ineligibleTargets' => 'setIneligibleTargets',
        'eligibleOrderedTargets' => 'setEligibleOrderedTargets',
        'dtStamp' => 'setDtStamp',
        'targetBuyerSubId' => 'setTargetBuyerSubId',
        'targetName' => 'setTargetName',
        'targetId' => 'setTargetId',
        'targetBuyer' => 'setTargetBuyer',
        'targetBuyerId' => 'setTargetBuyerId',
        'totalAmount' => 'setTotalAmount',
        'targetNumber' => 'setTargetNumber',
        'targetSubId' => 'setTargetSubId',
        'timeToConnect' => 'setTimeToConnect',
        'callConnectionDt' => 'setCallConnectionDt',
        'callLengthInSeconds' => 'setCallLengthInSeconds',
        'callCompletedDt' => 'setCallCompletedDt',
        'recordingUrl' => 'setRecordingUrl',
        'conversionAmount' => 'setConversionAmount',
        'payoutAmount' => 'setPayoutAmount',
        'source' => 'setSource'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'ineligibleTargets' => 'getIneligibleTargets',
        'eligibleOrderedTargets' => 'getEligibleOrderedTargets',
        'dtStamp' => 'getDtStamp',
        'targetBuyerSubId' => 'getTargetBuyerSubId',
        'targetName' => 'getTargetName',
        'targetId' => 'getTargetId',
        'targetBuyer' => 'getTargetBuyer',
        'targetBuyerId' => 'getTargetBuyerId',
        'totalAmount' => 'getTotalAmount',
        'targetNumber' => 'getTargetNumber',
        'targetSubId' => 'getTargetSubId',
        'timeToConnect' => 'getTimeToConnect',
        'callConnectionDt' => 'getCallConnectionDt',
        'callLengthInSeconds' => 'getCallLengthInSeconds',
        'callCompletedDt' => 'getCallCompletedDt',
        'recordingUrl' => 'getRecordingUrl',
        'conversionAmount' => 'getConversionAmount',
        'payoutAmount' => 'getPayoutAmount',
        'source' => 'getSource'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['ineligibleTargets'] = $data['ineligibleTargets'] ?? null;
        $this->container['eligibleOrderedTargets'] = $data['eligibleOrderedTargets'] ?? null;
        $this->container['dtStamp'] = $data['dtStamp'] ?? null;
        $this->container['targetBuyerSubId'] = $data['targetBuyerSubId'] ?? null;
        $this->container['targetName'] = $data['targetName'] ?? null;
        $this->container['targetId'] = $data['targetId'] ?? null;
        $this->container['targetBuyer'] = $data['targetBuyer'] ?? null;
        $this->container['targetBuyerId'] = $data['targetBuyerId'] ?? null;
        $this->container['totalAmount'] = $data['totalAmount'] ?? null;
        $this->container['targetNumber'] = $data['targetNumber'] ?? null;
        $this->container['targetSubId'] = $data['targetSubId'] ?? null;
        $this->container['timeToConnect'] = $data['timeToConnect'] ?? null;
        $this->container['callConnectionDt'] = $data['callConnectionDt'] ?? null;
        $this->container['callLengthInSeconds'] = $data['callLengthInSeconds'] ?? null;
        $this->container['callCompletedDt'] = $data['callCompletedDt'] ?? null;
        $this->container['recordingUrl'] = $data['recordingUrl'] ?? null;
        $this->container['conversionAmount'] = $data['conversionAmount'] ?? null;
        $this->container['payoutAmount'] = $data['payoutAmount'] ?? null;
        $this->container['source'] = $data['source'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['dtStamp'] === null) {
            $invalidProperties[] = "'dtStamp' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets ineligibleTargets
     *
     * @return string|null
     */
    public function getIneligibleTargets()
    {
        return $this->container['ineligibleTargets'];
    }

    /**
     * Sets ineligibleTargets
     *
     * @param string|null $ineligibleTargets ineligibleTargets
     *
     * @return self
     */
    public function setIneligibleTargets($ineligibleTargets)
    {
        $this->container['ineligibleTargets'] = $ineligibleTargets;

        return $this;
    }

    /**
     * Gets eligibleOrderedTargets
     *
     * @return string|null
     */
    public function getEligibleOrderedTargets()
    {
        return $this->container['eligibleOrderedTargets'];
    }

    /**
     * Sets eligibleOrderedTargets
     *
     * @param string|null $eligibleOrderedTargets eligibleOrderedTargets
     *
     * @return self
     */
    public function setEligibleOrderedTargets($eligibleOrderedTargets)
    {
        $this->container['eligibleOrderedTargets'] = $eligibleOrderedTargets;

        return $this;
    }

    /**
     * Gets dtStamp
     *
     * @return string
     */
    public function getDtStamp()
    {
        return $this->container['dtStamp'];
    }

    /**
     * Sets dtStamp
     *
     * @param string $dtStamp dtStamp
     *
     * @return self
     */
    public function setDtStamp($dtStamp)
    {
        $this->container['dtStamp'] = $dtStamp;

        return $this;
    }

    /**
     * Gets targetBuyerSubId
     *
     * @return string|null
     */
    public function getTargetBuyerSubId()
    {
        return $this->container['targetBuyerSubId'];
    }

    /**
     * Sets targetBuyerSubId
     *
     * @param string|null $targetBuyerSubId targetBuyerSubId
     *
     * @return self
     */
    public function setTargetBuyerSubId($targetBuyerSubId)
    {
        $this->container['targetBuyerSubId'] = $targetBuyerSubId;

        return $this;
    }

    /**
     * Gets targetName
     *
     * @return string|null
     */
    public function getTargetName()
    {
        return $this->container['targetName'];
    }

    /**
     * Sets targetName
     *
     * @param string|null $targetName targetName
     *
     * @return self
     */
    public function setTargetName($targetName)
    {
        $this->container['targetName'] = $targetName;

        return $this;
    }

    /**
     * Gets targetId
     *
     * @return string|null
     */
    public function getTargetId()
    {
        return $this->container['targetId'];
    }

    /**
     * Sets targetId
     *
     * @param string|null $targetId targetId
     *
     * @return self
     */
    public function setTargetId($targetId)
    {
        $this->container['targetId'] = $targetId;

        return $this;
    }

    /**
     * Gets targetBuyer
     *
     * @return string|null
     */
    public function getTargetBuyer()
    {
        return $this->container['targetBuyer'];
    }

    /**
     * Sets targetBuyer
     *
     * @param string|null $targetBuyer targetBuyer
     *
     * @return self
     */
    public function setTargetBuyer($targetBuyer)
    {
        $this->container['targetBuyer'] = $targetBuyer;

        return $this;
    }

    /**
     * Gets targetBuyerId
     *
     * @return string|null
     */
    public function getTargetBuyerId()
    {
        return $this->container['targetBuyerId'];
    }

    /**
     * Sets targetBuyerId
     *
     * @param string|null $targetBuyerId targetBuyerId
     *
     * @return self
     */
    public function setTargetBuyerId($targetBuyerId)
    {
        $this->container['targetBuyerId'] = $targetBuyerId;

        return $this;
    }

    /**
     * Gets totalAmount
     *
     * @return float|null
     */
    public function getTotalAmount()
    {
        return $this->container['totalAmount'];
    }

    /**
     * Sets totalAmount
     *
     * @param float|null $totalAmount totalAmount
     *
     * @return self
     */
    public function setTotalAmount($totalAmount)
    {
        $this->container['totalAmount'] = $totalAmount;

        return $this;
    }

    /**
     * Gets targetNumber
     *
     * @return string|null
     */
    public function getTargetNumber()
    {
        return $this->container['targetNumber'];
    }

    /**
     * Sets targetNumber
     *
     * @param string|null $targetNumber targetNumber
     *
     * @return self
     */
    public function setTargetNumber($targetNumber)
    {
        $this->container['targetNumber'] = $targetNumber;

        return $this;
    }

    /**
     * Gets targetSubId
     *
     * @return string|null
     */
    public function getTargetSubId()
    {
        return $this->container['targetSubId'];
    }

    /**
     * Sets targetSubId
     *
     * @param string|null $targetSubId targetSubId
     *
     * @return self
     */
    public function setTargetSubId($targetSubId)
    {
        $this->container['targetSubId'] = $targetSubId;

        return $this;
    }

    /**
     * Gets timeToConnect
     *
     * @return int|null
     */
    public function getTimeToConnect()
    {
        return $this->container['timeToConnect'];
    }

    /**
     * Sets timeToConnect
     *
     * @param int|null $timeToConnect timeToConnect
     *
     * @return self
     */
    public function setTimeToConnect($timeToConnect)
    {
        $this->container['timeToConnect'] = $timeToConnect;

        return $this;
    }

    /**
     * Gets callConnectionDt
     *
     * @return int|null
     */
    public function getCallConnectionDt()
    {
        return $this->container['callConnectionDt'];
    }

    /**
     * Sets callConnectionDt
     *
     * @param int|null $callConnectionDt callConnectionDt
     *
     * @return self
     */
    public function setCallConnectionDt($callConnectionDt)
    {
        $this->container['callConnectionDt'] = $callConnectionDt;

        return $this;
    }

    /**
     * Gets callLengthInSeconds
     *
     * @return int|null
     */
    public function getCallLengthInSeconds()
    {
        return $this->container['callLengthInSeconds'];
    }

    /**
     * Sets callLengthInSeconds
     *
     * @param int|null $callLengthInSeconds callLengthInSeconds
     *
     * @return self
     */
    public function setCallLengthInSeconds($callLengthInSeconds)
    {
        $this->container['callLengthInSeconds'] = $callLengthInSeconds;

        return $this;
    }

    /**
     * Gets callCompletedDt
     *
     * @return int|null
     */
    public function getCallCompletedDt()
    {
        return $this->container['callCompletedDt'];
    }

    /**
     * Sets callCompletedDt
     *
     * @param int|null $callCompletedDt callCompletedDt
     *
     * @return self
     */
    public function setCallCompletedDt($callCompletedDt)
    {
        $this->container['callCompletedDt'] = $callCompletedDt;

        return $this;
    }

    /**
     * Gets recordingUrl
     *
     * @return string|null
     */
    public function getRecordingUrl()
    {
        return $this->container['recordingUrl'];
    }

    /**
     * Sets recordingUrl
     *
     * @param string|null $recordingUrl recordingUrl
     *
     * @return self
     */
    public function setRecordingUrl($recordingUrl)
    {
        $this->container['recordingUrl'] = $recordingUrl;

        return $this;
    }

    /**
     * Gets conversionAmount
     *
     * @return int|null
     */
    public function getConversionAmount()
    {
        return $this->container['conversionAmount'];
    }

    /**
     * Sets conversionAmount
     *
     * @param int|null $conversionAmount conversionAmount
     *
     * @return self
     */
    public function setConversionAmount($conversionAmount)
    {
        $this->container['conversionAmount'] = $conversionAmount;

        return $this;
    }

    /**
     * Gets payoutAmount
     *
     * @return int|null
     */
    public function getPayoutAmount()
    {
        return $this->container['payoutAmount'];
    }

    /**
     * Sets payoutAmount
     *
     * @param int|null $payoutAmount payoutAmount
     *
     * @return self
     */
    public function setPayoutAmount($payoutAmount)
    {
        $this->container['payoutAmount'] = $payoutAmount;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string|null
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string|null $source source
     *
     * @return self
     */
    public function setSource($source)
    {
        $this->container['source'] = $source;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


