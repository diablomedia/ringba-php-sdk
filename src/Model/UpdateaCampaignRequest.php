<?php
/**
 * UpdateaCampaignRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Ringba
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ringba API Documentation
 *
 * Ringbaâ€™s APIs allow you to interact, gather information, and make dynamic changes in real-time. All functions found within the Ringba portal are also available programmatically through our API.   If this is your first time using our API, please read the __Getting Started__ section below.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Ringba\Model;

use \ArrayAccess;
use \Ringba\ObjectSerializer;

/**
 * UpdateaCampaignRequest Class Doc Comment
 *
 * @category Class
 * @package  Ringba
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UpdateaCampaignRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UpdateaCampaignRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'userCampaignId' => 'string',
        'numberDisplayFormat' => 'string',
        'countryCode' => 'string',
        'duplicateSettings' => '\Ringba\Model\DuplicateSettings',
        'deDupeSettings' => '\Ringba\Model\DeDupeSettings',
        'dialSettings' => '\Ringba\Model\DialSettings',
        'evalAnonymDuplication' => 'bool',
        'payoutDupesGlobal' => 'bool',
        'recordSetting' => '\Ringba\Model\RecordSetting2',
        'spamDetection' => '\Ringba\Model\SpamDetection'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'userCampaignId' => null,
        'numberDisplayFormat' => null,
        'countryCode' => null,
        'duplicateSettings' => null,
        'deDupeSettings' => null,
        'dialSettings' => null,
        'evalAnonymDuplication' => null,
        'payoutDupesGlobal' => null,
        'recordSetting' => null,
        'spamDetection' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'userCampaignId' => 'userCampaignId',
        'numberDisplayFormat' => 'numberDisplayFormat',
        'countryCode' => 'countryCode',
        'duplicateSettings' => 'duplicateSettings',
        'deDupeSettings' => 'deDupeSettings',
        'dialSettings' => 'dialSettings',
        'evalAnonymDuplication' => 'evalAnonymDuplication',
        'payoutDupesGlobal' => 'payoutDupesGlobal',
        'recordSetting' => 'recordSetting',
        'spamDetection' => 'spamDetection'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'userCampaignId' => 'setUserCampaignId',
        'numberDisplayFormat' => 'setNumberDisplayFormat',
        'countryCode' => 'setCountryCode',
        'duplicateSettings' => 'setDuplicateSettings',
        'deDupeSettings' => 'setDeDupeSettings',
        'dialSettings' => 'setDialSettings',
        'evalAnonymDuplication' => 'setEvalAnonymDuplication',
        'payoutDupesGlobal' => 'setPayoutDupesGlobal',
        'recordSetting' => 'setRecordSetting',
        'spamDetection' => 'setSpamDetection'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'userCampaignId' => 'getUserCampaignId',
        'numberDisplayFormat' => 'getNumberDisplayFormat',
        'countryCode' => 'getCountryCode',
        'duplicateSettings' => 'getDuplicateSettings',
        'deDupeSettings' => 'getDeDupeSettings',
        'dialSettings' => 'getDialSettings',
        'evalAnonymDuplication' => 'getEvalAnonymDuplication',
        'payoutDupesGlobal' => 'getPayoutDupesGlobal',
        'recordSetting' => 'getRecordSetting',
        'spamDetection' => 'getSpamDetection'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['userCampaignId'] = $data['userCampaignId'] ?? null;
        $this->container['numberDisplayFormat'] = $data['numberDisplayFormat'] ?? null;
        $this->container['countryCode'] = $data['countryCode'] ?? null;
        $this->container['duplicateSettings'] = $data['duplicateSettings'] ?? null;
        $this->container['deDupeSettings'] = $data['deDupeSettings'] ?? null;
        $this->container['dialSettings'] = $data['dialSettings'] ?? null;
        $this->container['evalAnonymDuplication'] = $data['evalAnonymDuplication'] ?? null;
        $this->container['payoutDupesGlobal'] = $data['payoutDupesGlobal'] ?? null;
        $this->container['recordSetting'] = $data['recordSetting'] ?? null;
        $this->container['spamDetection'] = $data['spamDetection'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['userCampaignId'] === null) {
            $invalidProperties[] = "'userCampaignId' can't be null";
        }
        if ($this->container['numberDisplayFormat'] === null) {
            $invalidProperties[] = "'numberDisplayFormat' can't be null";
        }
        if ($this->container['countryCode'] === null) {
            $invalidProperties[] = "'countryCode' can't be null";
        }
        if ($this->container['duplicateSettings'] === null) {
            $invalidProperties[] = "'duplicateSettings' can't be null";
        }
        if ($this->container['deDupeSettings'] === null) {
            $invalidProperties[] = "'deDupeSettings' can't be null";
        }
        if ($this->container['dialSettings'] === null) {
            $invalidProperties[] = "'dialSettings' can't be null";
        }
        if ($this->container['evalAnonymDuplication'] === null) {
            $invalidProperties[] = "'evalAnonymDuplication' can't be null";
        }
        if ($this->container['payoutDupesGlobal'] === null) {
            $invalidProperties[] = "'payoutDupesGlobal' can't be null";
        }
        if ($this->container['recordSetting'] === null) {
            $invalidProperties[] = "'recordSetting' can't be null";
        }
        if ($this->container['spamDetection'] === null) {
            $invalidProperties[] = "'spamDetection' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets userCampaignId
     *
     * @return string
     */
    public function getUserCampaignId()
    {
        return $this->container['userCampaignId'];
    }

    /**
     * Sets userCampaignId
     *
     * @param string $userCampaignId userCampaignId
     *
     * @return self
     */
    public function setUserCampaignId($userCampaignId)
    {
        $this->container['userCampaignId'] = $userCampaignId;

        return $this;
    }

    /**
     * Gets numberDisplayFormat
     *
     * @return string
     */
    public function getNumberDisplayFormat()
    {
        return $this->container['numberDisplayFormat'];
    }

    /**
     * Sets numberDisplayFormat
     *
     * @param string $numberDisplayFormat numberDisplayFormat
     *
     * @return self
     */
    public function setNumberDisplayFormat($numberDisplayFormat)
    {
        $this->container['numberDisplayFormat'] = $numberDisplayFormat;

        return $this;
    }

    /**
     * Gets countryCode
     *
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['countryCode'];
    }

    /**
     * Sets countryCode
     *
     * @param string $countryCode countryCode
     *
     * @return self
     */
    public function setCountryCode($countryCode)
    {
        $this->container['countryCode'] = $countryCode;

        return $this;
    }

    /**
     * Gets duplicateSettings
     *
     * @return \Ringba\Model\DuplicateSettings
     */
    public function getDuplicateSettings()
    {
        return $this->container['duplicateSettings'];
    }

    /**
     * Sets duplicateSettings
     *
     * @param \Ringba\Model\DuplicateSettings $duplicateSettings duplicateSettings
     *
     * @return self
     */
    public function setDuplicateSettings($duplicateSettings)
    {
        $this->container['duplicateSettings'] = $duplicateSettings;

        return $this;
    }

    /**
     * Gets deDupeSettings
     *
     * @return \Ringba\Model\DeDupeSettings
     */
    public function getDeDupeSettings()
    {
        return $this->container['deDupeSettings'];
    }

    /**
     * Sets deDupeSettings
     *
     * @param \Ringba\Model\DeDupeSettings $deDupeSettings deDupeSettings
     *
     * @return self
     */
    public function setDeDupeSettings($deDupeSettings)
    {
        $this->container['deDupeSettings'] = $deDupeSettings;

        return $this;
    }

    /**
     * Gets dialSettings
     *
     * @return \Ringba\Model\DialSettings
     */
    public function getDialSettings()
    {
        return $this->container['dialSettings'];
    }

    /**
     * Sets dialSettings
     *
     * @param \Ringba\Model\DialSettings $dialSettings dialSettings
     *
     * @return self
     */
    public function setDialSettings($dialSettings)
    {
        $this->container['dialSettings'] = $dialSettings;

        return $this;
    }

    /**
     * Gets evalAnonymDuplication
     *
     * @return bool
     */
    public function getEvalAnonymDuplication()
    {
        return $this->container['evalAnonymDuplication'];
    }

    /**
     * Sets evalAnonymDuplication
     *
     * @param bool $evalAnonymDuplication evalAnonymDuplication
     *
     * @return self
     */
    public function setEvalAnonymDuplication($evalAnonymDuplication)
    {
        $this->container['evalAnonymDuplication'] = $evalAnonymDuplication;

        return $this;
    }

    /**
     * Gets payoutDupesGlobal
     *
     * @return bool
     */
    public function getPayoutDupesGlobal()
    {
        return $this->container['payoutDupesGlobal'];
    }

    /**
     * Sets payoutDupesGlobal
     *
     * @param bool $payoutDupesGlobal payoutDupesGlobal
     *
     * @return self
     */
    public function setPayoutDupesGlobal($payoutDupesGlobal)
    {
        $this->container['payoutDupesGlobal'] = $payoutDupesGlobal;

        return $this;
    }

    /**
     * Gets recordSetting
     *
     * @return \Ringba\Model\RecordSetting2
     */
    public function getRecordSetting()
    {
        return $this->container['recordSetting'];
    }

    /**
     * Sets recordSetting
     *
     * @param \Ringba\Model\RecordSetting2 $recordSetting recordSetting
     *
     * @return self
     */
    public function setRecordSetting($recordSetting)
    {
        $this->container['recordSetting'] = $recordSetting;

        return $this;
    }

    /**
     * Gets spamDetection
     *
     * @return \Ringba\Model\SpamDetection
     */
    public function getSpamDetection()
    {
        return $this->container['spamDetection'];
    }

    /**
     * Sets spamDetection
     *
     * @param \Ringba\Model\SpamDetection $spamDetection spamDetection
     *
     * @return self
     */
    public function setSpamDetection($spamDetection)
    {
        $this->container['spamDetection'] = $spamDetection;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


