<?php
/**
 * VoidRevenueandorPaymentforaCallRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Ringba
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ringba API Documentation
 *
 * Ringbaâ€™s APIs allow you to interact, gather information, and make dynamic changes in real-time. All functions found within the Ringba portal are also available programmatically through our API.   If this is your first time using our API, please read the __Getting Started__ section below.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Ringba\Model;

use \ArrayAccess;
use \Ringba\ObjectSerializer;

/**
 * VoidRevenueandorPaymentforaCallRequest Class Doc Comment
 *
 * @category Class
 * @package  Ringba
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class VoidRevenueandorPaymentforaCallRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'VoidRevenueandorPaymentforaCallRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'inboundCallId' => 'string',
        'voidReason' => 'string',
        'voidConversion' => 'bool',
        'voidPayout' => 'bool',
        'voidConverionAmount' => 'float',
        'voidPayoutAmount' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'inboundCallId' => null,
        'voidReason' => null,
        'voidConversion' => null,
        'voidPayout' => null,
        'voidConverionAmount' => null,
        'voidPayoutAmount' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'inboundCallId' => 'inboundCallId',
        'voidReason' => 'voidReason',
        'voidConversion' => 'voidConversion',
        'voidPayout' => 'voidPayout',
        'voidConverionAmount' => 'voidConverionAmount',
        'voidPayoutAmount' => 'voidPayoutAmount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'inboundCallId' => 'setInboundCallId',
        'voidReason' => 'setVoidReason',
        'voidConversion' => 'setVoidConversion',
        'voidPayout' => 'setVoidPayout',
        'voidConverionAmount' => 'setVoidConverionAmount',
        'voidPayoutAmount' => 'setVoidPayoutAmount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'inboundCallId' => 'getInboundCallId',
        'voidReason' => 'getVoidReason',
        'voidConversion' => 'getVoidConversion',
        'voidPayout' => 'getVoidPayout',
        'voidConverionAmount' => 'getVoidConverionAmount',
        'voidPayoutAmount' => 'getVoidPayoutAmount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['inboundCallId'] = $data['inboundCallId'] ?? null;
        $this->container['voidReason'] = $data['voidReason'] ?? null;
        $this->container['voidConversion'] = $data['voidConversion'] ?? null;
        $this->container['voidPayout'] = $data['voidPayout'] ?? null;
        $this->container['voidConverionAmount'] = $data['voidConverionAmount'] ?? null;
        $this->container['voidPayoutAmount'] = $data['voidPayoutAmount'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['inboundCallId'] === null) {
            $invalidProperties[] = "'inboundCallId' can't be null";
        }
        if ($this->container['voidReason'] === null) {
            $invalidProperties[] = "'voidReason' can't be null";
        }
        if ($this->container['voidConversion'] === null) {
            $invalidProperties[] = "'voidConversion' can't be null";
        }
        if ($this->container['voidPayout'] === null) {
            $invalidProperties[] = "'voidPayout' can't be null";
        }
        if ($this->container['voidConverionAmount'] === null) {
            $invalidProperties[] = "'voidConverionAmount' can't be null";
        }
        if ($this->container['voidPayoutAmount'] === null) {
            $invalidProperties[] = "'voidPayoutAmount' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets inboundCallId
     *
     * @return string
     */
    public function getInboundCallId()
    {
        return $this->container['inboundCallId'];
    }

    /**
     * Sets inboundCallId
     *
     * @param string $inboundCallId inboundCallId
     *
     * @return self
     */
    public function setInboundCallId($inboundCallId)
    {
        $this->container['inboundCallId'] = $inboundCallId;

        return $this;
    }

    /**
     * Gets voidReason
     *
     * @return string
     */
    public function getVoidReason()
    {
        return $this->container['voidReason'];
    }

    /**
     * Sets voidReason
     *
     * @param string $voidReason voidReason
     *
     * @return self
     */
    public function setVoidReason($voidReason)
    {
        $this->container['voidReason'] = $voidReason;

        return $this;
    }

    /**
     * Gets voidConversion
     *
     * @return bool
     */
    public function getVoidConversion()
    {
        return $this->container['voidConversion'];
    }

    /**
     * Sets voidConversion
     *
     * @param bool $voidConversion voidConversion
     *
     * @return self
     */
    public function setVoidConversion($voidConversion)
    {
        $this->container['voidConversion'] = $voidConversion;

        return $this;
    }

    /**
     * Gets voidPayout
     *
     * @return bool
     */
    public function getVoidPayout()
    {
        return $this->container['voidPayout'];
    }

    /**
     * Sets voidPayout
     *
     * @param bool $voidPayout voidPayout
     *
     * @return self
     */
    public function setVoidPayout($voidPayout)
    {
        $this->container['voidPayout'] = $voidPayout;

        return $this;
    }

    /**
     * Gets voidConverionAmount
     *
     * @return float
     */
    public function getVoidConverionAmount()
    {
        return $this->container['voidConverionAmount'];
    }

    /**
     * Sets voidConverionAmount
     *
     * @param float $voidConverionAmount voidConverionAmount
     *
     * @return self
     */
    public function setVoidConverionAmount($voidConverionAmount)
    {
        $this->container['voidConverionAmount'] = $voidConverionAmount;

        return $this;
    }

    /**
     * Gets voidPayoutAmount
     *
     * @return float
     */
    public function getVoidPayoutAmount()
    {
        return $this->container['voidPayoutAmount'];
    }

    /**
     * Sets voidPayoutAmount
     *
     * @param float $voidPayoutAmount voidPayoutAmount
     *
     * @return self
     */
    public function setVoidPayoutAmount($voidPayoutAmount)
    {
        $this->container['voidPayoutAmount'] = $voidPayoutAmount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


