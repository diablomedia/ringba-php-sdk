<?php
/**
 * Column
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Ringba
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ringba API Documentation
 *
 * Ringbaâ€™s APIs allow you to interact, gather information, and make dynamic changes in real-time. All functions found within the Ringba portal are also available programmatically through our API.   If this is your first time using our API, please read the __Getting Started__ section below.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Ringba\Model;

use \ArrayAccess;
use \Ringba\ObjectSerializer;

/**
 * Column Class Doc Comment
 *
 * @category Class
 * @package  Ringba
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Column implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Column';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'title' => 'string',
        'roles' => 'string[]',
        'type' => 'string',
        'isTag' => 'bool',
        'groupName' => 'string',
        'filterGroupName' => 'string',
        'supportsFilter' => 'bool',
        'supportsSorting' => 'bool',
        'isComputed' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'title' => null,
        'roles' => null,
        'type' => null,
        'isTag' => null,
        'groupName' => null,
        'filterGroupName' => null,
        'supportsFilter' => null,
        'supportsSorting' => null,
        'isComputed' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'title' => 'title',
        'roles' => 'roles',
        'type' => 'type',
        'isTag' => 'isTag',
        'groupName' => 'groupName',
        'filterGroupName' => 'filterGroupName',
        'supportsFilter' => 'supportsFilter',
        'supportsSorting' => 'supportsSorting',
        'isComputed' => 'isComputed'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'title' => 'setTitle',
        'roles' => 'setRoles',
        'type' => 'setType',
        'isTag' => 'setIsTag',
        'groupName' => 'setGroupName',
        'filterGroupName' => 'setFilterGroupName',
        'supportsFilter' => 'setSupportsFilter',
        'supportsSorting' => 'setSupportsSorting',
        'isComputed' => 'setIsComputed'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'title' => 'getTitle',
        'roles' => 'getRoles',
        'type' => 'getType',
        'isTag' => 'getIsTag',
        'groupName' => 'getGroupName',
        'filterGroupName' => 'getFilterGroupName',
        'supportsFilter' => 'getSupportsFilter',
        'supportsSorting' => 'getSupportsSorting',
        'isComputed' => 'getIsComputed'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['title'] = $data['title'] ?? null;
        $this->container['roles'] = $data['roles'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['isTag'] = $data['isTag'] ?? null;
        $this->container['groupName'] = $data['groupName'] ?? null;
        $this->container['filterGroupName'] = $data['filterGroupName'] ?? null;
        $this->container['supportsFilter'] = $data['supportsFilter'] ?? null;
        $this->container['supportsSorting'] = $data['supportsSorting'] ?? null;
        $this->container['isComputed'] = $data['isComputed'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['title'] === null) {
            $invalidProperties[] = "'title' can't be null";
        }
        if ($this->container['roles'] === null) {
            $invalidProperties[] = "'roles' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['isTag'] === null) {
            $invalidProperties[] = "'isTag' can't be null";
        }
        if ($this->container['groupName'] === null) {
            $invalidProperties[] = "'groupName' can't be null";
        }
        if ($this->container['supportsFilter'] === null) {
            $invalidProperties[] = "'supportsFilter' can't be null";
        }
        if ($this->container['supportsSorting'] === null) {
            $invalidProperties[] = "'supportsSorting' can't be null";
        }
        if ($this->container['isComputed'] === null) {
            $invalidProperties[] = "'isComputed' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return self
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets roles
     *
     * @return string[]
     */
    public function getRoles()
    {
        return $this->container['roles'];
    }

    /**
     * Sets roles
     *
     * @param string[] $roles 
     *
     * @return self
     */
    public function setRoles($roles)
    {
        $this->container['roles'] = $roles;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return self
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets isTag
     *
     * @return bool
     */
    public function getIsTag()
    {
        return $this->container['isTag'];
    }

    /**
     * Sets isTag
     *
     * @param bool $isTag isTag
     *
     * @return self
     */
    public function setIsTag($isTag)
    {
        $this->container['isTag'] = $isTag;

        return $this;
    }

    /**
     * Gets groupName
     *
     * @return string
     */
    public function getGroupName()
    {
        return $this->container['groupName'];
    }

    /**
     * Sets groupName
     *
     * @param string $groupName groupName
     *
     * @return self
     */
    public function setGroupName($groupName)
    {
        $this->container['groupName'] = $groupName;

        return $this;
    }

    /**
     * Gets filterGroupName
     *
     * @return string|null
     */
    public function getFilterGroupName()
    {
        return $this->container['filterGroupName'];
    }

    /**
     * Sets filterGroupName
     *
     * @param string|null $filterGroupName filterGroupName
     *
     * @return self
     */
    public function setFilterGroupName($filterGroupName)
    {
        $this->container['filterGroupName'] = $filterGroupName;

        return $this;
    }

    /**
     * Gets supportsFilter
     *
     * @return bool
     */
    public function getSupportsFilter()
    {
        return $this->container['supportsFilter'];
    }

    /**
     * Sets supportsFilter
     *
     * @param bool $supportsFilter supportsFilter
     *
     * @return self
     */
    public function setSupportsFilter($supportsFilter)
    {
        $this->container['supportsFilter'] = $supportsFilter;

        return $this;
    }

    /**
     * Gets supportsSorting
     *
     * @return bool
     */
    public function getSupportsSorting()
    {
        return $this->container['supportsSorting'];
    }

    /**
     * Sets supportsSorting
     *
     * @param bool $supportsSorting supportsSorting
     *
     * @return self
     */
    public function setSupportsSorting($supportsSorting)
    {
        $this->container['supportsSorting'] = $supportsSorting;

        return $this;
    }

    /**
     * Gets isComputed
     *
     * @return bool
     */
    public function getIsComputed()
    {
        return $this->container['isComputed'];
    }

    /**
     * Sets isComputed
     *
     * @param bool $isComputed isComputed
     *
     * @return self
     */
    public function setIsComputed($isComputed)
    {
        $this->container['isComputed'] = $isComputed;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


