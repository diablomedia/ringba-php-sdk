<?php
/**
 * TargetsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Ringba
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ringba API Documentation
 *
 * Ringbaâ€™s APIs allow you to interact, gather information, and make dynamic changes in real-time. All functions found within the Ringba portal are also available programmatically through our API.   If this is your first time using our API, please read the __Getting Started__ section below.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Ringba\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Ringba\ApiException;
use Ringba\Configuration;
use Ringba\HeaderSelector;
use Ringba\ObjectSerializer;

/**
 * TargetsApi Class Doc Comment
 *
 * @category Class
 * @package  Ringba
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TargetsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation assignTargettoBuyer
     *
     * Assign Target to Buyer
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $targetId  (required)
     * @param  \Ringba\Model\AssignTargettoBuyerRequest $assignTargettoBuyerRequest  (required)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ringba\Model\AddBuyertoTarget
     */
    public function assignTargettoBuyer($authorization, $accountId, $targetId, $assignTargettoBuyerRequest)
    {
        list($response) = $this->assignTargettoBuyerWithHttpInfo($authorization, $accountId, $targetId, $assignTargettoBuyerRequest);
        return $response;
    }

    /**
     * Operation assignTargettoBuyerWithHttpInfo
     *
     * Assign Target to Buyer
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $targetId  (required)
     * @param  \Ringba\Model\AssignTargettoBuyerRequest $assignTargettoBuyerRequest  (required)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ringba\Model\AddBuyertoTarget, HTTP status code, HTTP response headers (array of strings)
     */
    public function assignTargettoBuyerWithHttpInfo($authorization, $accountId, $targetId, $assignTargettoBuyerRequest)
    {
        $request = $this->assignTargettoBuyerRequest($authorization, $accountId, $targetId, $assignTargettoBuyerRequest);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ringba\Model\AddBuyertoTarget' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ringba\Model\AddBuyertoTarget' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ringba\Model\AddBuyertoTarget', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ringba\Model\AddBuyertoTarget';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ringba\Model\AddBuyertoTarget',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation assignTargettoBuyerAsync
     *
     * Assign Target to Buyer
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $targetId  (required)
     * @param  \Ringba\Model\AssignTargettoBuyerRequest $assignTargettoBuyerRequest  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assignTargettoBuyerAsync($authorization, $accountId, $targetId, $assignTargettoBuyerRequest)
    {
        return $this->assignTargettoBuyerAsyncWithHttpInfo($authorization, $accountId, $targetId, $assignTargettoBuyerRequest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation assignTargettoBuyerAsyncWithHttpInfo
     *
     * Assign Target to Buyer
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $targetId  (required)
     * @param  \Ringba\Model\AssignTargettoBuyerRequest $assignTargettoBuyerRequest  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assignTargettoBuyerAsyncWithHttpInfo($authorization, $accountId, $targetId, $assignTargettoBuyerRequest)
    {
        $returnType = '\Ringba\Model\AddBuyertoTarget';
        $request = $this->assignTargettoBuyerRequest($authorization, $accountId, $targetId, $assignTargettoBuyerRequest);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'assignTargettoBuyer'
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $targetId  (required)
     * @param  \Ringba\Model\AssignTargettoBuyerRequest $assignTargettoBuyerRequest  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function assignTargettoBuyerRequest($authorization, $accountId, $targetId, $assignTargettoBuyerRequest)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling assignTargettoBuyer'
            );
        }
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling assignTargettoBuyer'
            );
        }
        // verify the required parameter 'targetId' is set
        if ($targetId === null || (is_array($targetId) && count($targetId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $targetId when calling assignTargettoBuyer'
            );
        }
        // verify the required parameter 'assignTargettoBuyerRequest' is set
        if ($assignTargettoBuyerRequest === null || (is_array($assignTargettoBuyerRequest) && count($assignTargettoBuyerRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $assignTargettoBuyerRequest when calling assignTargettoBuyer'
            );
        }

        $resourcePath = '/{accountId}/targets/{targetId}/Buyer';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($targetId !== null) {
            $resourcePath = str_replace(
                '{' . 'targetId' . '}',
                ObjectSerializer::toPathValue($targetId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json; charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json; charset=utf-8'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($assignTargettoBuyerRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($assignTargettoBuyerRequest));
            } else {
                $httpBody = $assignTargettoBuyerRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHosts = ["http://example.com"];
        if ($this->hostIndex < 0 || $this->hostIndex >= sizeof($operationHosts)) {
            throw new \InvalidArgumentException("Invalid index {$this->hostIndex} when selecting the host. Must be less than ".sizeof($operationHosts));
        }
        $operationHost = $operationHosts[$this->hostIndex];

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation checkDuplicateTargets
     *
     * Check Duplicate Targets
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  \Ringba\Model\CheckDuplicateTargetsRequest $checkDuplicateTargetsRequest  (required)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ringba\Model\CheckDuplicateTargetswithnonDuplicatetarget
     */
    public function checkDuplicateTargets($authorization, $accountId, $checkDuplicateTargetsRequest)
    {
        list($response) = $this->checkDuplicateTargetsWithHttpInfo($authorization, $accountId, $checkDuplicateTargetsRequest);
        return $response;
    }

    /**
     * Operation checkDuplicateTargetsWithHttpInfo
     *
     * Check Duplicate Targets
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  \Ringba\Model\CheckDuplicateTargetsRequest $checkDuplicateTargetsRequest  (required)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ringba\Model\CheckDuplicateTargetswithnonDuplicatetarget, HTTP status code, HTTP response headers (array of strings)
     */
    public function checkDuplicateTargetsWithHttpInfo($authorization, $accountId, $checkDuplicateTargetsRequest)
    {
        $request = $this->checkDuplicateTargetsRequest($authorization, $accountId, $checkDuplicateTargetsRequest);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ringba\Model\CheckDuplicateTargetswithnonDuplicatetarget' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ringba\Model\CheckDuplicateTargetswithnonDuplicatetarget' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ringba\Model\CheckDuplicateTargetswithnonDuplicatetarget', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ringba\Model\CheckDuplicateTargetswithnonDuplicatetarget';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ringba\Model\CheckDuplicateTargetswithnonDuplicatetarget',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation checkDuplicateTargetsAsync
     *
     * Check Duplicate Targets
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  \Ringba\Model\CheckDuplicateTargetsRequest $checkDuplicateTargetsRequest  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkDuplicateTargetsAsync($authorization, $accountId, $checkDuplicateTargetsRequest)
    {
        return $this->checkDuplicateTargetsAsyncWithHttpInfo($authorization, $accountId, $checkDuplicateTargetsRequest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation checkDuplicateTargetsAsyncWithHttpInfo
     *
     * Check Duplicate Targets
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  \Ringba\Model\CheckDuplicateTargetsRequest $checkDuplicateTargetsRequest  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkDuplicateTargetsAsyncWithHttpInfo($authorization, $accountId, $checkDuplicateTargetsRequest)
    {
        $returnType = '\Ringba\Model\CheckDuplicateTargetswithnonDuplicatetarget';
        $request = $this->checkDuplicateTargetsRequest($authorization, $accountId, $checkDuplicateTargetsRequest);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'checkDuplicateTargets'
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  \Ringba\Model\CheckDuplicateTargetsRequest $checkDuplicateTargetsRequest  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function checkDuplicateTargetsRequest($authorization, $accountId, $checkDuplicateTargetsRequest)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling checkDuplicateTargets'
            );
        }
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling checkDuplicateTargets'
            );
        }
        // verify the required parameter 'checkDuplicateTargetsRequest' is set
        if ($checkDuplicateTargetsRequest === null || (is_array($checkDuplicateTargetsRequest) && count($checkDuplicateTargetsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $checkDuplicateTargetsRequest when calling checkDuplicateTargets'
            );
        }

        $resourcePath = '/{accountId}/targets/isDuplicate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json; charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json; charset=utf-8'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($checkDuplicateTargetsRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($checkDuplicateTargetsRequest));
            } else {
                $httpBody = $checkDuplicateTargetsRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHosts = ["http://example.com"];
        if ($this->hostIndex < 0 || $this->hostIndex >= sizeof($operationHosts)) {
            throw new \InvalidArgumentException("Invalid index {$this->hostIndex} when selecting the host. Must be less than ".sizeof($operationHosts));
        }
        $operationHost = $operationHosts[$this->hostIndex];

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createNewTarget
     *
     * Create New Target
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  \Ringba\Model\CreateNewTargetRequest $createNewTargetRequest  (required)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ringba\Model\CreateNewTargetWithPhoneNumber
     */
    public function createNewTarget($authorization, $accountId, $createNewTargetRequest)
    {
        list($response) = $this->createNewTargetWithHttpInfo($authorization, $accountId, $createNewTargetRequest);
        return $response;
    }

    /**
     * Operation createNewTargetWithHttpInfo
     *
     * Create New Target
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  \Ringba\Model\CreateNewTargetRequest $createNewTargetRequest  (required)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ringba\Model\CreateNewTargetWithPhoneNumber, HTTP status code, HTTP response headers (array of strings)
     */
    public function createNewTargetWithHttpInfo($authorization, $accountId, $createNewTargetRequest)
    {
        $request = $this->createNewTargetRequest($authorization, $accountId, $createNewTargetRequest);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ringba\Model\CreateNewTargetWithPhoneNumber' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ringba\Model\CreateNewTargetWithPhoneNumber' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ringba\Model\CreateNewTargetWithPhoneNumber', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ringba\Model\CreateNewTargetWithPhoneNumber';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ringba\Model\CreateNewTargetWithPhoneNumber',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createNewTargetAsync
     *
     * Create New Target
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  \Ringba\Model\CreateNewTargetRequest $createNewTargetRequest  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNewTargetAsync($authorization, $accountId, $createNewTargetRequest)
    {
        return $this->createNewTargetAsyncWithHttpInfo($authorization, $accountId, $createNewTargetRequest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createNewTargetAsyncWithHttpInfo
     *
     * Create New Target
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  \Ringba\Model\CreateNewTargetRequest $createNewTargetRequest  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNewTargetAsyncWithHttpInfo($authorization, $accountId, $createNewTargetRequest)
    {
        $returnType = '\Ringba\Model\CreateNewTargetWithPhoneNumber';
        $request = $this->createNewTargetRequest($authorization, $accountId, $createNewTargetRequest);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createNewTarget'
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  \Ringba\Model\CreateNewTargetRequest $createNewTargetRequest  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createNewTargetRequest($authorization, $accountId, $createNewTargetRequest)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling createNewTarget'
            );
        }
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling createNewTarget'
            );
        }
        // verify the required parameter 'createNewTargetRequest' is set
        if ($createNewTargetRequest === null || (is_array($createNewTargetRequest) && count($createNewTargetRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $createNewTargetRequest when calling createNewTarget'
            );
        }

        $resourcePath = '/{accountId}/targets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json; charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json; charset=utf-8'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($createNewTargetRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($createNewTargetRequest));
            } else {
                $httpBody = $createNewTargetRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHosts = ["http://example.com"];
        if ($this->hostIndex < 0 || $this->hostIndex >= sizeof($operationHosts)) {
            throw new \InvalidArgumentException("Invalid index {$this->hostIndex} when selecting the host. Must be less than ".sizeof($operationHosts));
        }
        $operationHost = $operationHosts[$this->hostIndex];

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteBuyerFromTarget
     *
     * Delete Buyer From Target
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $targetId  (required)
     * @param  string $buyerId  (required)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ringba\Model\DeleteBuyerFromTarget
     */
    public function deleteBuyerFromTarget($authorization, $accountId, $targetId, $buyerId)
    {
        list($response) = $this->deleteBuyerFromTargetWithHttpInfo($authorization, $accountId, $targetId, $buyerId);
        return $response;
    }

    /**
     * Operation deleteBuyerFromTargetWithHttpInfo
     *
     * Delete Buyer From Target
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $targetId  (required)
     * @param  string $buyerId  (required)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ringba\Model\DeleteBuyerFromTarget, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteBuyerFromTargetWithHttpInfo($authorization, $accountId, $targetId, $buyerId)
    {
        $request = $this->deleteBuyerFromTargetRequest($authorization, $accountId, $targetId, $buyerId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ringba\Model\DeleteBuyerFromTarget' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ringba\Model\DeleteBuyerFromTarget' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ringba\Model\DeleteBuyerFromTarget', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ringba\Model\DeleteBuyerFromTarget';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ringba\Model\DeleteBuyerFromTarget',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteBuyerFromTargetAsync
     *
     * Delete Buyer From Target
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $targetId  (required)
     * @param  string $buyerId  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteBuyerFromTargetAsync($authorization, $accountId, $targetId, $buyerId)
    {
        return $this->deleteBuyerFromTargetAsyncWithHttpInfo($authorization, $accountId, $targetId, $buyerId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteBuyerFromTargetAsyncWithHttpInfo
     *
     * Delete Buyer From Target
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $targetId  (required)
     * @param  string $buyerId  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteBuyerFromTargetAsyncWithHttpInfo($authorization, $accountId, $targetId, $buyerId)
    {
        $returnType = '\Ringba\Model\DeleteBuyerFromTarget';
        $request = $this->deleteBuyerFromTargetRequest($authorization, $accountId, $targetId, $buyerId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteBuyerFromTarget'
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $targetId  (required)
     * @param  string $buyerId  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteBuyerFromTargetRequest($authorization, $accountId, $targetId, $buyerId)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling deleteBuyerFromTarget'
            );
        }
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling deleteBuyerFromTarget'
            );
        }
        // verify the required parameter 'targetId' is set
        if ($targetId === null || (is_array($targetId) && count($targetId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $targetId when calling deleteBuyerFromTarget'
            );
        }
        // verify the required parameter 'buyerId' is set
        if ($buyerId === null || (is_array($buyerId) && count($buyerId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $buyerId when calling deleteBuyerFromTarget'
            );
        }

        $resourcePath = '/{accountId}/targets/{targetId}/Buyer/{buyerId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($targetId !== null) {
            $resourcePath = str_replace(
                '{' . 'targetId' . '}',
                ObjectSerializer::toPathValue($targetId),
                $resourcePath
            );
        }
        // path params
        if ($buyerId !== null) {
            $resourcePath = str_replace(
                '{' . 'buyerId' . '}',
                ObjectSerializer::toPathValue($buyerId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json; charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json; charset=utf-8'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHosts = ["http://example.com"];
        if ($this->hostIndex < 0 || $this->hostIndex >= sizeof($operationHosts)) {
            throw new \InvalidArgumentException("Invalid index {$this->hostIndex} when selecting the host. Must be less than ".sizeof($operationHosts));
        }
        $operationHost = $operationHosts[$this->hostIndex];

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteTarget
     *
     * Delete Target
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $targetId  (required)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ringba\Model\DeleteTarget
     */
    public function deleteTarget($authorization, $accountId, $targetId)
    {
        list($response) = $this->deleteTargetWithHttpInfo($authorization, $accountId, $targetId);
        return $response;
    }

    /**
     * Operation deleteTargetWithHttpInfo
     *
     * Delete Target
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $targetId  (required)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ringba\Model\DeleteTarget, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteTargetWithHttpInfo($authorization, $accountId, $targetId)
    {
        $request = $this->deleteTargetRequest($authorization, $accountId, $targetId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ringba\Model\DeleteTarget' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ringba\Model\DeleteTarget' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ringba\Model\DeleteTarget', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ringba\Model\DeleteTarget';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ringba\Model\DeleteTarget',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteTargetAsync
     *
     * Delete Target
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $targetId  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteTargetAsync($authorization, $accountId, $targetId)
    {
        return $this->deleteTargetAsyncWithHttpInfo($authorization, $accountId, $targetId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteTargetAsyncWithHttpInfo
     *
     * Delete Target
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $targetId  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteTargetAsyncWithHttpInfo($authorization, $accountId, $targetId)
    {
        $returnType = '\Ringba\Model\DeleteTarget';
        $request = $this->deleteTargetRequest($authorization, $accountId, $targetId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteTarget'
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $targetId  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteTargetRequest($authorization, $accountId, $targetId)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling deleteTarget'
            );
        }
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling deleteTarget'
            );
        }
        // verify the required parameter 'targetId' is set
        if ($targetId === null || (is_array($targetId) && count($targetId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $targetId when calling deleteTarget'
            );
        }

        $resourcePath = '/{accountId}/targets/{targetId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($targetId !== null) {
            $resourcePath = str_replace(
                '{' . 'targetId' . '}',
                ObjectSerializer::toPathValue($targetId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json; charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json; charset=utf-8'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHosts = ["http://example.com"];
        if ($this->hostIndex < 0 || $this->hostIndex >= sizeof($operationHosts)) {
            throw new \InvalidArgumentException("Invalid index {$this->hostIndex} when selecting the host. Must be less than ".sizeof($operationHosts));
        }
        $operationHost = $operationHosts[$this->hostIndex];

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDetailsAboutaSpecificTarget
     *
     * Get Details About a Specific Target
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $targetId  (required)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ringba\Model\GetDetailsAboutaSpecificTarget
     */
    public function getDetailsAboutaSpecificTarget($authorization, $accountId, $targetId)
    {
        list($response) = $this->getDetailsAboutaSpecificTargetWithHttpInfo($authorization, $accountId, $targetId);
        return $response;
    }

    /**
     * Operation getDetailsAboutaSpecificTargetWithHttpInfo
     *
     * Get Details About a Specific Target
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $targetId  (required)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ringba\Model\GetDetailsAboutaSpecificTarget, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDetailsAboutaSpecificTargetWithHttpInfo($authorization, $accountId, $targetId)
    {
        $request = $this->getDetailsAboutaSpecificTargetRequest($authorization, $accountId, $targetId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ringba\Model\GetDetailsAboutaSpecificTarget' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ringba\Model\GetDetailsAboutaSpecificTarget' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ringba\Model\GetDetailsAboutaSpecificTarget', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ringba\Model\GetDetailsAboutaSpecificTarget';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ringba\Model\GetDetailsAboutaSpecificTarget',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDetailsAboutaSpecificTargetAsync
     *
     * Get Details About a Specific Target
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $targetId  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDetailsAboutaSpecificTargetAsync($authorization, $accountId, $targetId)
    {
        return $this->getDetailsAboutaSpecificTargetAsyncWithHttpInfo($authorization, $accountId, $targetId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDetailsAboutaSpecificTargetAsyncWithHttpInfo
     *
     * Get Details About a Specific Target
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $targetId  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDetailsAboutaSpecificTargetAsyncWithHttpInfo($authorization, $accountId, $targetId)
    {
        $returnType = '\Ringba\Model\GetDetailsAboutaSpecificTarget';
        $request = $this->getDetailsAboutaSpecificTargetRequest($authorization, $accountId, $targetId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDetailsAboutaSpecificTarget'
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $targetId  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDetailsAboutaSpecificTargetRequest($authorization, $accountId, $targetId)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling getDetailsAboutaSpecificTarget'
            );
        }
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling getDetailsAboutaSpecificTarget'
            );
        }
        // verify the required parameter 'targetId' is set
        if ($targetId === null || (is_array($targetId) && count($targetId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $targetId when calling getDetailsAboutaSpecificTarget'
            );
        }

        $resourcePath = '/{accountId}/targets/{targetId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($targetId !== null) {
            $resourcePath = str_replace(
                '{' . 'targetId' . '}',
                ObjectSerializer::toPathValue($targetId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json; charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json; charset=utf-8'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHosts = ["http://example.com"];
        if ($this->hostIndex < 0 || $this->hostIndex >= sizeof($operationHosts)) {
            throw new \InvalidArgumentException("Invalid index {$this->hostIndex} when selecting the host. Must be less than ".sizeof($operationHosts));
        }
        $operationHost = $operationHosts[$this->hostIndex];

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getInboundReferencesforaSpecificTarget
     *
     * Get Inbound References for a Specific Target
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $targetId  (required)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ringba\Model\GetInboundReferencesforaSpecificTarget
     */
    public function getInboundReferencesforaSpecificTarget($authorization, $accountId, $targetId)
    {
        list($response) = $this->getInboundReferencesforaSpecificTargetWithHttpInfo($authorization, $accountId, $targetId);
        return $response;
    }

    /**
     * Operation getInboundReferencesforaSpecificTargetWithHttpInfo
     *
     * Get Inbound References for a Specific Target
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $targetId  (required)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ringba\Model\GetInboundReferencesforaSpecificTarget, HTTP status code, HTTP response headers (array of strings)
     */
    public function getInboundReferencesforaSpecificTargetWithHttpInfo($authorization, $accountId, $targetId)
    {
        $request = $this->getInboundReferencesforaSpecificTargetRequest($authorization, $accountId, $targetId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ringba\Model\GetInboundReferencesforaSpecificTarget' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ringba\Model\GetInboundReferencesforaSpecificTarget' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ringba\Model\GetInboundReferencesforaSpecificTarget', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ringba\Model\GetInboundReferencesforaSpecificTarget';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ringba\Model\GetInboundReferencesforaSpecificTarget',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getInboundReferencesforaSpecificTargetAsync
     *
     * Get Inbound References for a Specific Target
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $targetId  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInboundReferencesforaSpecificTargetAsync($authorization, $accountId, $targetId)
    {
        return $this->getInboundReferencesforaSpecificTargetAsyncWithHttpInfo($authorization, $accountId, $targetId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getInboundReferencesforaSpecificTargetAsyncWithHttpInfo
     *
     * Get Inbound References for a Specific Target
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $targetId  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInboundReferencesforaSpecificTargetAsyncWithHttpInfo($authorization, $accountId, $targetId)
    {
        $returnType = '\Ringba\Model\GetInboundReferencesforaSpecificTarget';
        $request = $this->getInboundReferencesforaSpecificTargetRequest($authorization, $accountId, $targetId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getInboundReferencesforaSpecificTarget'
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $targetId  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getInboundReferencesforaSpecificTargetRequest($authorization, $accountId, $targetId)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling getInboundReferencesforaSpecificTarget'
            );
        }
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling getInboundReferencesforaSpecificTarget'
            );
        }
        // verify the required parameter 'targetId' is set
        if ($targetId === null || (is_array($targetId) && count($targetId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $targetId when calling getInboundReferencesforaSpecificTarget'
            );
        }

        $resourcePath = '/{accountId}/targets/{targetId}/InboundReferences';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($targetId !== null) {
            $resourcePath = str_replace(
                '{' . 'targetId' . '}',
                ObjectSerializer::toPathValue($targetId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json; charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json; charset=utf-8'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHosts = ["http://example.com"];
        if ($this->hostIndex < 0 || $this->hostIndex >= sizeof($operationHosts)) {
            throw new \InvalidArgumentException("Invalid index {$this->hostIndex} when selecting the host. Must be less than ".sizeof($operationHosts));
        }
        $operationHost = $operationHosts[$this->hostIndex];

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getStatsforaSpecificTarget
     *
     * Get Stats for a Specific Target
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $targetId  (required)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ringba\Model\GetStatsforaSpecificTarget
     */
    public function getStatsforaSpecificTarget($authorization, $accountId, $targetId)
    {
        list($response) = $this->getStatsforaSpecificTargetWithHttpInfo($authorization, $accountId, $targetId);
        return $response;
    }

    /**
     * Operation getStatsforaSpecificTargetWithHttpInfo
     *
     * Get Stats for a Specific Target
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $targetId  (required)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ringba\Model\GetStatsforaSpecificTarget, HTTP status code, HTTP response headers (array of strings)
     */
    public function getStatsforaSpecificTargetWithHttpInfo($authorization, $accountId, $targetId)
    {
        $request = $this->getStatsforaSpecificTargetRequest($authorization, $accountId, $targetId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ringba\Model\GetStatsforaSpecificTarget' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ringba\Model\GetStatsforaSpecificTarget' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ringba\Model\GetStatsforaSpecificTarget', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ringba\Model\GetStatsforaSpecificTarget';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ringba\Model\GetStatsforaSpecificTarget',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getStatsforaSpecificTargetAsync
     *
     * Get Stats for a Specific Target
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $targetId  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStatsforaSpecificTargetAsync($authorization, $accountId, $targetId)
    {
        return $this->getStatsforaSpecificTargetAsyncWithHttpInfo($authorization, $accountId, $targetId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getStatsforaSpecificTargetAsyncWithHttpInfo
     *
     * Get Stats for a Specific Target
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $targetId  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStatsforaSpecificTargetAsyncWithHttpInfo($authorization, $accountId, $targetId)
    {
        $returnType = '\Ringba\Model\GetStatsforaSpecificTarget';
        $request = $this->getStatsforaSpecificTargetRequest($authorization, $accountId, $targetId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getStatsforaSpecificTarget'
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $targetId  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getStatsforaSpecificTargetRequest($authorization, $accountId, $targetId)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling getStatsforaSpecificTarget'
            );
        }
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling getStatsforaSpecificTarget'
            );
        }
        // verify the required parameter 'targetId' is set
        if ($targetId === null || (is_array($targetId) && count($targetId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $targetId when calling getStatsforaSpecificTarget'
            );
        }

        $resourcePath = '/{accountId}/targets/{targetId}/Counts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($targetId !== null) {
            $resourcePath = str_replace(
                '{' . 'targetId' . '}',
                ObjectSerializer::toPathValue($targetId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json; charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json; charset=utf-8'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHosts = ["http://example.com"];
        if ($this->hostIndex < 0 || $this->hostIndex >= sizeof($operationHosts)) {
            throw new \InvalidArgumentException("Invalid index {$this->hostIndex} when selecting the host. Must be less than ".sizeof($operationHosts));
        }
        $operationHost = $operationHosts[$this->hostIndex];

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTargets
     *
     * Get Targets
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ringba\Model\GetTargets
     */
    public function getTargets($authorization, $accountId)
    {
        list($response) = $this->getTargetsWithHttpInfo($authorization, $accountId);
        return $response;
    }

    /**
     * Operation getTargetsWithHttpInfo
     *
     * Get Targets
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ringba\Model\GetTargets, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTargetsWithHttpInfo($authorization, $accountId)
    {
        $request = $this->getTargetsRequest($authorization, $accountId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ringba\Model\GetTargets' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ringba\Model\GetTargets' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ringba\Model\GetTargets', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ringba\Model\GetTargets';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ringba\Model\GetTargets',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTargetsAsync
     *
     * Get Targets
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTargetsAsync($authorization, $accountId)
    {
        return $this->getTargetsAsyncWithHttpInfo($authorization, $accountId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTargetsAsyncWithHttpInfo
     *
     * Get Targets
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTargetsAsyncWithHttpInfo($authorization, $accountId)
    {
        $returnType = '\Ringba\Model\GetTargets';
        $request = $this->getTargetsRequest($authorization, $accountId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTargets'
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getTargetsRequest($authorization, $accountId)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling getTargets'
            );
        }
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling getTargets'
            );
        }

        $resourcePath = '/{accountId}/targets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHosts = ["http://example.com"];
        if ($this->hostIndex < 0 || $this->hostIndex >= sizeof($operationHosts)) {
            throw new \InvalidArgumentException("Invalid index {$this->hostIndex} when selecting the host. Must be less than ".sizeof($operationHosts));
        }
        $operationHost = $operationHosts[$this->hostIndex];

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation resetCountforaSpecificTarget
     *
     * Reset Count for a Specific Target
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $targetId  (required)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ringba\Model\ResetCountforaSpecificTarget
     */
    public function resetCountforaSpecificTarget($authorization, $accountId, $targetId)
    {
        list($response) = $this->resetCountforaSpecificTargetWithHttpInfo($authorization, $accountId, $targetId);
        return $response;
    }

    /**
     * Operation resetCountforaSpecificTargetWithHttpInfo
     *
     * Reset Count for a Specific Target
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $targetId  (required)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ringba\Model\ResetCountforaSpecificTarget, HTTP status code, HTTP response headers (array of strings)
     */
    public function resetCountforaSpecificTargetWithHttpInfo($authorization, $accountId, $targetId)
    {
        $request = $this->resetCountforaSpecificTargetRequest($authorization, $accountId, $targetId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ringba\Model\ResetCountforaSpecificTarget' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ringba\Model\ResetCountforaSpecificTarget' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ringba\Model\ResetCountforaSpecificTarget', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ringba\Model\ResetCountforaSpecificTarget';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ringba\Model\ResetCountforaSpecificTarget',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation resetCountforaSpecificTargetAsync
     *
     * Reset Count for a Specific Target
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $targetId  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function resetCountforaSpecificTargetAsync($authorization, $accountId, $targetId)
    {
        return $this->resetCountforaSpecificTargetAsyncWithHttpInfo($authorization, $accountId, $targetId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation resetCountforaSpecificTargetAsyncWithHttpInfo
     *
     * Reset Count for a Specific Target
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $targetId  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function resetCountforaSpecificTargetAsyncWithHttpInfo($authorization, $accountId, $targetId)
    {
        $returnType = '\Ringba\Model\ResetCountforaSpecificTarget';
        $request = $this->resetCountforaSpecificTargetRequest($authorization, $accountId, $targetId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'resetCountforaSpecificTarget'
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $targetId  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function resetCountforaSpecificTargetRequest($authorization, $accountId, $targetId)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling resetCountforaSpecificTarget'
            );
        }
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling resetCountforaSpecificTarget'
            );
        }
        // verify the required parameter 'targetId' is set
        if ($targetId === null || (is_array($targetId) && count($targetId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $targetId when calling resetCountforaSpecificTarget'
            );
        }

        $resourcePath = '/{accountId}/targets/{targetId}/ResetCount';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($targetId !== null) {
            $resourcePath = str_replace(
                '{' . 'targetId' . '}',
                ObjectSerializer::toPathValue($targetId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json; charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json; charset=utf-8'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHosts = ["http://example.com"];
        if ($this->hostIndex < 0 || $this->hostIndex >= sizeof($operationHosts)) {
            throw new \InvalidArgumentException("Invalid index {$this->hostIndex} when selecting the host. Must be less than ".sizeof($operationHosts));
        }
        $operationHost = $operationHosts[$this->hostIndex];

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateTarget
     *
     * Update Target
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $targetId  (required)
     * @param  string $body  (required)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ringba\Model\UpdateTarget
     */
    public function updateTarget($authorization, $accountId, $targetId, $body)
    {
        list($response) = $this->updateTargetWithHttpInfo($authorization, $accountId, $targetId, $body);
        return $response;
    }

    /**
     * Operation updateTargetWithHttpInfo
     *
     * Update Target
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $targetId  (required)
     * @param  string $body  (required)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ringba\Model\UpdateTarget, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTargetWithHttpInfo($authorization, $accountId, $targetId, $body)
    {
        $request = $this->updateTargetRequest($authorization, $accountId, $targetId, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ringba\Model\UpdateTarget' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ringba\Model\UpdateTarget' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ringba\Model\UpdateTarget', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ringba\Model\UpdateTarget';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ringba\Model\UpdateTarget',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateTargetAsync
     *
     * Update Target
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $targetId  (required)
     * @param  string $body  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTargetAsync($authorization, $accountId, $targetId, $body)
    {
        return $this->updateTargetAsyncWithHttpInfo($authorization, $accountId, $targetId, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateTargetAsyncWithHttpInfo
     *
     * Update Target
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $targetId  (required)
     * @param  string $body  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTargetAsyncWithHttpInfo($authorization, $accountId, $targetId, $body)
    {
        $returnType = '\Ringba\Model\UpdateTarget';
        $request = $this->updateTargetRequest($authorization, $accountId, $targetId, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateTarget'
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $targetId  (required)
     * @param  string $body  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateTargetRequest($authorization, $accountId, $targetId, $body)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling updateTarget'
            );
        }
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling updateTarget'
            );
        }
        // verify the required parameter 'targetId' is set
        if ($targetId === null || (is_array($targetId) && count($targetId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $targetId when calling updateTarget'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateTarget'
            );
        }

        $resourcePath = '/{accountId}/targets/{targetId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($targetId !== null) {
            $resourcePath = str_replace(
                '{' . 'targetId' . '}',
                ObjectSerializer::toPathValue($targetId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json; charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json; charset=utf-8'],
                ['text/plain']
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHosts = ["http://example.com"];
        if ($this->hostIndex < 0 || $this->hostIndex >= sizeof($operationHosts)) {
            throw new \InvalidArgumentException("Invalid index {$this->hostIndex} when selecting the host. Must be less than ".sizeof($operationHosts));
        }
        $operationHost = $operationHosts[$this->hostIndex];

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
