<?php
/**
 * NumberPoolsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Ringba
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ringba API Documentation
 *
 * Ringbaâ€™s APIs allow you to interact, gather information, and make dynamic changes in real-time. All functions found within the Ringba portal are also available programmatically through our API.   If this is your first time using our API, please read the __Getting Started__ section below.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Ringba\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Ringba\ApiException;
use Ringba\Configuration;
use Ringba\HeaderSelector;
use Ringba\ObjectSerializer;

/**
 * NumberPoolsApi Class Doc Comment
 *
 * @category Class
 * @package  Ringba
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class NumberPoolsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addaSpecificNumbertoaNumberPool
     *
     * Add a Specific Number to a Number Pool
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     * @param  \Ringba\Model\AddaSpecificNumbertoaNumberPoolRequest $addaSpecificNumbertoaNumberPoolRequest  (required)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ringba\Model\AddaSpecificNumbertoaNumberPool
     */
    public function addaSpecificNumbertoaNumberPool($authorization, $accountId, $numberPoolId, $addaSpecificNumbertoaNumberPoolRequest)
    {
        list($response) = $this->addaSpecificNumbertoaNumberPoolWithHttpInfo($authorization, $accountId, $numberPoolId, $addaSpecificNumbertoaNumberPoolRequest);
        return $response;
    }

    /**
     * Operation addaSpecificNumbertoaNumberPoolWithHttpInfo
     *
     * Add a Specific Number to a Number Pool
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     * @param  \Ringba\Model\AddaSpecificNumbertoaNumberPoolRequest $addaSpecificNumbertoaNumberPoolRequest  (required)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ringba\Model\AddaSpecificNumbertoaNumberPool, HTTP status code, HTTP response headers (array of strings)
     */
    public function addaSpecificNumbertoaNumberPoolWithHttpInfo($authorization, $accountId, $numberPoolId, $addaSpecificNumbertoaNumberPoolRequest)
    {
        $request = $this->addaSpecificNumbertoaNumberPoolRequest($authorization, $accountId, $numberPoolId, $addaSpecificNumbertoaNumberPoolRequest);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ringba\Model\AddaSpecificNumbertoaNumberPool' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ringba\Model\AddaSpecificNumbertoaNumberPool' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ringba\Model\AddaSpecificNumbertoaNumberPool', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ringba\Model\AddaSpecificNumbertoaNumberPool';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ringba\Model\AddaSpecificNumbertoaNumberPool',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addaSpecificNumbertoaNumberPoolAsync
     *
     * Add a Specific Number to a Number Pool
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     * @param  \Ringba\Model\AddaSpecificNumbertoaNumberPoolRequest $addaSpecificNumbertoaNumberPoolRequest  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addaSpecificNumbertoaNumberPoolAsync($authorization, $accountId, $numberPoolId, $addaSpecificNumbertoaNumberPoolRequest)
    {
        return $this->addaSpecificNumbertoaNumberPoolAsyncWithHttpInfo($authorization, $accountId, $numberPoolId, $addaSpecificNumbertoaNumberPoolRequest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addaSpecificNumbertoaNumberPoolAsyncWithHttpInfo
     *
     * Add a Specific Number to a Number Pool
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     * @param  \Ringba\Model\AddaSpecificNumbertoaNumberPoolRequest $addaSpecificNumbertoaNumberPoolRequest  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addaSpecificNumbertoaNumberPoolAsyncWithHttpInfo($authorization, $accountId, $numberPoolId, $addaSpecificNumbertoaNumberPoolRequest)
    {
        $returnType = '\Ringba\Model\AddaSpecificNumbertoaNumberPool';
        $request = $this->addaSpecificNumbertoaNumberPoolRequest($authorization, $accountId, $numberPoolId, $addaSpecificNumbertoaNumberPoolRequest);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addaSpecificNumbertoaNumberPool'
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     * @param  \Ringba\Model\AddaSpecificNumbertoaNumberPoolRequest $addaSpecificNumbertoaNumberPoolRequest  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addaSpecificNumbertoaNumberPoolRequest($authorization, $accountId, $numberPoolId, $addaSpecificNumbertoaNumberPoolRequest)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling addaSpecificNumbertoaNumberPool'
            );
        }
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling addaSpecificNumbertoaNumberPool'
            );
        }
        // verify the required parameter 'numberPoolId' is set
        if ($numberPoolId === null || (is_array($numberPoolId) && count($numberPoolId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $numberPoolId when calling addaSpecificNumbertoaNumberPool'
            );
        }
        // verify the required parameter 'addaSpecificNumbertoaNumberPoolRequest' is set
        if ($addaSpecificNumbertoaNumberPoolRequest === null || (is_array($addaSpecificNumbertoaNumberPoolRequest) && count($addaSpecificNumbertoaNumberPoolRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $addaSpecificNumbertoaNumberPoolRequest when calling addaSpecificNumbertoaNumberPool'
            );
        }

        $resourcePath = '/{accountId}/numberpools/{numberPoolId}/Numbers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($numberPoolId !== null) {
            $resourcePath = str_replace(
                '{' . 'numberPoolId' . '}',
                ObjectSerializer::toPathValue($numberPoolId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json; charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json; charset=utf-8'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($addaSpecificNumbertoaNumberPoolRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($addaSpecificNumbertoaNumberPoolRequest));
            } else {
                $httpBody = $addaSpecificNumbertoaNumberPoolRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHosts = ["http://example.com"];
        if ($this->hostIndex < 0 || $this->hostIndex >= sizeof($operationHosts)) {
            throw new \InvalidArgumentException("Invalid index {$this->hostIndex} when selecting the host. Must be less than ".sizeof($operationHosts));
        }
        $operationHost = $operationHosts[$this->hostIndex];

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation allocateMoreNumberstoaNumberPool
     *
     * Allocate More Numbers to a Number Pool
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     * @param  \Ringba\Model\AllocateMoreNumberstoaNumberPoolRequest $allocateMoreNumberstoaNumberPoolRequest  (required)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ringba\Model\AllocateMoreNumbersFailed
     */
    public function allocateMoreNumberstoaNumberPool($authorization, $accountId, $numberPoolId, $allocateMoreNumberstoaNumberPoolRequest)
    {
        list($response) = $this->allocateMoreNumberstoaNumberPoolWithHttpInfo($authorization, $accountId, $numberPoolId, $allocateMoreNumberstoaNumberPoolRequest);
        return $response;
    }

    /**
     * Operation allocateMoreNumberstoaNumberPoolWithHttpInfo
     *
     * Allocate More Numbers to a Number Pool
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     * @param  \Ringba\Model\AllocateMoreNumberstoaNumberPoolRequest $allocateMoreNumberstoaNumberPoolRequest  (required)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ringba\Model\AllocateMoreNumbersFailed, HTTP status code, HTTP response headers (array of strings)
     */
    public function allocateMoreNumberstoaNumberPoolWithHttpInfo($authorization, $accountId, $numberPoolId, $allocateMoreNumberstoaNumberPoolRequest)
    {
        $request = $this->allocateMoreNumberstoaNumberPoolRequest($authorization, $accountId, $numberPoolId, $allocateMoreNumberstoaNumberPoolRequest);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ringba\Model\AllocateMoreNumbersFailed' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ringba\Model\AllocateMoreNumbersFailed' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ringba\Model\AllocateMoreNumbersFailed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ringba\Model\AllocateMoreNumbersFailed';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ringba\Model\AllocateMoreNumbersFailed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation allocateMoreNumberstoaNumberPoolAsync
     *
     * Allocate More Numbers to a Number Pool
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     * @param  \Ringba\Model\AllocateMoreNumberstoaNumberPoolRequest $allocateMoreNumberstoaNumberPoolRequest  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function allocateMoreNumberstoaNumberPoolAsync($authorization, $accountId, $numberPoolId, $allocateMoreNumberstoaNumberPoolRequest)
    {
        return $this->allocateMoreNumberstoaNumberPoolAsyncWithHttpInfo($authorization, $accountId, $numberPoolId, $allocateMoreNumberstoaNumberPoolRequest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation allocateMoreNumberstoaNumberPoolAsyncWithHttpInfo
     *
     * Allocate More Numbers to a Number Pool
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     * @param  \Ringba\Model\AllocateMoreNumberstoaNumberPoolRequest $allocateMoreNumberstoaNumberPoolRequest  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function allocateMoreNumberstoaNumberPoolAsyncWithHttpInfo($authorization, $accountId, $numberPoolId, $allocateMoreNumberstoaNumberPoolRequest)
    {
        $returnType = '\Ringba\Model\AllocateMoreNumbersFailed';
        $request = $this->allocateMoreNumberstoaNumberPoolRequest($authorization, $accountId, $numberPoolId, $allocateMoreNumberstoaNumberPoolRequest);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'allocateMoreNumberstoaNumberPool'
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     * @param  \Ringba\Model\AllocateMoreNumberstoaNumberPoolRequest $allocateMoreNumberstoaNumberPoolRequest  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function allocateMoreNumberstoaNumberPoolRequest($authorization, $accountId, $numberPoolId, $allocateMoreNumberstoaNumberPoolRequest)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling allocateMoreNumberstoaNumberPool'
            );
        }
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling allocateMoreNumberstoaNumberPool'
            );
        }
        // verify the required parameter 'numberPoolId' is set
        if ($numberPoolId === null || (is_array($numberPoolId) && count($numberPoolId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $numberPoolId when calling allocateMoreNumberstoaNumberPool'
            );
        }
        // verify the required parameter 'allocateMoreNumberstoaNumberPoolRequest' is set
        if ($allocateMoreNumberstoaNumberPoolRequest === null || (is_array($allocateMoreNumberstoaNumberPoolRequest) && count($allocateMoreNumberstoaNumberPoolRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $allocateMoreNumberstoaNumberPoolRequest when calling allocateMoreNumberstoaNumberPool'
            );
        }

        $resourcePath = '/{accountId}/numberpools/{numberPoolId}/AllocateMoreNumbers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($numberPoolId !== null) {
            $resourcePath = str_replace(
                '{' . 'numberPoolId' . '}',
                ObjectSerializer::toPathValue($numberPoolId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json; charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json; charset=utf-8'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($allocateMoreNumberstoaNumberPoolRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($allocateMoreNumberstoaNumberPoolRequest));
            } else {
                $httpBody = $allocateMoreNumberstoaNumberPoolRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHosts = ["http://example.com"];
        if ($this->hostIndex < 0 || $this->hostIndex >= sizeof($operationHosts)) {
            throw new \InvalidArgumentException("Invalid index {$this->hostIndex} when selecting the host. Must be less than ".sizeof($operationHosts));
        }
        $operationHost = $operationHosts[$this->hostIndex];

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation assignaPublishertoaNumberPool
     *
     * Assign a Publisher to a  Number Pool
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     * @param  \Ringba\Model\AssignaPublishertoaNumberPoolRequest $assignaPublishertoaNumberPoolRequest  (required)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ringba\Model\AssignaPublishertoaNumberPool
     */
    public function assignaPublishertoaNumberPool($authorization, $accountId, $numberPoolId, $assignaPublishertoaNumberPoolRequest)
    {
        list($response) = $this->assignaPublishertoaNumberPoolWithHttpInfo($authorization, $accountId, $numberPoolId, $assignaPublishertoaNumberPoolRequest);
        return $response;
    }

    /**
     * Operation assignaPublishertoaNumberPoolWithHttpInfo
     *
     * Assign a Publisher to a  Number Pool
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     * @param  \Ringba\Model\AssignaPublishertoaNumberPoolRequest $assignaPublishertoaNumberPoolRequest  (required)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ringba\Model\AssignaPublishertoaNumberPool, HTTP status code, HTTP response headers (array of strings)
     */
    public function assignaPublishertoaNumberPoolWithHttpInfo($authorization, $accountId, $numberPoolId, $assignaPublishertoaNumberPoolRequest)
    {
        $request = $this->assignaPublishertoaNumberPoolRequest($authorization, $accountId, $numberPoolId, $assignaPublishertoaNumberPoolRequest);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ringba\Model\AssignaPublishertoaNumberPool' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ringba\Model\AssignaPublishertoaNumberPool' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ringba\Model\AssignaPublishertoaNumberPool', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ringba\Model\AssignaPublishertoaNumberPool';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ringba\Model\AssignaPublishertoaNumberPool',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation assignaPublishertoaNumberPoolAsync
     *
     * Assign a Publisher to a  Number Pool
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     * @param  \Ringba\Model\AssignaPublishertoaNumberPoolRequest $assignaPublishertoaNumberPoolRequest  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assignaPublishertoaNumberPoolAsync($authorization, $accountId, $numberPoolId, $assignaPublishertoaNumberPoolRequest)
    {
        return $this->assignaPublishertoaNumberPoolAsyncWithHttpInfo($authorization, $accountId, $numberPoolId, $assignaPublishertoaNumberPoolRequest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation assignaPublishertoaNumberPoolAsyncWithHttpInfo
     *
     * Assign a Publisher to a  Number Pool
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     * @param  \Ringba\Model\AssignaPublishertoaNumberPoolRequest $assignaPublishertoaNumberPoolRequest  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assignaPublishertoaNumberPoolAsyncWithHttpInfo($authorization, $accountId, $numberPoolId, $assignaPublishertoaNumberPoolRequest)
    {
        $returnType = '\Ringba\Model\AssignaPublishertoaNumberPool';
        $request = $this->assignaPublishertoaNumberPoolRequest($authorization, $accountId, $numberPoolId, $assignaPublishertoaNumberPoolRequest);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'assignaPublishertoaNumberPool'
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     * @param  \Ringba\Model\AssignaPublishertoaNumberPoolRequest $assignaPublishertoaNumberPoolRequest  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function assignaPublishertoaNumberPoolRequest($authorization, $accountId, $numberPoolId, $assignaPublishertoaNumberPoolRequest)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling assignaPublishertoaNumberPool'
            );
        }
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling assignaPublishertoaNumberPool'
            );
        }
        // verify the required parameter 'numberPoolId' is set
        if ($numberPoolId === null || (is_array($numberPoolId) && count($numberPoolId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $numberPoolId when calling assignaPublishertoaNumberPool'
            );
        }
        // verify the required parameter 'assignaPublishertoaNumberPoolRequest' is set
        if ($assignaPublishertoaNumberPoolRequest === null || (is_array($assignaPublishertoaNumberPoolRequest) && count($assignaPublishertoaNumberPoolRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $assignaPublishertoaNumberPoolRequest when calling assignaPublishertoaNumberPool'
            );
        }

        $resourcePath = '/{accountId}/numberpools/{numberPoolId}/Affiliate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($numberPoolId !== null) {
            $resourcePath = str_replace(
                '{' . 'numberPoolId' . '}',
                ObjectSerializer::toPathValue($numberPoolId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json; charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json; charset=utf-8'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($assignaPublishertoaNumberPoolRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($assignaPublishertoaNumberPoolRequest));
            } else {
                $httpBody = $assignaPublishertoaNumberPoolRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHosts = ["http://example.com"];
        if ($this->hostIndex < 0 || $this->hostIndex >= sizeof($operationHosts)) {
            throw new \InvalidArgumentException("Invalid index {$this->hostIndex} when selecting the host. Must be less than ".sizeof($operationHosts));
        }
        $operationHost = $operationHosts[$this->hostIndex];

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createNewNumberPool
     *
     * Create New Number Pool
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  \Ringba\Model\CreateNewNumberPoolRequest $createNewNumberPoolRequest  (required)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ringba\Model\CreateNewNumberPool
     */
    public function createNewNumberPool($authorization, $accountId, $createNewNumberPoolRequest)
    {
        list($response) = $this->createNewNumberPoolWithHttpInfo($authorization, $accountId, $createNewNumberPoolRequest);
        return $response;
    }

    /**
     * Operation createNewNumberPoolWithHttpInfo
     *
     * Create New Number Pool
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  \Ringba\Model\CreateNewNumberPoolRequest $createNewNumberPoolRequest  (required)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ringba\Model\CreateNewNumberPool, HTTP status code, HTTP response headers (array of strings)
     */
    public function createNewNumberPoolWithHttpInfo($authorization, $accountId, $createNewNumberPoolRequest)
    {
        $request = $this->createNewNumberPoolRequest($authorization, $accountId, $createNewNumberPoolRequest);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ringba\Model\CreateNewNumberPool' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ringba\Model\CreateNewNumberPool' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ringba\Model\CreateNewNumberPool', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ringba\Model\CreateNewNumberPool';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ringba\Model\CreateNewNumberPool',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createNewNumberPoolAsync
     *
     * Create New Number Pool
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  \Ringba\Model\CreateNewNumberPoolRequest $createNewNumberPoolRequest  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNewNumberPoolAsync($authorization, $accountId, $createNewNumberPoolRequest)
    {
        return $this->createNewNumberPoolAsyncWithHttpInfo($authorization, $accountId, $createNewNumberPoolRequest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createNewNumberPoolAsyncWithHttpInfo
     *
     * Create New Number Pool
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  \Ringba\Model\CreateNewNumberPoolRequest $createNewNumberPoolRequest  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNewNumberPoolAsyncWithHttpInfo($authorization, $accountId, $createNewNumberPoolRequest)
    {
        $returnType = '\Ringba\Model\CreateNewNumberPool';
        $request = $this->createNewNumberPoolRequest($authorization, $accountId, $createNewNumberPoolRequest);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createNewNumberPool'
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  \Ringba\Model\CreateNewNumberPoolRequest $createNewNumberPoolRequest  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createNewNumberPoolRequest($authorization, $accountId, $createNewNumberPoolRequest)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling createNewNumberPool'
            );
        }
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling createNewNumberPool'
            );
        }
        // verify the required parameter 'createNewNumberPoolRequest' is set
        if ($createNewNumberPoolRequest === null || (is_array($createNewNumberPoolRequest) && count($createNewNumberPoolRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $createNewNumberPoolRequest when calling createNewNumberPool'
            );
        }

        $resourcePath = '/{accountId}/numberpools';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json; charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json; charset=utf-8'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($createNewNumberPoolRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($createNewNumberPoolRequest));
            } else {
                $httpBody = $createNewNumberPoolRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHosts = ["http://example.com"];
        if ($this->hostIndex < 0 || $this->hostIndex >= sizeof($operationHosts)) {
            throw new \InvalidArgumentException("Invalid index {$this->hostIndex} when selecting the host. Must be less than ".sizeof($operationHosts));
        }
        $operationHost = $operationHosts[$this->hostIndex];

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation decreaseSizeofaNumberPool
     *
     * Decrease Size of a Number Pool
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     * @param  \Ringba\Model\DecreaseSizeofaNumberPoolRequest $decreaseSizeofaNumberPoolRequest  (required)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ringba\Model\DecreaseSizeofaNumberPool
     */
    public function decreaseSizeofaNumberPool($authorization, $accountId, $numberPoolId, $decreaseSizeofaNumberPoolRequest)
    {
        list($response) = $this->decreaseSizeofaNumberPoolWithHttpInfo($authorization, $accountId, $numberPoolId, $decreaseSizeofaNumberPoolRequest);
        return $response;
    }

    /**
     * Operation decreaseSizeofaNumberPoolWithHttpInfo
     *
     * Decrease Size of a Number Pool
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     * @param  \Ringba\Model\DecreaseSizeofaNumberPoolRequest $decreaseSizeofaNumberPoolRequest  (required)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ringba\Model\DecreaseSizeofaNumberPool, HTTP status code, HTTP response headers (array of strings)
     */
    public function decreaseSizeofaNumberPoolWithHttpInfo($authorization, $accountId, $numberPoolId, $decreaseSizeofaNumberPoolRequest)
    {
        $request = $this->decreaseSizeofaNumberPoolRequest($authorization, $accountId, $numberPoolId, $decreaseSizeofaNumberPoolRequest);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ringba\Model\DecreaseSizeofaNumberPool' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ringba\Model\DecreaseSizeofaNumberPool' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ringba\Model\DecreaseSizeofaNumberPool', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ringba\Model\DecreaseSizeofaNumberPool';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ringba\Model\DecreaseSizeofaNumberPool',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation decreaseSizeofaNumberPoolAsync
     *
     * Decrease Size of a Number Pool
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     * @param  \Ringba\Model\DecreaseSizeofaNumberPoolRequest $decreaseSizeofaNumberPoolRequest  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function decreaseSizeofaNumberPoolAsync($authorization, $accountId, $numberPoolId, $decreaseSizeofaNumberPoolRequest)
    {
        return $this->decreaseSizeofaNumberPoolAsyncWithHttpInfo($authorization, $accountId, $numberPoolId, $decreaseSizeofaNumberPoolRequest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation decreaseSizeofaNumberPoolAsyncWithHttpInfo
     *
     * Decrease Size of a Number Pool
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     * @param  \Ringba\Model\DecreaseSizeofaNumberPoolRequest $decreaseSizeofaNumberPoolRequest  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function decreaseSizeofaNumberPoolAsyncWithHttpInfo($authorization, $accountId, $numberPoolId, $decreaseSizeofaNumberPoolRequest)
    {
        $returnType = '\Ringba\Model\DecreaseSizeofaNumberPool';
        $request = $this->decreaseSizeofaNumberPoolRequest($authorization, $accountId, $numberPoolId, $decreaseSizeofaNumberPoolRequest);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'decreaseSizeofaNumberPool'
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     * @param  \Ringba\Model\DecreaseSizeofaNumberPoolRequest $decreaseSizeofaNumberPoolRequest  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function decreaseSizeofaNumberPoolRequest($authorization, $accountId, $numberPoolId, $decreaseSizeofaNumberPoolRequest)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling decreaseSizeofaNumberPool'
            );
        }
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling decreaseSizeofaNumberPool'
            );
        }
        // verify the required parameter 'numberPoolId' is set
        if ($numberPoolId === null || (is_array($numberPoolId) && count($numberPoolId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $numberPoolId when calling decreaseSizeofaNumberPool'
            );
        }
        // verify the required parameter 'decreaseSizeofaNumberPoolRequest' is set
        if ($decreaseSizeofaNumberPoolRequest === null || (is_array($decreaseSizeofaNumberPoolRequest) && count($decreaseSizeofaNumberPoolRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $decreaseSizeofaNumberPoolRequest when calling decreaseSizeofaNumberPool'
            );
        }

        $resourcePath = '/{accountId}/numberpools/{numberPoolId}/Shrink';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($numberPoolId !== null) {
            $resourcePath = str_replace(
                '{' . 'numberPoolId' . '}',
                ObjectSerializer::toPathValue($numberPoolId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json; charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json; charset=utf-8'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($decreaseSizeofaNumberPoolRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($decreaseSizeofaNumberPoolRequest));
            } else {
                $httpBody = $decreaseSizeofaNumberPoolRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHosts = ["http://example.com"];
        if ($this->hostIndex < 0 || $this->hostIndex >= sizeof($operationHosts)) {
            throw new \InvalidArgumentException("Invalid index {$this->hostIndex} when selecting the host. Must be less than ".sizeof($operationHosts));
        }
        $operationHost = $operationHosts[$this->hostIndex];

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteaNumberPool
     *
     * Delete a Number Pool
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  bool $force Forces request even if the number pool is being used elsewhere in your account. (required)
     * @param  bool $keepNumbers Keep numbers in your account after the number pool has been removed (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ringba\Model\DeleteaNumberPool|\Ringba\Model\DeleteaNumberPool2
     */
    public function deleteaNumberPool($force, $keepNumbers, $authorization, $accountId, $numberPoolId)
    {
        list($response) = $this->deleteaNumberPoolWithHttpInfo($force, $keepNumbers, $authorization, $accountId, $numberPoolId);
        return $response;
    }

    /**
     * Operation deleteaNumberPoolWithHttpInfo
     *
     * Delete a Number Pool
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  bool $force Forces request even if the number pool is being used elsewhere in your account. (required)
     * @param  bool $keepNumbers Keep numbers in your account after the number pool has been removed (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ringba\Model\DeleteaNumberPool|\Ringba\Model\DeleteaNumberPool2, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteaNumberPoolWithHttpInfo($force, $keepNumbers, $authorization, $accountId, $numberPoolId)
    {
        $request = $this->deleteaNumberPoolRequest($force, $keepNumbers, $authorization, $accountId, $numberPoolId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ringba\Model\DeleteaNumberPool' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ringba\Model\DeleteaNumberPool' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ringba\Model\DeleteaNumberPool', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Ringba\Model\DeleteaNumberPool2' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ringba\Model\DeleteaNumberPool2' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ringba\Model\DeleteaNumberPool2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ringba\Model\DeleteaNumberPool';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ringba\Model\DeleteaNumberPool',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ringba\Model\DeleteaNumberPool2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteaNumberPoolAsync
     *
     * Delete a Number Pool
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  bool $force Forces request even if the number pool is being used elsewhere in your account. (required)
     * @param  bool $keepNumbers Keep numbers in your account after the number pool has been removed (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteaNumberPoolAsync($force, $keepNumbers, $authorization, $accountId, $numberPoolId)
    {
        return $this->deleteaNumberPoolAsyncWithHttpInfo($force, $keepNumbers, $authorization, $accountId, $numberPoolId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteaNumberPoolAsyncWithHttpInfo
     *
     * Delete a Number Pool
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  bool $force Forces request even if the number pool is being used elsewhere in your account. (required)
     * @param  bool $keepNumbers Keep numbers in your account after the number pool has been removed (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteaNumberPoolAsyncWithHttpInfo($force, $keepNumbers, $authorization, $accountId, $numberPoolId)
    {
        $returnType = '\Ringba\Model\DeleteaNumberPool';
        $request = $this->deleteaNumberPoolRequest($force, $keepNumbers, $authorization, $accountId, $numberPoolId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteaNumberPool'
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  bool $force Forces request even if the number pool is being used elsewhere in your account. (required)
     * @param  bool $keepNumbers Keep numbers in your account after the number pool has been removed (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteaNumberPoolRequest($force, $keepNumbers, $authorization, $accountId, $numberPoolId)
    {
        // verify the required parameter 'force' is set
        if ($force === null || (is_array($force) && count($force) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $force when calling deleteaNumberPool'
            );
        }
        // verify the required parameter 'keepNumbers' is set
        if ($keepNumbers === null || (is_array($keepNumbers) && count($keepNumbers) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $keepNumbers when calling deleteaNumberPool'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling deleteaNumberPool'
            );
        }
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling deleteaNumberPool'
            );
        }
        // verify the required parameter 'numberPoolId' is set
        if ($numberPoolId === null || (is_array($numberPoolId) && count($numberPoolId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $numberPoolId when calling deleteaNumberPool'
            );
        }

        $resourcePath = '/{accountId}/numberpools/{numberPoolId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $force,
            'force', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $keepNumbers,
            'keepNumbers', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($numberPoolId !== null) {
            $resourcePath = str_replace(
                '{' . 'numberPoolId' . '}',
                ObjectSerializer::toPathValue($numberPoolId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json; charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json; charset=utf-8'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHosts = ["http://example.com"];
        if ($this->hostIndex < 0 || $this->hostIndex >= sizeof($operationHosts)) {
            throw new \InvalidArgumentException("Invalid index {$this->hostIndex} when selecting the host. Must be less than ".sizeof($operationHosts));
        }
        $operationHost = $operationHosts[$this->hostIndex];

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteaSpecificNumberfromaNumberPool
     *
     * Delete a Specific Number from a Number Pool
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     * @param  string $numberId  (required)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ringba\Model\DeleteaSpecificNumberfromaNumberPool
     */
    public function deleteaSpecificNumberfromaNumberPool($authorization, $accountId, $numberPoolId, $numberId)
    {
        list($response) = $this->deleteaSpecificNumberfromaNumberPoolWithHttpInfo($authorization, $accountId, $numberPoolId, $numberId);
        return $response;
    }

    /**
     * Operation deleteaSpecificNumberfromaNumberPoolWithHttpInfo
     *
     * Delete a Specific Number from a Number Pool
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     * @param  string $numberId  (required)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ringba\Model\DeleteaSpecificNumberfromaNumberPool, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteaSpecificNumberfromaNumberPoolWithHttpInfo($authorization, $accountId, $numberPoolId, $numberId)
    {
        $request = $this->deleteaSpecificNumberfromaNumberPoolRequest($authorization, $accountId, $numberPoolId, $numberId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ringba\Model\DeleteaSpecificNumberfromaNumberPool' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ringba\Model\DeleteaSpecificNumberfromaNumberPool' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ringba\Model\DeleteaSpecificNumberfromaNumberPool', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ringba\Model\DeleteaSpecificNumberfromaNumberPool';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ringba\Model\DeleteaSpecificNumberfromaNumberPool',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteaSpecificNumberfromaNumberPoolAsync
     *
     * Delete a Specific Number from a Number Pool
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     * @param  string $numberId  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteaSpecificNumberfromaNumberPoolAsync($authorization, $accountId, $numberPoolId, $numberId)
    {
        return $this->deleteaSpecificNumberfromaNumberPoolAsyncWithHttpInfo($authorization, $accountId, $numberPoolId, $numberId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteaSpecificNumberfromaNumberPoolAsyncWithHttpInfo
     *
     * Delete a Specific Number from a Number Pool
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     * @param  string $numberId  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteaSpecificNumberfromaNumberPoolAsyncWithHttpInfo($authorization, $accountId, $numberPoolId, $numberId)
    {
        $returnType = '\Ringba\Model\DeleteaSpecificNumberfromaNumberPool';
        $request = $this->deleteaSpecificNumberfromaNumberPoolRequest($authorization, $accountId, $numberPoolId, $numberId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteaSpecificNumberfromaNumberPool'
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     * @param  string $numberId  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteaSpecificNumberfromaNumberPoolRequest($authorization, $accountId, $numberPoolId, $numberId)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling deleteaSpecificNumberfromaNumberPool'
            );
        }
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling deleteaSpecificNumberfromaNumberPool'
            );
        }
        // verify the required parameter 'numberPoolId' is set
        if ($numberPoolId === null || (is_array($numberPoolId) && count($numberPoolId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $numberPoolId when calling deleteaSpecificNumberfromaNumberPool'
            );
        }
        // verify the required parameter 'numberId' is set
        if ($numberId === null || (is_array($numberId) && count($numberId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $numberId when calling deleteaSpecificNumberfromaNumberPool'
            );
        }

        $resourcePath = '/{accountId}/numberpools/{numberPoolId}/Numbers/{numberId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($numberPoolId !== null) {
            $resourcePath = str_replace(
                '{' . 'numberPoolId' . '}',
                ObjectSerializer::toPathValue($numberPoolId),
                $resourcePath
            );
        }
        // path params
        if ($numberId !== null) {
            $resourcePath = str_replace(
                '{' . 'numberId' . '}',
                ObjectSerializer::toPathValue($numberId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json; charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json; charset=utf-8'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHosts = ["http://example.com"];
        if ($this->hostIndex < 0 || $this->hostIndex >= sizeof($operationHosts)) {
            throw new \InvalidArgumentException("Invalid index {$this->hostIndex} when selecting the host. Must be less than ".sizeof($operationHosts));
        }
        $operationHost = $operationHosts[$this->hostIndex];

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteanAllocationJob
     *
     * Delete an Allocation Job
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     * @param  string $allocationJobId  (required)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ringba\Model\DeleteanAllocationJob
     */
    public function deleteanAllocationJob($authorization, $accountId, $numberPoolId, $allocationJobId)
    {
        list($response) = $this->deleteanAllocationJobWithHttpInfo($authorization, $accountId, $numberPoolId, $allocationJobId);
        return $response;
    }

    /**
     * Operation deleteanAllocationJobWithHttpInfo
     *
     * Delete an Allocation Job
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     * @param  string $allocationJobId  (required)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ringba\Model\DeleteanAllocationJob, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteanAllocationJobWithHttpInfo($authorization, $accountId, $numberPoolId, $allocationJobId)
    {
        $request = $this->deleteanAllocationJobRequest($authorization, $accountId, $numberPoolId, $allocationJobId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ringba\Model\DeleteanAllocationJob' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ringba\Model\DeleteanAllocationJob' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ringba\Model\DeleteanAllocationJob', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ringba\Model\DeleteanAllocationJob';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ringba\Model\DeleteanAllocationJob',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteanAllocationJobAsync
     *
     * Delete an Allocation Job
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     * @param  string $allocationJobId  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteanAllocationJobAsync($authorization, $accountId, $numberPoolId, $allocationJobId)
    {
        return $this->deleteanAllocationJobAsyncWithHttpInfo($authorization, $accountId, $numberPoolId, $allocationJobId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteanAllocationJobAsyncWithHttpInfo
     *
     * Delete an Allocation Job
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     * @param  string $allocationJobId  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteanAllocationJobAsyncWithHttpInfo($authorization, $accountId, $numberPoolId, $allocationJobId)
    {
        $returnType = '\Ringba\Model\DeleteanAllocationJob';
        $request = $this->deleteanAllocationJobRequest($authorization, $accountId, $numberPoolId, $allocationJobId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteanAllocationJob'
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     * @param  string $allocationJobId  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteanAllocationJobRequest($authorization, $accountId, $numberPoolId, $allocationJobId)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling deleteanAllocationJob'
            );
        }
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling deleteanAllocationJob'
            );
        }
        // verify the required parameter 'numberPoolId' is set
        if ($numberPoolId === null || (is_array($numberPoolId) && count($numberPoolId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $numberPoolId when calling deleteanAllocationJob'
            );
        }
        // verify the required parameter 'allocationJobId' is set
        if ($allocationJobId === null || (is_array($allocationJobId) && count($allocationJobId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $allocationJobId when calling deleteanAllocationJob'
            );
        }

        $resourcePath = '/{accountId}/numberpools/{numberPoolId}/AllocationJobs/{allocationJobId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($numberPoolId !== null) {
            $resourcePath = str_replace(
                '{' . 'numberPoolId' . '}',
                ObjectSerializer::toPathValue($numberPoolId),
                $resourcePath
            );
        }
        // path params
        if ($allocationJobId !== null) {
            $resourcePath = str_replace(
                '{' . 'allocationJobId' . '}',
                ObjectSerializer::toPathValue($allocationJobId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json; charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json; charset=utf-8'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHosts = ["http://example.com"];
        if ($this->hostIndex < 0 || $this->hostIndex >= sizeof($operationHosts)) {
            throw new \InvalidArgumentException("Invalid index {$this->hostIndex} when selecting the host. Must be less than ".sizeof($operationHosts));
        }
        $operationHost = $operationHosts[$this->hostIndex];

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation editInformationforaNumberPool
     *
     * Edit Information for a Number Pool
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     * @param  \Ringba\Model\EditInformationforaNumberPoolRequest $editInformationforaNumberPoolRequest  (required)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ringba\Model\EditInformationforaNumberPool
     */
    public function editInformationforaNumberPool($authorization, $accountId, $numberPoolId, $editInformationforaNumberPoolRequest)
    {
        list($response) = $this->editInformationforaNumberPoolWithHttpInfo($authorization, $accountId, $numberPoolId, $editInformationforaNumberPoolRequest);
        return $response;
    }

    /**
     * Operation editInformationforaNumberPoolWithHttpInfo
     *
     * Edit Information for a Number Pool
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     * @param  \Ringba\Model\EditInformationforaNumberPoolRequest $editInformationforaNumberPoolRequest  (required)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ringba\Model\EditInformationforaNumberPool, HTTP status code, HTTP response headers (array of strings)
     */
    public function editInformationforaNumberPoolWithHttpInfo($authorization, $accountId, $numberPoolId, $editInformationforaNumberPoolRequest)
    {
        $request = $this->editInformationforaNumberPoolRequest($authorization, $accountId, $numberPoolId, $editInformationforaNumberPoolRequest);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ringba\Model\EditInformationforaNumberPool' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ringba\Model\EditInformationforaNumberPool' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ringba\Model\EditInformationforaNumberPool', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ringba\Model\EditInformationforaNumberPool';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ringba\Model\EditInformationforaNumberPool',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation editInformationforaNumberPoolAsync
     *
     * Edit Information for a Number Pool
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     * @param  \Ringba\Model\EditInformationforaNumberPoolRequest $editInformationforaNumberPoolRequest  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function editInformationforaNumberPoolAsync($authorization, $accountId, $numberPoolId, $editInformationforaNumberPoolRequest)
    {
        return $this->editInformationforaNumberPoolAsyncWithHttpInfo($authorization, $accountId, $numberPoolId, $editInformationforaNumberPoolRequest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation editInformationforaNumberPoolAsyncWithHttpInfo
     *
     * Edit Information for a Number Pool
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     * @param  \Ringba\Model\EditInformationforaNumberPoolRequest $editInformationforaNumberPoolRequest  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function editInformationforaNumberPoolAsyncWithHttpInfo($authorization, $accountId, $numberPoolId, $editInformationforaNumberPoolRequest)
    {
        $returnType = '\Ringba\Model\EditInformationforaNumberPool';
        $request = $this->editInformationforaNumberPoolRequest($authorization, $accountId, $numberPoolId, $editInformationforaNumberPoolRequest);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'editInformationforaNumberPool'
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     * @param  \Ringba\Model\EditInformationforaNumberPoolRequest $editInformationforaNumberPoolRequest  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function editInformationforaNumberPoolRequest($authorization, $accountId, $numberPoolId, $editInformationforaNumberPoolRequest)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling editInformationforaNumberPool'
            );
        }
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling editInformationforaNumberPool'
            );
        }
        // verify the required parameter 'numberPoolId' is set
        if ($numberPoolId === null || (is_array($numberPoolId) && count($numberPoolId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $numberPoolId when calling editInformationforaNumberPool'
            );
        }
        // verify the required parameter 'editInformationforaNumberPoolRequest' is set
        if ($editInformationforaNumberPoolRequest === null || (is_array($editInformationforaNumberPoolRequest) && count($editInformationforaNumberPoolRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $editInformationforaNumberPoolRequest when calling editInformationforaNumberPool'
            );
        }

        $resourcePath = '/{accountId}/numberpools/{numberPoolId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($numberPoolId !== null) {
            $resourcePath = str_replace(
                '{' . 'numberPoolId' . '}',
                ObjectSerializer::toPathValue($numberPoolId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json; charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json; charset=utf-8'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($editInformationforaNumberPoolRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($editInformationforaNumberPoolRequest));
            } else {
                $httpBody = $editInformationforaNumberPoolRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHosts = ["http://example.com"];
        if ($this->hostIndex < 0 || $this->hostIndex >= sizeof($operationHosts)) {
            throw new \InvalidArgumentException("Invalid index {$this->hostIndex} when selecting the host. Must be less than ".sizeof($operationHosts));
        }
        $operationHost = $operationHosts[$this->hostIndex];

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAllocationJobs
     *
     * Get Allocation Jobs
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ringba\Model\GetAllocationJobs
     */
    public function getAllocationJobs($authorization, $accountId, $numberPoolId)
    {
        list($response) = $this->getAllocationJobsWithHttpInfo($authorization, $accountId, $numberPoolId);
        return $response;
    }

    /**
     * Operation getAllocationJobsWithHttpInfo
     *
     * Get Allocation Jobs
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ringba\Model\GetAllocationJobs, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllocationJobsWithHttpInfo($authorization, $accountId, $numberPoolId)
    {
        $request = $this->getAllocationJobsRequest($authorization, $accountId, $numberPoolId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ringba\Model\GetAllocationJobs' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ringba\Model\GetAllocationJobs' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ringba\Model\GetAllocationJobs', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ringba\Model\GetAllocationJobs';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ringba\Model\GetAllocationJobs',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAllocationJobsAsync
     *
     * Get Allocation Jobs
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllocationJobsAsync($authorization, $accountId, $numberPoolId)
    {
        return $this->getAllocationJobsAsyncWithHttpInfo($authorization, $accountId, $numberPoolId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllocationJobsAsyncWithHttpInfo
     *
     * Get Allocation Jobs
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllocationJobsAsyncWithHttpInfo($authorization, $accountId, $numberPoolId)
    {
        $returnType = '\Ringba\Model\GetAllocationJobs';
        $request = $this->getAllocationJobsRequest($authorization, $accountId, $numberPoolId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllocationJobs'
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAllocationJobsRequest($authorization, $accountId, $numberPoolId)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling getAllocationJobs'
            );
        }
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling getAllocationJobs'
            );
        }
        // verify the required parameter 'numberPoolId' is set
        if ($numberPoolId === null || (is_array($numberPoolId) && count($numberPoolId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $numberPoolId when calling getAllocationJobs'
            );
        }

        $resourcePath = '/{accountId}/numberpools/{numberPoolId}/AllocationJobs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($numberPoolId !== null) {
            $resourcePath = str_replace(
                '{' . 'numberPoolId' . '}',
                ObjectSerializer::toPathValue($numberPoolId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json; charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json; charset=utf-8'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHosts = ["http://example.com"];
        if ($this->hostIndex < 0 || $this->hostIndex >= sizeof($operationHosts)) {
            throw new \InvalidArgumentException("Invalid index {$this->hostIndex} when selecting the host. Must be less than ".sizeof($operationHosts));
        }
        $operationHost = $operationHosts[$this->hostIndex];

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCountofAvailableNumbersinaNumberPool
     *
     * Get Count of Available Numbers in a Number Pool
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ringba\Model\GetCountofAvailableNumbersinaNumberPool
     */
    public function getCountofAvailableNumbersinaNumberPool($authorization, $accountId, $numberPoolId)
    {
        list($response) = $this->getCountofAvailableNumbersinaNumberPoolWithHttpInfo($authorization, $accountId, $numberPoolId);
        return $response;
    }

    /**
     * Operation getCountofAvailableNumbersinaNumberPoolWithHttpInfo
     *
     * Get Count of Available Numbers in a Number Pool
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ringba\Model\GetCountofAvailableNumbersinaNumberPool, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCountofAvailableNumbersinaNumberPoolWithHttpInfo($authorization, $accountId, $numberPoolId)
    {
        $request = $this->getCountofAvailableNumbersinaNumberPoolRequest($authorization, $accountId, $numberPoolId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ringba\Model\GetCountofAvailableNumbersinaNumberPool' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ringba\Model\GetCountofAvailableNumbersinaNumberPool' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ringba\Model\GetCountofAvailableNumbersinaNumberPool', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ringba\Model\GetCountofAvailableNumbersinaNumberPool';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ringba\Model\GetCountofAvailableNumbersinaNumberPool',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCountofAvailableNumbersinaNumberPoolAsync
     *
     * Get Count of Available Numbers in a Number Pool
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCountofAvailableNumbersinaNumberPoolAsync($authorization, $accountId, $numberPoolId)
    {
        return $this->getCountofAvailableNumbersinaNumberPoolAsyncWithHttpInfo($authorization, $accountId, $numberPoolId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCountofAvailableNumbersinaNumberPoolAsyncWithHttpInfo
     *
     * Get Count of Available Numbers in a Number Pool
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCountofAvailableNumbersinaNumberPoolAsyncWithHttpInfo($authorization, $accountId, $numberPoolId)
    {
        $returnType = '\Ringba\Model\GetCountofAvailableNumbersinaNumberPool';
        $request = $this->getCountofAvailableNumbersinaNumberPoolRequest($authorization, $accountId, $numberPoolId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCountofAvailableNumbersinaNumberPool'
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCountofAvailableNumbersinaNumberPoolRequest($authorization, $accountId, $numberPoolId)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling getCountofAvailableNumbersinaNumberPool'
            );
        }
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling getCountofAvailableNumbersinaNumberPool'
            );
        }
        // verify the required parameter 'numberPoolId' is set
        if ($numberPoolId === null || (is_array($numberPoolId) && count($numberPoolId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $numberPoolId when calling getCountofAvailableNumbersinaNumberPool'
            );
        }

        $resourcePath = '/{accountId}/numberpools/{numberPoolId}/FreeNumberCount';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($numberPoolId !== null) {
            $resourcePath = str_replace(
                '{' . 'numberPoolId' . '}',
                ObjectSerializer::toPathValue($numberPoolId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json; charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json; charset=utf-8'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHosts = ["http://example.com"];
        if ($this->hostIndex < 0 || $this->hostIndex >= sizeof($operationHosts)) {
            throw new \InvalidArgumentException("Invalid index {$this->hostIndex} when selecting the host. Must be less than ".sizeof($operationHosts));
        }
        $operationHost = $operationHosts[$this->hostIndex];

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDetailsAboutaSingleNumberPool
     *
     * Get Details About a Single Number Pool
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ringba\Model\GetDetailsAboutaSingleNumberPool
     */
    public function getDetailsAboutaSingleNumberPool($authorization, $accountId, $numberPoolId)
    {
        list($response) = $this->getDetailsAboutaSingleNumberPoolWithHttpInfo($authorization, $accountId, $numberPoolId);
        return $response;
    }

    /**
     * Operation getDetailsAboutaSingleNumberPoolWithHttpInfo
     *
     * Get Details About a Single Number Pool
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ringba\Model\GetDetailsAboutaSingleNumberPool, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDetailsAboutaSingleNumberPoolWithHttpInfo($authorization, $accountId, $numberPoolId)
    {
        $request = $this->getDetailsAboutaSingleNumberPoolRequest($authorization, $accountId, $numberPoolId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ringba\Model\GetDetailsAboutaSingleNumberPool' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ringba\Model\GetDetailsAboutaSingleNumberPool' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ringba\Model\GetDetailsAboutaSingleNumberPool', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ringba\Model\GetDetailsAboutaSingleNumberPool';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ringba\Model\GetDetailsAboutaSingleNumberPool',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDetailsAboutaSingleNumberPoolAsync
     *
     * Get Details About a Single Number Pool
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDetailsAboutaSingleNumberPoolAsync($authorization, $accountId, $numberPoolId)
    {
        return $this->getDetailsAboutaSingleNumberPoolAsyncWithHttpInfo($authorization, $accountId, $numberPoolId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDetailsAboutaSingleNumberPoolAsyncWithHttpInfo
     *
     * Get Details About a Single Number Pool
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDetailsAboutaSingleNumberPoolAsyncWithHttpInfo($authorization, $accountId, $numberPoolId)
    {
        $returnType = '\Ringba\Model\GetDetailsAboutaSingleNumberPool';
        $request = $this->getDetailsAboutaSingleNumberPoolRequest($authorization, $accountId, $numberPoolId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDetailsAboutaSingleNumberPool'
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDetailsAboutaSingleNumberPoolRequest($authorization, $accountId, $numberPoolId)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling getDetailsAboutaSingleNumberPool'
            );
        }
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling getDetailsAboutaSingleNumberPool'
            );
        }
        // verify the required parameter 'numberPoolId' is set
        if ($numberPoolId === null || (is_array($numberPoolId) && count($numberPoolId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $numberPoolId when calling getDetailsAboutaSingleNumberPool'
            );
        }

        $resourcePath = '/{accountId}/numberpools/{numberPoolId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($numberPoolId !== null) {
            $resourcePath = str_replace(
                '{' . 'numberPoolId' . '}',
                ObjectSerializer::toPathValue($numberPoolId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json; charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json; charset=utf-8'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHosts = ["http://example.com"];
        if ($this->hostIndex < 0 || $this->hostIndex >= sizeof($operationHosts)) {
            throw new \InvalidArgumentException("Invalid index {$this->hostIndex} when selecting the host. Must be less than ".sizeof($operationHosts));
        }
        $operationHost = $operationHosts[$this->hostIndex];

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDetailsAboutanAllocationJob
     *
     * Get Details About an Allocation Job
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     * @param  string $allocationJobId  (required)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ringba\Model\GetDetailsAboutanAllocationJob
     */
    public function getDetailsAboutanAllocationJob($authorization, $accountId, $numberPoolId, $allocationJobId)
    {
        list($response) = $this->getDetailsAboutanAllocationJobWithHttpInfo($authorization, $accountId, $numberPoolId, $allocationJobId);
        return $response;
    }

    /**
     * Operation getDetailsAboutanAllocationJobWithHttpInfo
     *
     * Get Details About an Allocation Job
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     * @param  string $allocationJobId  (required)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ringba\Model\GetDetailsAboutanAllocationJob, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDetailsAboutanAllocationJobWithHttpInfo($authorization, $accountId, $numberPoolId, $allocationJobId)
    {
        $request = $this->getDetailsAboutanAllocationJobRequest($authorization, $accountId, $numberPoolId, $allocationJobId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ringba\Model\GetDetailsAboutanAllocationJob' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ringba\Model\GetDetailsAboutanAllocationJob' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ringba\Model\GetDetailsAboutanAllocationJob', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ringba\Model\GetDetailsAboutanAllocationJob';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ringba\Model\GetDetailsAboutanAllocationJob',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDetailsAboutanAllocationJobAsync
     *
     * Get Details About an Allocation Job
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     * @param  string $allocationJobId  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDetailsAboutanAllocationJobAsync($authorization, $accountId, $numberPoolId, $allocationJobId)
    {
        return $this->getDetailsAboutanAllocationJobAsyncWithHttpInfo($authorization, $accountId, $numberPoolId, $allocationJobId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDetailsAboutanAllocationJobAsyncWithHttpInfo
     *
     * Get Details About an Allocation Job
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     * @param  string $allocationJobId  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDetailsAboutanAllocationJobAsyncWithHttpInfo($authorization, $accountId, $numberPoolId, $allocationJobId)
    {
        $returnType = '\Ringba\Model\GetDetailsAboutanAllocationJob';
        $request = $this->getDetailsAboutanAllocationJobRequest($authorization, $accountId, $numberPoolId, $allocationJobId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDetailsAboutanAllocationJob'
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     * @param  string $allocationJobId  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDetailsAboutanAllocationJobRequest($authorization, $accountId, $numberPoolId, $allocationJobId)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling getDetailsAboutanAllocationJob'
            );
        }
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling getDetailsAboutanAllocationJob'
            );
        }
        // verify the required parameter 'numberPoolId' is set
        if ($numberPoolId === null || (is_array($numberPoolId) && count($numberPoolId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $numberPoolId when calling getDetailsAboutanAllocationJob'
            );
        }
        // verify the required parameter 'allocationJobId' is set
        if ($allocationJobId === null || (is_array($allocationJobId) && count($allocationJobId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $allocationJobId when calling getDetailsAboutanAllocationJob'
            );
        }

        $resourcePath = '/{accountId}/numberpools/{numberPoolId}/AllocationJobs/{allocationJobId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($numberPoolId !== null) {
            $resourcePath = str_replace(
                '{' . 'numberPoolId' . '}',
                ObjectSerializer::toPathValue($numberPoolId),
                $resourcePath
            );
        }
        // path params
        if ($allocationJobId !== null) {
            $resourcePath = str_replace(
                '{' . 'allocationJobId' . '}',
                ObjectSerializer::toPathValue($allocationJobId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json; charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json; charset=utf-8'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHosts = ["http://example.com"];
        if ($this->hostIndex < 0 || $this->hostIndex >= sizeof($operationHosts)) {
            throw new \InvalidArgumentException("Invalid index {$this->hostIndex} when selecting the host. Must be less than ".sizeof($operationHosts));
        }
        $operationHost = $operationHosts[$this->hostIndex];

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getInboundReferencesforaNumberPool
     *
     * Get Inbound References for a Number Pool
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ringba\Model\GetInboundReferencesforaNumberPool
     */
    public function getInboundReferencesforaNumberPool($authorization, $accountId, $numberPoolId)
    {
        list($response) = $this->getInboundReferencesforaNumberPoolWithHttpInfo($authorization, $accountId, $numberPoolId);
        return $response;
    }

    /**
     * Operation getInboundReferencesforaNumberPoolWithHttpInfo
     *
     * Get Inbound References for a Number Pool
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ringba\Model\GetInboundReferencesforaNumberPool, HTTP status code, HTTP response headers (array of strings)
     */
    public function getInboundReferencesforaNumberPoolWithHttpInfo($authorization, $accountId, $numberPoolId)
    {
        $request = $this->getInboundReferencesforaNumberPoolRequest($authorization, $accountId, $numberPoolId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ringba\Model\GetInboundReferencesforaNumberPool' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ringba\Model\GetInboundReferencesforaNumberPool' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ringba\Model\GetInboundReferencesforaNumberPool', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ringba\Model\GetInboundReferencesforaNumberPool';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ringba\Model\GetInboundReferencesforaNumberPool',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getInboundReferencesforaNumberPoolAsync
     *
     * Get Inbound References for a Number Pool
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInboundReferencesforaNumberPoolAsync($authorization, $accountId, $numberPoolId)
    {
        return $this->getInboundReferencesforaNumberPoolAsyncWithHttpInfo($authorization, $accountId, $numberPoolId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getInboundReferencesforaNumberPoolAsyncWithHttpInfo
     *
     * Get Inbound References for a Number Pool
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInboundReferencesforaNumberPoolAsyncWithHttpInfo($authorization, $accountId, $numberPoolId)
    {
        $returnType = '\Ringba\Model\GetInboundReferencesforaNumberPool';
        $request = $this->getInboundReferencesforaNumberPoolRequest($authorization, $accountId, $numberPoolId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getInboundReferencesforaNumberPool'
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getInboundReferencesforaNumberPoolRequest($authorization, $accountId, $numberPoolId)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling getInboundReferencesforaNumberPool'
            );
        }
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling getInboundReferencesforaNumberPool'
            );
        }
        // verify the required parameter 'numberPoolId' is set
        if ($numberPoolId === null || (is_array($numberPoolId) && count($numberPoolId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $numberPoolId when calling getInboundReferencesforaNumberPool'
            );
        }

        $resourcePath = '/{accountId}/numberpools/{numberPoolId}/InboundReferences';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($numberPoolId !== null) {
            $resourcePath = str_replace(
                '{' . 'numberPoolId' . '}',
                ObjectSerializer::toPathValue($numberPoolId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json; charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json; charset=utf-8'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHosts = ["http://example.com"];
        if ($this->hostIndex < 0 || $this->hostIndex >= sizeof($operationHosts)) {
            throw new \InvalidArgumentException("Invalid index {$this->hostIndex} when selecting the host. Must be less than ".sizeof($operationHosts));
        }
        $operationHost = $operationHosts[$this->hostIndex];

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNumberPoolsAssociatedWithYourAccount
     *
     * Get Number Pools Associated With Your Account
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ringba\Model\GetNumberPoolsAssociatedWithYourAccount
     */
    public function getNumberPoolsAssociatedWithYourAccount($authorization, $accountId)
    {
        list($response) = $this->getNumberPoolsAssociatedWithYourAccountWithHttpInfo($authorization, $accountId);
        return $response;
    }

    /**
     * Operation getNumberPoolsAssociatedWithYourAccountWithHttpInfo
     *
     * Get Number Pools Associated With Your Account
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ringba\Model\GetNumberPoolsAssociatedWithYourAccount, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNumberPoolsAssociatedWithYourAccountWithHttpInfo($authorization, $accountId)
    {
        $request = $this->getNumberPoolsAssociatedWithYourAccountRequest($authorization, $accountId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ringba\Model\GetNumberPoolsAssociatedWithYourAccount' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ringba\Model\GetNumberPoolsAssociatedWithYourAccount' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ringba\Model\GetNumberPoolsAssociatedWithYourAccount', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ringba\Model\GetNumberPoolsAssociatedWithYourAccount';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ringba\Model\GetNumberPoolsAssociatedWithYourAccount',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNumberPoolsAssociatedWithYourAccountAsync
     *
     * Get Number Pools Associated With Your Account
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNumberPoolsAssociatedWithYourAccountAsync($authorization, $accountId)
    {
        return $this->getNumberPoolsAssociatedWithYourAccountAsyncWithHttpInfo($authorization, $accountId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNumberPoolsAssociatedWithYourAccountAsyncWithHttpInfo
     *
     * Get Number Pools Associated With Your Account
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNumberPoolsAssociatedWithYourAccountAsyncWithHttpInfo($authorization, $accountId)
    {
        $returnType = '\Ringba\Model\GetNumberPoolsAssociatedWithYourAccount';
        $request = $this->getNumberPoolsAssociatedWithYourAccountRequest($authorization, $accountId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNumberPoolsAssociatedWithYourAccount'
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getNumberPoolsAssociatedWithYourAccountRequest($authorization, $accountId)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling getNumberPoolsAssociatedWithYourAccount'
            );
        }
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling getNumberPoolsAssociatedWithYourAccount'
            );
        }

        $resourcePath = '/{accountId}/numberpools';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json; charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json; charset=utf-8'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHosts = ["http://example.com"];
        if ($this->hostIndex < 0 || $this->hostIndex >= sizeof($operationHosts)) {
            throw new \InvalidArgumentException("Invalid index {$this->hostIndex} when selecting the host. Must be less than ".sizeof($operationHosts));
        }
        $operationHost = $operationHosts[$this->hostIndex];

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNumbersCurrentlyInUse
     *
     * Get Numbers Currently In Use
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ringba\Model\GetNumbersCurrentlyInUse
     */
    public function getNumbersCurrentlyInUse($authorization, $accountId, $numberPoolId)
    {
        list($response) = $this->getNumbersCurrentlyInUseWithHttpInfo($authorization, $accountId, $numberPoolId);
        return $response;
    }

    /**
     * Operation getNumbersCurrentlyInUseWithHttpInfo
     *
     * Get Numbers Currently In Use
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ringba\Model\GetNumbersCurrentlyInUse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNumbersCurrentlyInUseWithHttpInfo($authorization, $accountId, $numberPoolId)
    {
        $request = $this->getNumbersCurrentlyInUseRequest($authorization, $accountId, $numberPoolId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ringba\Model\GetNumbersCurrentlyInUse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ringba\Model\GetNumbersCurrentlyInUse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ringba\Model\GetNumbersCurrentlyInUse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ringba\Model\GetNumbersCurrentlyInUse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ringba\Model\GetNumbersCurrentlyInUse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNumbersCurrentlyInUseAsync
     *
     * Get Numbers Currently In Use
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNumbersCurrentlyInUseAsync($authorization, $accountId, $numberPoolId)
    {
        return $this->getNumbersCurrentlyInUseAsyncWithHttpInfo($authorization, $accountId, $numberPoolId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNumbersCurrentlyInUseAsyncWithHttpInfo
     *
     * Get Numbers Currently In Use
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNumbersCurrentlyInUseAsyncWithHttpInfo($authorization, $accountId, $numberPoolId)
    {
        $returnType = '\Ringba\Model\GetNumbersCurrentlyInUse';
        $request = $this->getNumbersCurrentlyInUseRequest($authorization, $accountId, $numberPoolId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNumbersCurrentlyInUse'
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getNumbersCurrentlyInUseRequest($authorization, $accountId, $numberPoolId)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling getNumbersCurrentlyInUse'
            );
        }
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling getNumbersCurrentlyInUse'
            );
        }
        // verify the required parameter 'numberPoolId' is set
        if ($numberPoolId === null || (is_array($numberPoolId) && count($numberPoolId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $numberPoolId when calling getNumbersCurrentlyInUse'
            );
        }

        $resourcePath = '/{accountId}/numberpools/{numberPoolId}/Numbers/InUse';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($numberPoolId !== null) {
            $resourcePath = str_replace(
                '{' . 'numberPoolId' . '}',
                ObjectSerializer::toPathValue($numberPoolId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json; charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json; charset=utf-8'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHosts = ["http://example.com"];
        if ($this->hostIndex < 0 || $this->hostIndex >= sizeof($operationHosts)) {
            throw new \InvalidArgumentException("Invalid index {$this->hostIndex} when selecting the host. Must be less than ".sizeof($operationHosts));
        }
        $operationHost = $operationHosts[$this->hostIndex];

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNumbersforaNumberPool
     *
     * Get Numbers for a Number Pool
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ringba\Model\GetNumbersforaNumberPool
     */
    public function getNumbersforaNumberPool($authorization, $accountId, $numberPoolId)
    {
        list($response) = $this->getNumbersforaNumberPoolWithHttpInfo($authorization, $accountId, $numberPoolId);
        return $response;
    }

    /**
     * Operation getNumbersforaNumberPoolWithHttpInfo
     *
     * Get Numbers for a Number Pool
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ringba\Model\GetNumbersforaNumberPool, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNumbersforaNumberPoolWithHttpInfo($authorization, $accountId, $numberPoolId)
    {
        $request = $this->getNumbersforaNumberPoolRequest($authorization, $accountId, $numberPoolId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ringba\Model\GetNumbersforaNumberPool' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ringba\Model\GetNumbersforaNumberPool' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ringba\Model\GetNumbersforaNumberPool', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ringba\Model\GetNumbersforaNumberPool';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ringba\Model\GetNumbersforaNumberPool',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNumbersforaNumberPoolAsync
     *
     * Get Numbers for a Number Pool
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNumbersforaNumberPoolAsync($authorization, $accountId, $numberPoolId)
    {
        return $this->getNumbersforaNumberPoolAsyncWithHttpInfo($authorization, $accountId, $numberPoolId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNumbersforaNumberPoolAsyncWithHttpInfo
     *
     * Get Numbers for a Number Pool
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNumbersforaNumberPoolAsyncWithHttpInfo($authorization, $accountId, $numberPoolId)
    {
        $returnType = '\Ringba\Model\GetNumbersforaNumberPool';
        $request = $this->getNumbersforaNumberPoolRequest($authorization, $accountId, $numberPoolId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNumbersforaNumberPool'
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getNumbersforaNumberPoolRequest($authorization, $accountId, $numberPoolId)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling getNumbersforaNumberPool'
            );
        }
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling getNumbersforaNumberPool'
            );
        }
        // verify the required parameter 'numberPoolId' is set
        if ($numberPoolId === null || (is_array($numberPoolId) && count($numberPoolId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $numberPoolId when calling getNumbersforaNumberPool'
            );
        }

        $resourcePath = '/{accountId}/numberpools/{numberPoolId}/Numbers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($numberPoolId !== null) {
            $resourcePath = str_replace(
                '{' . 'numberPoolId' . '}',
                ObjectSerializer::toPathValue($numberPoolId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json; charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json; charset=utf-8'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHosts = ["http://example.com"];
        if ($this->hostIndex < 0 || $this->hostIndex >= sizeof($operationHosts)) {
            throw new \InvalidArgumentException("Invalid index {$this->hostIndex} when selecting the host. Must be less than ".sizeof($operationHosts));
        }
        $operationHost = $operationHosts[$this->hostIndex];

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getnumberpoolstats
     *
     * Get number pool stats
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $type Optional  - If the &lt;b&gt;type&lt;/b&gt; parameter is not added it will default to &lt;b&gt;day&lt;/b&gt;. &lt;h6&gt;Options&lt;/h6&gt; &lt;b&gt;day&lt;/b&gt;&lt;br&gt; Shows the stats  for the current day&lt;br&gt;&lt;br&gt; &lt;b&gt;month&lt;/b&gt;&lt;br&gt; Shows the stats  for the current month (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountid  (required)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ringba\Model\Getnumberpoolwithmisses
     */
    public function getnumberpoolstats($type, $authorization, $accountid)
    {
        list($response) = $this->getnumberpoolstatsWithHttpInfo($type, $authorization, $accountid);
        return $response;
    }

    /**
     * Operation getnumberpoolstatsWithHttpInfo
     *
     * Get number pool stats
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $type Optional  - If the &lt;b&gt;type&lt;/b&gt; parameter is not added it will default to &lt;b&gt;day&lt;/b&gt;. &lt;h6&gt;Options&lt;/h6&gt; &lt;b&gt;day&lt;/b&gt;&lt;br&gt; Shows the stats  for the current day&lt;br&gt;&lt;br&gt; &lt;b&gt;month&lt;/b&gt;&lt;br&gt; Shows the stats  for the current month (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountid  (required)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ringba\Model\Getnumberpoolwithmisses, HTTP status code, HTTP response headers (array of strings)
     */
    public function getnumberpoolstatsWithHttpInfo($type, $authorization, $accountid)
    {
        $request = $this->getnumberpoolstatsRequest($type, $authorization, $accountid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                default:
                    if ('\Ringba\Model\Getnumberpoolwithmisses' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ringba\Model\Getnumberpoolwithmisses' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ringba\Model\Getnumberpoolwithmisses', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ringba\Model\Getnumberpoolwithmisses';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ringba\Model\Getnumberpoolwithmisses',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getnumberpoolstatsAsync
     *
     * Get number pool stats
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $type Optional  - If the &lt;b&gt;type&lt;/b&gt; parameter is not added it will default to &lt;b&gt;day&lt;/b&gt;. &lt;h6&gt;Options&lt;/h6&gt; &lt;b&gt;day&lt;/b&gt;&lt;br&gt; Shows the stats  for the current day&lt;br&gt;&lt;br&gt; &lt;b&gt;month&lt;/b&gt;&lt;br&gt; Shows the stats  for the current month (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountid  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getnumberpoolstatsAsync($type, $authorization, $accountid)
    {
        return $this->getnumberpoolstatsAsyncWithHttpInfo($type, $authorization, $accountid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getnumberpoolstatsAsyncWithHttpInfo
     *
     * Get number pool stats
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $type Optional  - If the &lt;b&gt;type&lt;/b&gt; parameter is not added it will default to &lt;b&gt;day&lt;/b&gt;. &lt;h6&gt;Options&lt;/h6&gt; &lt;b&gt;day&lt;/b&gt;&lt;br&gt; Shows the stats  for the current day&lt;br&gt;&lt;br&gt; &lt;b&gt;month&lt;/b&gt;&lt;br&gt; Shows the stats  for the current month (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountid  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getnumberpoolstatsAsyncWithHttpInfo($type, $authorization, $accountid)
    {
        $returnType = '\Ringba\Model\Getnumberpoolwithmisses';
        $request = $this->getnumberpoolstatsRequest($type, $authorization, $accountid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getnumberpoolstats'
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $type Optional  - If the &lt;b&gt;type&lt;/b&gt; parameter is not added it will default to &lt;b&gt;day&lt;/b&gt;. &lt;h6&gt;Options&lt;/h6&gt; &lt;b&gt;day&lt;/b&gt;&lt;br&gt; Shows the stats  for the current day&lt;br&gt;&lt;br&gt; &lt;b&gt;month&lt;/b&gt;&lt;br&gt; Shows the stats  for the current month (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountid  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getnumberpoolstatsRequest($type, $authorization, $accountid)
    {
        // verify the required parameter 'type' is set
        if ($type === null || (is_array($type) && count($type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling getnumberpoolstats'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling getnumberpoolstats'
            );
        }
        // verify the required parameter 'accountid' is set
        if ($accountid === null || (is_array($accountid) && count($accountid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountid when calling getnumberpoolstats'
            );
        }

        $resourcePath = '/{accountid}/stats/numberPools';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $type,
            'type', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($accountid !== null) {
            $resourcePath = str_replace(
                '{' . 'accountid' . '}',
                ObjectSerializer::toPathValue($accountid),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHosts = ["http://example.com"];
        if ($this->hostIndex < 0 || $this->hostIndex >= sizeof($operationHosts)) {
            throw new \InvalidArgumentException("Invalid index {$this->hostIndex} when selecting the host. Must be less than ".sizeof($operationHosts));
        }
        $operationHost = $operationHosts[$this->hostIndex];

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation increaseSizeofaNumberPool
     *
     * Increase Size of a Number Pool
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     * @param  \Ringba\Model\IncreaseSizeofaNumberPoolRequest $increaseSizeofaNumberPoolRequest  (required)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ringba\Model\IncreaseSizeofaNumberPool
     */
    public function increaseSizeofaNumberPool($authorization, $accountId, $numberPoolId, $increaseSizeofaNumberPoolRequest)
    {
        list($response) = $this->increaseSizeofaNumberPoolWithHttpInfo($authorization, $accountId, $numberPoolId, $increaseSizeofaNumberPoolRequest);
        return $response;
    }

    /**
     * Operation increaseSizeofaNumberPoolWithHttpInfo
     *
     * Increase Size of a Number Pool
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     * @param  \Ringba\Model\IncreaseSizeofaNumberPoolRequest $increaseSizeofaNumberPoolRequest  (required)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ringba\Model\IncreaseSizeofaNumberPool, HTTP status code, HTTP response headers (array of strings)
     */
    public function increaseSizeofaNumberPoolWithHttpInfo($authorization, $accountId, $numberPoolId, $increaseSizeofaNumberPoolRequest)
    {
        $request = $this->increaseSizeofaNumberPoolRequest($authorization, $accountId, $numberPoolId, $increaseSizeofaNumberPoolRequest);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ringba\Model\IncreaseSizeofaNumberPool' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ringba\Model\IncreaseSizeofaNumberPool' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ringba\Model\IncreaseSizeofaNumberPool', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ringba\Model\IncreaseSizeofaNumberPool';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ringba\Model\IncreaseSizeofaNumberPool',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation increaseSizeofaNumberPoolAsync
     *
     * Increase Size of a Number Pool
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     * @param  \Ringba\Model\IncreaseSizeofaNumberPoolRequest $increaseSizeofaNumberPoolRequest  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function increaseSizeofaNumberPoolAsync($authorization, $accountId, $numberPoolId, $increaseSizeofaNumberPoolRequest)
    {
        return $this->increaseSizeofaNumberPoolAsyncWithHttpInfo($authorization, $accountId, $numberPoolId, $increaseSizeofaNumberPoolRequest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation increaseSizeofaNumberPoolAsyncWithHttpInfo
     *
     * Increase Size of a Number Pool
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     * @param  \Ringba\Model\IncreaseSizeofaNumberPoolRequest $increaseSizeofaNumberPoolRequest  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function increaseSizeofaNumberPoolAsyncWithHttpInfo($authorization, $accountId, $numberPoolId, $increaseSizeofaNumberPoolRequest)
    {
        $returnType = '\Ringba\Model\IncreaseSizeofaNumberPool';
        $request = $this->increaseSizeofaNumberPoolRequest($authorization, $accountId, $numberPoolId, $increaseSizeofaNumberPoolRequest);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'increaseSizeofaNumberPool'
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     * @param  \Ringba\Model\IncreaseSizeofaNumberPoolRequest $increaseSizeofaNumberPoolRequest  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function increaseSizeofaNumberPoolRequest($authorization, $accountId, $numberPoolId, $increaseSizeofaNumberPoolRequest)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling increaseSizeofaNumberPool'
            );
        }
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling increaseSizeofaNumberPool'
            );
        }
        // verify the required parameter 'numberPoolId' is set
        if ($numberPoolId === null || (is_array($numberPoolId) && count($numberPoolId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $numberPoolId when calling increaseSizeofaNumberPool'
            );
        }
        // verify the required parameter 'increaseSizeofaNumberPoolRequest' is set
        if ($increaseSizeofaNumberPoolRequest === null || (is_array($increaseSizeofaNumberPoolRequest) && count($increaseSizeofaNumberPoolRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $increaseSizeofaNumberPoolRequest when calling increaseSizeofaNumberPool'
            );
        }

        $resourcePath = '/{accountId}/numberpools/{numberPoolId}/Expand';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($numberPoolId !== null) {
            $resourcePath = str_replace(
                '{' . 'numberPoolId' . '}',
                ObjectSerializer::toPathValue($numberPoolId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json; charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json; charset=utf-8'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($increaseSizeofaNumberPoolRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($increaseSizeofaNumberPoolRequest));
            } else {
                $httpBody = $increaseSizeofaNumberPoolRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHosts = ["http://example.com"];
        if ($this->hostIndex < 0 || $this->hostIndex >= sizeof($operationHosts)) {
            throw new \InvalidArgumentException("Invalid index {$this->hostIndex} when selecting the host. Must be less than ".sizeof($operationHosts));
        }
        $operationHost = $operationHosts[$this->hostIndex];

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeaPublisherfromaNumberPool
     *
     * Remove a Publisher from a Number Pool
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     * @param  string $publisherId  (required)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ringba\Model\RemoveaPublisherfromaNumberPool
     */
    public function removeaPublisherfromaNumberPool($authorization, $accountId, $numberPoolId, $publisherId)
    {
        list($response) = $this->removeaPublisherfromaNumberPoolWithHttpInfo($authorization, $accountId, $numberPoolId, $publisherId);
        return $response;
    }

    /**
     * Operation removeaPublisherfromaNumberPoolWithHttpInfo
     *
     * Remove a Publisher from a Number Pool
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     * @param  string $publisherId  (required)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ringba\Model\RemoveaPublisherfromaNumberPool, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeaPublisherfromaNumberPoolWithHttpInfo($authorization, $accountId, $numberPoolId, $publisherId)
    {
        $request = $this->removeaPublisherfromaNumberPoolRequest($authorization, $accountId, $numberPoolId, $publisherId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ringba\Model\RemoveaPublisherfromaNumberPool' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ringba\Model\RemoveaPublisherfromaNumberPool' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ringba\Model\RemoveaPublisherfromaNumberPool', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ringba\Model\RemoveaPublisherfromaNumberPool';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ringba\Model\RemoveaPublisherfromaNumberPool',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation removeaPublisherfromaNumberPoolAsync
     *
     * Remove a Publisher from a Number Pool
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     * @param  string $publisherId  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeaPublisherfromaNumberPoolAsync($authorization, $accountId, $numberPoolId, $publisherId)
    {
        return $this->removeaPublisherfromaNumberPoolAsyncWithHttpInfo($authorization, $accountId, $numberPoolId, $publisherId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation removeaPublisherfromaNumberPoolAsyncWithHttpInfo
     *
     * Remove a Publisher from a Number Pool
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     * @param  string $publisherId  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeaPublisherfromaNumberPoolAsyncWithHttpInfo($authorization, $accountId, $numberPoolId, $publisherId)
    {
        $returnType = '\Ringba\Model\RemoveaPublisherfromaNumberPool';
        $request = $this->removeaPublisherfromaNumberPoolRequest($authorization, $accountId, $numberPoolId, $publisherId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeaPublisherfromaNumberPool'
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     * @param  string $publisherId  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function removeaPublisherfromaNumberPoolRequest($authorization, $accountId, $numberPoolId, $publisherId)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling removeaPublisherfromaNumberPool'
            );
        }
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling removeaPublisherfromaNumberPool'
            );
        }
        // verify the required parameter 'numberPoolId' is set
        if ($numberPoolId === null || (is_array($numberPoolId) && count($numberPoolId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $numberPoolId when calling removeaPublisherfromaNumberPool'
            );
        }
        // verify the required parameter 'publisherId' is set
        if ($publisherId === null || (is_array($publisherId) && count($publisherId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $publisherId when calling removeaPublisherfromaNumberPool'
            );
        }

        $resourcePath = '/{accountId}/numberpools/{numberPoolId}/Affiliate/{publisherId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($numberPoolId !== null) {
            $resourcePath = str_replace(
                '{' . 'numberPoolId' . '}',
                ObjectSerializer::toPathValue($numberPoolId),
                $resourcePath
            );
        }
        // path params
        if ($publisherId !== null) {
            $resourcePath = str_replace(
                '{' . 'publisherId' . '}',
                ObjectSerializer::toPathValue($publisherId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json; charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json; charset=utf-8'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHosts = ["http://example.com"];
        if ($this->hostIndex < 0 || $this->hostIndex >= sizeof($operationHosts)) {
            throw new \InvalidArgumentException("Invalid index {$this->hostIndex} when selecting the host. Must be less than ".sizeof($operationHosts));
        }
        $operationHost = $operationHosts[$this->hostIndex];

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation replaceNumbersInaNumberPool
     *
     * Replace Numbers In a Number Pool
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     * @param  \Ringba\Model\ReplaceNumbersInaNumberPoolRequest $replaceNumbersInaNumberPoolRequest  (required)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ringba\Model\ReplaceNumbersInaNumberPool
     */
    public function replaceNumbersInaNumberPool($authorization, $accountId, $numberPoolId, $replaceNumbersInaNumberPoolRequest)
    {
        list($response) = $this->replaceNumbersInaNumberPoolWithHttpInfo($authorization, $accountId, $numberPoolId, $replaceNumbersInaNumberPoolRequest);
        return $response;
    }

    /**
     * Operation replaceNumbersInaNumberPoolWithHttpInfo
     *
     * Replace Numbers In a Number Pool
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     * @param  \Ringba\Model\ReplaceNumbersInaNumberPoolRequest $replaceNumbersInaNumberPoolRequest  (required)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ringba\Model\ReplaceNumbersInaNumberPool, HTTP status code, HTTP response headers (array of strings)
     */
    public function replaceNumbersInaNumberPoolWithHttpInfo($authorization, $accountId, $numberPoolId, $replaceNumbersInaNumberPoolRequest)
    {
        $request = $this->replaceNumbersInaNumberPoolRequest($authorization, $accountId, $numberPoolId, $replaceNumbersInaNumberPoolRequest);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ringba\Model\ReplaceNumbersInaNumberPool' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ringba\Model\ReplaceNumbersInaNumberPool' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ringba\Model\ReplaceNumbersInaNumberPool', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ringba\Model\ReplaceNumbersInaNumberPool';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ringba\Model\ReplaceNumbersInaNumberPool',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation replaceNumbersInaNumberPoolAsync
     *
     * Replace Numbers In a Number Pool
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     * @param  \Ringba\Model\ReplaceNumbersInaNumberPoolRequest $replaceNumbersInaNumberPoolRequest  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function replaceNumbersInaNumberPoolAsync($authorization, $accountId, $numberPoolId, $replaceNumbersInaNumberPoolRequest)
    {
        return $this->replaceNumbersInaNumberPoolAsyncWithHttpInfo($authorization, $accountId, $numberPoolId, $replaceNumbersInaNumberPoolRequest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation replaceNumbersInaNumberPoolAsyncWithHttpInfo
     *
     * Replace Numbers In a Number Pool
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     * @param  \Ringba\Model\ReplaceNumbersInaNumberPoolRequest $replaceNumbersInaNumberPoolRequest  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function replaceNumbersInaNumberPoolAsyncWithHttpInfo($authorization, $accountId, $numberPoolId, $replaceNumbersInaNumberPoolRequest)
    {
        $returnType = '\Ringba\Model\ReplaceNumbersInaNumberPool';
        $request = $this->replaceNumbersInaNumberPoolRequest($authorization, $accountId, $numberPoolId, $replaceNumbersInaNumberPoolRequest);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'replaceNumbersInaNumberPool'
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     * @param  \Ringba\Model\ReplaceNumbersInaNumberPoolRequest $replaceNumbersInaNumberPoolRequest  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function replaceNumbersInaNumberPoolRequest($authorization, $accountId, $numberPoolId, $replaceNumbersInaNumberPoolRequest)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling replaceNumbersInaNumberPool'
            );
        }
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling replaceNumbersInaNumberPool'
            );
        }
        // verify the required parameter 'numberPoolId' is set
        if ($numberPoolId === null || (is_array($numberPoolId) && count($numberPoolId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $numberPoolId when calling replaceNumbersInaNumberPool'
            );
        }
        // verify the required parameter 'replaceNumbersInaNumberPoolRequest' is set
        if ($replaceNumbersInaNumberPoolRequest === null || (is_array($replaceNumbersInaNumberPoolRequest) && count($replaceNumbersInaNumberPoolRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $replaceNumbersInaNumberPoolRequest when calling replaceNumbersInaNumberPool'
            );
        }

        $resourcePath = '/{accountId}/numberpools/{numberPoolId}/Replace';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($numberPoolId !== null) {
            $resourcePath = str_replace(
                '{' . 'numberPoolId' . '}',
                ObjectSerializer::toPathValue($numberPoolId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json; charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json; charset=utf-8'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($replaceNumbersInaNumberPoolRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($replaceNumbersInaNumberPoolRequest));
            } else {
                $httpBody = $replaceNumbersInaNumberPoolRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHosts = ["http://example.com"];
        if ($this->hostIndex < 0 || $this->hostIndex >= sizeof($operationHosts)) {
            throw new \InvalidArgumentException("Invalid index {$this->hostIndex} when selecting the host. Must be less than ".sizeof($operationHosts));
        }
        $operationHost = $operationHosts[$this->hostIndex];

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation verifyNumbersinNumberPool
     *
     * Verify Numbers in Number Pool
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ringba\Model\VerifyNumbersinNumberPool
     */
    public function verifyNumbersinNumberPool($authorization, $accountId, $numberPoolId)
    {
        list($response) = $this->verifyNumbersinNumberPoolWithHttpInfo($authorization, $accountId, $numberPoolId);
        return $response;
    }

    /**
     * Operation verifyNumbersinNumberPoolWithHttpInfo
     *
     * Verify Numbers in Number Pool
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ringba\Model\VerifyNumbersinNumberPool, HTTP status code, HTTP response headers (array of strings)
     */
    public function verifyNumbersinNumberPoolWithHttpInfo($authorization, $accountId, $numberPoolId)
    {
        $request = $this->verifyNumbersinNumberPoolRequest($authorization, $accountId, $numberPoolId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ringba\Model\VerifyNumbersinNumberPool' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ringba\Model\VerifyNumbersinNumberPool' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ringba\Model\VerifyNumbersinNumberPool', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ringba\Model\VerifyNumbersinNumberPool';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ringba\Model\VerifyNumbersinNumberPool',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation verifyNumbersinNumberPoolAsync
     *
     * Verify Numbers in Number Pool
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function verifyNumbersinNumberPoolAsync($authorization, $accountId, $numberPoolId)
    {
        return $this->verifyNumbersinNumberPoolAsyncWithHttpInfo($authorization, $accountId, $numberPoolId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation verifyNumbersinNumberPoolAsyncWithHttpInfo
     *
     * Verify Numbers in Number Pool
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function verifyNumbersinNumberPoolAsyncWithHttpInfo($authorization, $accountId, $numberPoolId)
    {
        $returnType = '\Ringba\Model\VerifyNumbersinNumberPool';
        $request = $this->verifyNumbersinNumberPoolRequest($authorization, $accountId, $numberPoolId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'verifyNumbersinNumberPool'
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://example.com
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $numberPoolId  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function verifyNumbersinNumberPoolRequest($authorization, $accountId, $numberPoolId)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling verifyNumbersinNumberPool'
            );
        }
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling verifyNumbersinNumberPool'
            );
        }
        // verify the required parameter 'numberPoolId' is set
        if ($numberPoolId === null || (is_array($numberPoolId) && count($numberPoolId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $numberPoolId when calling verifyNumbersinNumberPool'
            );
        }

        $resourcePath = '/{accountId}/numberpools/{numberPoolId}/Numbers/Verify';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($numberPoolId !== null) {
            $resourcePath = str_replace(
                '{' . 'numberPoolId' . '}',
                ObjectSerializer::toPathValue($numberPoolId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json; charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json; charset=utf-8'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHosts = ["http://example.com"];
        if ($this->hostIndex < 0 || $this->hostIndex >= sizeof($operationHosts)) {
            throw new \InvalidArgumentException("Invalid index {$this->hostIndex} when selecting the host. Must be less than ".sizeof($operationHosts));
        }
        $operationHost = $operationHosts[$this->hostIndex];

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
