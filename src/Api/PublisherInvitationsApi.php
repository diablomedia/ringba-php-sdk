<?php
/**
 * PublisherInvitationsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Ringba
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ringba API Documentation
 *
 * Ringbaâ€™s APIs allow you to interact, gather information, and make dynamic changes in real-time. All functions found within the Ringba portal are also available programmatically through our API.   If this is your first time using our API, please read the __Getting Started__ section below.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Ringba\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Ringba\ApiException;
use Ringba\Configuration;
use Ringba\HeaderSelector;
use Ringba\ObjectSerializer;

/**
 * PublisherInvitationsApi Class Doc Comment
 *
 * @category Class
 * @package  Ringba
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PublisherInvitationsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteanInvitation
     *
     * Delete an Invitation
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://http://api.ringba.com/v2/
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $publisherId  (required)
     * @param  string $invitationId  (required)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ringba\Model\DeleteanInvitation
     */
    public function deleteanInvitation($authorization, $accountId, $publisherId, $invitationId)
    {
        list($response) = $this->deleteanInvitationWithHttpInfo($authorization, $accountId, $publisherId, $invitationId);
        return $response;
    }

    /**
     * Operation deleteanInvitationWithHttpInfo
     *
     * Delete an Invitation
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://http://api.ringba.com/v2/
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $publisherId  (required)
     * @param  string $invitationId  (required)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ringba\Model\DeleteanInvitation, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteanInvitationWithHttpInfo($authorization, $accountId, $publisherId, $invitationId)
    {
        $request = $this->deleteanInvitationRequest($authorization, $accountId, $publisherId, $invitationId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ringba\Model\DeleteanInvitation' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ringba\Model\DeleteanInvitation' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ringba\Model\DeleteanInvitation', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ringba\Model\DeleteanInvitation';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ringba\Model\DeleteanInvitation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteanInvitationAsync
     *
     * Delete an Invitation
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://http://api.ringba.com/v2/
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $publisherId  (required)
     * @param  string $invitationId  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteanInvitationAsync($authorization, $accountId, $publisherId, $invitationId)
    {
        return $this->deleteanInvitationAsyncWithHttpInfo($authorization, $accountId, $publisherId, $invitationId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteanInvitationAsyncWithHttpInfo
     *
     * Delete an Invitation
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://http://api.ringba.com/v2/
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $publisherId  (required)
     * @param  string $invitationId  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteanInvitationAsyncWithHttpInfo($authorization, $accountId, $publisherId, $invitationId)
    {
        $returnType = '\Ringba\Model\DeleteanInvitation';
        $request = $this->deleteanInvitationRequest($authorization, $accountId, $publisherId, $invitationId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteanInvitation'
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://http://api.ringba.com/v2/
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $publisherId  (required)
     * @param  string $invitationId  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteanInvitationRequest($authorization, $accountId, $publisherId, $invitationId)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling deleteanInvitation'
            );
        }
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling deleteanInvitation'
            );
        }
        // verify the required parameter 'publisherId' is set
        if ($publisherId === null || (is_array($publisherId) && count($publisherId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $publisherId when calling deleteanInvitation'
            );
        }
        // verify the required parameter 'invitationId' is set
        if ($invitationId === null || (is_array($invitationId) && count($invitationId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invitationId when calling deleteanInvitation'
            );
        }

        $resourcePath = '/{accountId}/Affiliates/{publisherId}/Invitations/{invitationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($publisherId !== null) {
            $resourcePath = str_replace(
                '{' . 'publisherId' . '}',
                ObjectSerializer::toPathValue($publisherId),
                $resourcePath
            );
        }
        // path params
        if ($invitationId !== null) {
            $resourcePath = str_replace(
                '{' . 'invitationId' . '}',
                ObjectSerializer::toPathValue($invitationId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json; charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json; charset=utf-8'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHosts = ["http://http://api.ringba.com/v2/"];
        if ($this->hostIndex < 0 || $this->hostIndex >= sizeof($operationHosts)) {
            throw new \InvalidArgumentException("Invalid index {$this->hostIndex} when selecting the host. Must be less than ".sizeof($operationHosts));
        }
        $operationHost = $operationHosts[$this->hostIndex];

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDetailsAboutanInvitation
     *
     * Get Details About an Invitation
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://http://api.ringba.com/v2/
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $publisherId  (required)
     * @param  string $invitationId  (required)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ringba\Model\GetDetailsAboutanInvitation
     */
    public function getDetailsAboutanInvitation($authorization, $accountId, $publisherId, $invitationId)
    {
        list($response) = $this->getDetailsAboutanInvitationWithHttpInfo($authorization, $accountId, $publisherId, $invitationId);
        return $response;
    }

    /**
     * Operation getDetailsAboutanInvitationWithHttpInfo
     *
     * Get Details About an Invitation
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://http://api.ringba.com/v2/
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $publisherId  (required)
     * @param  string $invitationId  (required)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ringba\Model\GetDetailsAboutanInvitation, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDetailsAboutanInvitationWithHttpInfo($authorization, $accountId, $publisherId, $invitationId)
    {
        $request = $this->getDetailsAboutanInvitationRequest($authorization, $accountId, $publisherId, $invitationId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ringba\Model\GetDetailsAboutanInvitation' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ringba\Model\GetDetailsAboutanInvitation' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ringba\Model\GetDetailsAboutanInvitation', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ringba\Model\GetDetailsAboutanInvitation';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ringba\Model\GetDetailsAboutanInvitation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDetailsAboutanInvitationAsync
     *
     * Get Details About an Invitation
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://http://api.ringba.com/v2/
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $publisherId  (required)
     * @param  string $invitationId  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDetailsAboutanInvitationAsync($authorization, $accountId, $publisherId, $invitationId)
    {
        return $this->getDetailsAboutanInvitationAsyncWithHttpInfo($authorization, $accountId, $publisherId, $invitationId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDetailsAboutanInvitationAsyncWithHttpInfo
     *
     * Get Details About an Invitation
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://http://api.ringba.com/v2/
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $publisherId  (required)
     * @param  string $invitationId  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDetailsAboutanInvitationAsyncWithHttpInfo($authorization, $accountId, $publisherId, $invitationId)
    {
        $returnType = '\Ringba\Model\GetDetailsAboutanInvitation';
        $request = $this->getDetailsAboutanInvitationRequest($authorization, $accountId, $publisherId, $invitationId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDetailsAboutanInvitation'
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://http://api.ringba.com/v2/
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $publisherId  (required)
     * @param  string $invitationId  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDetailsAboutanInvitationRequest($authorization, $accountId, $publisherId, $invitationId)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling getDetailsAboutanInvitation'
            );
        }
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling getDetailsAboutanInvitation'
            );
        }
        // verify the required parameter 'publisherId' is set
        if ($publisherId === null || (is_array($publisherId) && count($publisherId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $publisherId when calling getDetailsAboutanInvitation'
            );
        }
        // verify the required parameter 'invitationId' is set
        if ($invitationId === null || (is_array($invitationId) && count($invitationId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invitationId when calling getDetailsAboutanInvitation'
            );
        }

        $resourcePath = '/{accountId}/Affiliates/{publisherId}/Invitations/{invitationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($publisherId !== null) {
            $resourcePath = str_replace(
                '{' . 'publisherId' . '}',
                ObjectSerializer::toPathValue($publisherId),
                $resourcePath
            );
        }
        // path params
        if ($invitationId !== null) {
            $resourcePath = str_replace(
                '{' . 'invitationId' . '}',
                ObjectSerializer::toPathValue($invitationId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json; charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json; charset=utf-8'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHosts = ["http://http://api.ringba.com/v2/"];
        if ($this->hostIndex < 0 || $this->hostIndex >= sizeof($operationHosts)) {
            throw new \InvalidArgumentException("Invalid index {$this->hostIndex} when selecting the host. Must be less than ".sizeof($operationHosts));
        }
        $operationHost = $operationHosts[$this->hostIndex];

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getInvitationsforaPublisher
     *
     * Get Invitations for a Publisher
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://http://api.ringba.com/v2/
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $publisherId  (required)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ringba\Model\GetInvitationsforaPublisher
     */
    public function getInvitationsforaPublisher($authorization, $accountId, $publisherId)
    {
        list($response) = $this->getInvitationsforaPublisherWithHttpInfo($authorization, $accountId, $publisherId);
        return $response;
    }

    /**
     * Operation getInvitationsforaPublisherWithHttpInfo
     *
     * Get Invitations for a Publisher
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://http://api.ringba.com/v2/
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $publisherId  (required)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ringba\Model\GetInvitationsforaPublisher, HTTP status code, HTTP response headers (array of strings)
     */
    public function getInvitationsforaPublisherWithHttpInfo($authorization, $accountId, $publisherId)
    {
        $request = $this->getInvitationsforaPublisherRequest($authorization, $accountId, $publisherId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ringba\Model\GetInvitationsforaPublisher' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ringba\Model\GetInvitationsforaPublisher' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ringba\Model\GetInvitationsforaPublisher', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ringba\Model\GetInvitationsforaPublisher';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ringba\Model\GetInvitationsforaPublisher',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getInvitationsforaPublisherAsync
     *
     * Get Invitations for a Publisher
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://http://api.ringba.com/v2/
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $publisherId  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInvitationsforaPublisherAsync($authorization, $accountId, $publisherId)
    {
        return $this->getInvitationsforaPublisherAsyncWithHttpInfo($authorization, $accountId, $publisherId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getInvitationsforaPublisherAsyncWithHttpInfo
     *
     * Get Invitations for a Publisher
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://http://api.ringba.com/v2/
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $publisherId  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInvitationsforaPublisherAsyncWithHttpInfo($authorization, $accountId, $publisherId)
    {
        $returnType = '\Ringba\Model\GetInvitationsforaPublisher';
        $request = $this->getInvitationsforaPublisherRequest($authorization, $accountId, $publisherId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getInvitationsforaPublisher'
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://http://api.ringba.com/v2/
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $publisherId  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getInvitationsforaPublisherRequest($authorization, $accountId, $publisherId)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling getInvitationsforaPublisher'
            );
        }
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling getInvitationsforaPublisher'
            );
        }
        // verify the required parameter 'publisherId' is set
        if ($publisherId === null || (is_array($publisherId) && count($publisherId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $publisherId when calling getInvitationsforaPublisher'
            );
        }

        $resourcePath = '/{accountId}/Affiliates/{publisherId}/Invitations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($publisherId !== null) {
            $resourcePath = str_replace(
                '{' . 'publisherId' . '}',
                ObjectSerializer::toPathValue($publisherId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json; charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json; charset=utf-8'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHosts = ["http://http://api.ringba.com/v2/"];
        if ($this->hostIndex < 0 || $this->hostIndex >= sizeof($operationHosts)) {
            throw new \InvalidArgumentException("Invalid index {$this->hostIndex} when selecting the host. Must be less than ".sizeof($operationHosts));
        }
        $operationHost = $operationHosts[$this->hostIndex];

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation inviteUsertoJoinPublisher
     *
     * Invite User to Join Publisher
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://http://api.ringba.com/v2/
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $publisherId  (required)
     * @param  \Ringba\Model\InviteUsertoJoinPublisherRequest $inviteUsertoJoinPublisherRequest  (required)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ringba\Model\InviteUser
     */
    public function inviteUsertoJoinPublisher($authorization, $accountId, $publisherId, $inviteUsertoJoinPublisherRequest)
    {
        list($response) = $this->inviteUsertoJoinPublisherWithHttpInfo($authorization, $accountId, $publisherId, $inviteUsertoJoinPublisherRequest);
        return $response;
    }

    /**
     * Operation inviteUsertoJoinPublisherWithHttpInfo
     *
     * Invite User to Join Publisher
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://http://api.ringba.com/v2/
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $publisherId  (required)
     * @param  \Ringba\Model\InviteUsertoJoinPublisherRequest $inviteUsertoJoinPublisherRequest  (required)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ringba\Model\InviteUser, HTTP status code, HTTP response headers (array of strings)
     */
    public function inviteUsertoJoinPublisherWithHttpInfo($authorization, $accountId, $publisherId, $inviteUsertoJoinPublisherRequest)
    {
        $request = $this->inviteUsertoJoinPublisherRequest($authorization, $accountId, $publisherId, $inviteUsertoJoinPublisherRequest);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ringba\Model\InviteUser' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ringba\Model\InviteUser' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ringba\Model\InviteUser', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ringba\Model\InviteUser';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ringba\Model\InviteUser',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation inviteUsertoJoinPublisherAsync
     *
     * Invite User to Join Publisher
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://http://api.ringba.com/v2/
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $publisherId  (required)
     * @param  \Ringba\Model\InviteUsertoJoinPublisherRequest $inviteUsertoJoinPublisherRequest  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function inviteUsertoJoinPublisherAsync($authorization, $accountId, $publisherId, $inviteUsertoJoinPublisherRequest)
    {
        return $this->inviteUsertoJoinPublisherAsyncWithHttpInfo($authorization, $accountId, $publisherId, $inviteUsertoJoinPublisherRequest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation inviteUsertoJoinPublisherAsyncWithHttpInfo
     *
     * Invite User to Join Publisher
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://http://api.ringba.com/v2/
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $publisherId  (required)
     * @param  \Ringba\Model\InviteUsertoJoinPublisherRequest $inviteUsertoJoinPublisherRequest  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function inviteUsertoJoinPublisherAsyncWithHttpInfo($authorization, $accountId, $publisherId, $inviteUsertoJoinPublisherRequest)
    {
        $returnType = '\Ringba\Model\InviteUser';
        $request = $this->inviteUsertoJoinPublisherRequest($authorization, $accountId, $publisherId, $inviteUsertoJoinPublisherRequest);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'inviteUsertoJoinPublisher'
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: http://http://api.ringba.com/v2/
     *
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (required)
     * @param  string $accountId  (required)
     * @param  string $publisherId  (required)
     * @param  \Ringba\Model\InviteUsertoJoinPublisherRequest $inviteUsertoJoinPublisherRequest  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function inviteUsertoJoinPublisherRequest($authorization, $accountId, $publisherId, $inviteUsertoJoinPublisherRequest)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling inviteUsertoJoinPublisher'
            );
        }
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling inviteUsertoJoinPublisher'
            );
        }
        // verify the required parameter 'publisherId' is set
        if ($publisherId === null || (is_array($publisherId) && count($publisherId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $publisherId when calling inviteUsertoJoinPublisher'
            );
        }
        // verify the required parameter 'inviteUsertoJoinPublisherRequest' is set
        if ($inviteUsertoJoinPublisherRequest === null || (is_array($inviteUsertoJoinPublisherRequest) && count($inviteUsertoJoinPublisherRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inviteUsertoJoinPublisherRequest when calling inviteUsertoJoinPublisher'
            );
        }

        $resourcePath = '/{accountId}/Affiliates/{publisherId}/Invitations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($publisherId !== null) {
            $resourcePath = str_replace(
                '{' . 'publisherId' . '}',
                ObjectSerializer::toPathValue($publisherId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json; charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json; charset=utf-8'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($inviteUsertoJoinPublisherRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($inviteUsertoJoinPublisherRequest));
            } else {
                $httpBody = $inviteUsertoJoinPublisherRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHosts = ["http://http://api.ringba.com/v2/"];
        if ($this->hostIndex < 0 || $this->hostIndex >= sizeof($operationHosts)) {
            throw new \InvalidArgumentException("Invalid index {$this->hostIndex} when selecting the host. Must be less than ".sizeof($operationHosts));
        }
        $operationHost = $operationHosts[$this->hostIndex];

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
