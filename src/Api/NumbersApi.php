<?php
/**
 * NumbersApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Ringba
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ringba API Documentation
 *
 * Ringbaâ€™s APIs allow you to interact, gather information, and make dynamic changes in real-time. All functions found within the Ringba portal are also available programmatically through our API.   If this is your first time using our API, please read the __Getting Started__ section below.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Ringba\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Ringba\ApiException;
use Ringba\Configuration;
use Ringba\HeaderSelector;
use Ringba\ObjectSerializer;

/**
 * NumbersApi Class Doc Comment
 *
 * @category Class
 * @package  Ringba
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class NumbersApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addaPublishertoaNumber
     *
     * Add a Publisher to a Number
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $numberId  (required)
     * @param  \Ringba\Model\AddaPublishertoaNumberRequest $addaPublishertoaNumberRequest  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ringba\Model\AddaPublishertoaNumber
     */
    public function addaPublishertoaNumber($accountId, $numberId, $addaPublishertoaNumberRequest, $authorization = null)
    {
        list($response) = $this->addaPublishertoaNumberWithHttpInfo($accountId, $numberId, $addaPublishertoaNumberRequest, $authorization);
        return $response;
    }

    /**
     * Operation addaPublishertoaNumberWithHttpInfo
     *
     * Add a Publisher to a Number
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $numberId  (required)
     * @param  \Ringba\Model\AddaPublishertoaNumberRequest $addaPublishertoaNumberRequest  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ringba\Model\AddaPublishertoaNumber, HTTP status code, HTTP response headers (array of strings)
     */
    public function addaPublishertoaNumberWithHttpInfo($accountId, $numberId, $addaPublishertoaNumberRequest, $authorization = null)
    {
        $request = $this->addaPublishertoaNumberRequest($accountId, $numberId, $addaPublishertoaNumberRequest, $authorization);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ringba\Model\AddaPublishertoaNumber' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ringba\Model\AddaPublishertoaNumber' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ringba\Model\AddaPublishertoaNumber', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ringba\Model\AddaPublishertoaNumber';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ringba\Model\AddaPublishertoaNumber',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addaPublishertoaNumberAsync
     *
     * Add a Publisher to a Number
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $numberId  (required)
     * @param  \Ringba\Model\AddaPublishertoaNumberRequest $addaPublishertoaNumberRequest  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addaPublishertoaNumberAsync($accountId, $numberId, $addaPublishertoaNumberRequest, $authorization = null)
    {
        return $this->addaPublishertoaNumberAsyncWithHttpInfo($accountId, $numberId, $addaPublishertoaNumberRequest, $authorization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addaPublishertoaNumberAsyncWithHttpInfo
     *
     * Add a Publisher to a Number
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $numberId  (required)
     * @param  \Ringba\Model\AddaPublishertoaNumberRequest $addaPublishertoaNumberRequest  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addaPublishertoaNumberAsyncWithHttpInfo($accountId, $numberId, $addaPublishertoaNumberRequest, $authorization = null)
    {
        $returnType = '\Ringba\Model\AddaPublishertoaNumber';
        $request = $this->addaPublishertoaNumberRequest($accountId, $numberId, $addaPublishertoaNumberRequest, $authorization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addaPublishertoaNumber'
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $numberId  (required)
     * @param  \Ringba\Model\AddaPublishertoaNumberRequest $addaPublishertoaNumberRequest  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addaPublishertoaNumberRequest($accountId, $numberId, $addaPublishertoaNumberRequest, $authorization = null)
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling addaPublishertoaNumber'
            );
        }
        // verify the required parameter 'numberId' is set
        if ($numberId === null || (is_array($numberId) && count($numberId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $numberId when calling addaPublishertoaNumber'
            );
        }
        // verify the required parameter 'addaPublishertoaNumberRequest' is set
        if ($addaPublishertoaNumberRequest === null || (is_array($addaPublishertoaNumberRequest) && count($addaPublishertoaNumberRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $addaPublishertoaNumberRequest when calling addaPublishertoaNumber'
            );
        }

        $resourcePath = '/{accountId}/numbers/{numberId}/affiliate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($numberId !== null) {
            $resourcePath = str_replace(
                '{' . 'numberId' . '}',
                ObjectSerializer::toPathValue($numberId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json; charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json; charset=utf-8'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($addaPublishertoaNumberRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($addaPublishertoaNumberRequest));
            } else {
                $httpBody = $addaPublishertoaNumberRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHosts = ["https://api.ringba.com/v2"];
        if ($this->hostIndex < 0 || $this->hostIndex >= sizeof($operationHosts)) {
            throw new \InvalidArgumentException("Invalid index {$this->hostIndex} when selecting the host. Must be less than ".sizeof($operationHosts));
        }
        $operationHost = $operationHosts[$this->hostIndex];

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createNewNumber
     *
     * Create New Number
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  \Ringba\Model\CreateNewNumberRequest $createNewNumberRequest  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ringba\Model\CreateNewNumberNotTollFree|\Ringba\Model\CreateNewNumberfailedduetolackofinventory1
     */
    public function createNewNumber($accountId, $createNewNumberRequest, $authorization = null)
    {
        list($response) = $this->createNewNumberWithHttpInfo($accountId, $createNewNumberRequest, $authorization);
        return $response;
    }

    /**
     * Operation createNewNumberWithHttpInfo
     *
     * Create New Number
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  \Ringba\Model\CreateNewNumberRequest $createNewNumberRequest  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ringba\Model\CreateNewNumberNotTollFree|\Ringba\Model\CreateNewNumberfailedduetolackofinventory1, HTTP status code, HTTP response headers (array of strings)
     */
    public function createNewNumberWithHttpInfo($accountId, $createNewNumberRequest, $authorization = null)
    {
        $request = $this->createNewNumberRequest($accountId, $createNewNumberRequest, $authorization);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ringba\Model\CreateNewNumberNotTollFree' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ringba\Model\CreateNewNumberNotTollFree' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ringba\Model\CreateNewNumberNotTollFree', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Ringba\Model\CreateNewNumberfailedduetolackofinventory1' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ringba\Model\CreateNewNumberfailedduetolackofinventory1' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ringba\Model\CreateNewNumberfailedduetolackofinventory1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ringba\Model\CreateNewNumberNotTollFree';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ringba\Model\CreateNewNumberNotTollFree',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ringba\Model\CreateNewNumberfailedduetolackofinventory1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createNewNumberAsync
     *
     * Create New Number
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  \Ringba\Model\CreateNewNumberRequest $createNewNumberRequest  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNewNumberAsync($accountId, $createNewNumberRequest, $authorization = null)
    {
        return $this->createNewNumberAsyncWithHttpInfo($accountId, $createNewNumberRequest, $authorization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createNewNumberAsyncWithHttpInfo
     *
     * Create New Number
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  \Ringba\Model\CreateNewNumberRequest $createNewNumberRequest  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNewNumberAsyncWithHttpInfo($accountId, $createNewNumberRequest, $authorization = null)
    {
        $returnType = '\Ringba\Model\CreateNewNumberNotTollFree';
        $request = $this->createNewNumberRequest($accountId, $createNewNumberRequest, $authorization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createNewNumber'
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  \Ringba\Model\CreateNewNumberRequest $createNewNumberRequest  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createNewNumberRequest($accountId, $createNewNumberRequest, $authorization = null)
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling createNewNumber'
            );
        }
        // verify the required parameter 'createNewNumberRequest' is set
        if ($createNewNumberRequest === null || (is_array($createNewNumberRequest) && count($createNewNumberRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $createNewNumberRequest when calling createNewNumber'
            );
        }

        $resourcePath = '/{accountId}/numbers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json; charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json; charset=utf-8'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($createNewNumberRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($createNewNumberRequest));
            } else {
                $httpBody = $createNewNumberRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHosts = ["https://api.ringba.com/v2"];
        if ($this->hostIndex < 0 || $this->hostIndex >= sizeof($operationHosts)) {
            throw new \InvalidArgumentException("Invalid index {$this->hostIndex} when selecting the host. Must be less than ".sizeof($operationHosts));
        }
        $operationHost = $operationHosts[$this->hostIndex];

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteUnusedNumbersFromYourAccount
     *
     * Delete Unused Numbers From Your Account
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ringba\Model\DeleteUnusedNumbersFromYourAccount
     */
    public function deleteUnusedNumbersFromYourAccount($accountId, $authorization = null)
    {
        list($response) = $this->deleteUnusedNumbersFromYourAccountWithHttpInfo($accountId, $authorization);
        return $response;
    }

    /**
     * Operation deleteUnusedNumbersFromYourAccountWithHttpInfo
     *
     * Delete Unused Numbers From Your Account
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ringba\Model\DeleteUnusedNumbersFromYourAccount, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteUnusedNumbersFromYourAccountWithHttpInfo($accountId, $authorization = null)
    {
        $request = $this->deleteUnusedNumbersFromYourAccountRequest($accountId, $authorization);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ringba\Model\DeleteUnusedNumbersFromYourAccount' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ringba\Model\DeleteUnusedNumbersFromYourAccount' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ringba\Model\DeleteUnusedNumbersFromYourAccount', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ringba\Model\DeleteUnusedNumbersFromYourAccount';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ringba\Model\DeleteUnusedNumbersFromYourAccount',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteUnusedNumbersFromYourAccountAsync
     *
     * Delete Unused Numbers From Your Account
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteUnusedNumbersFromYourAccountAsync($accountId, $authorization = null)
    {
        return $this->deleteUnusedNumbersFromYourAccountAsyncWithHttpInfo($accountId, $authorization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteUnusedNumbersFromYourAccountAsyncWithHttpInfo
     *
     * Delete Unused Numbers From Your Account
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteUnusedNumbersFromYourAccountAsyncWithHttpInfo($accountId, $authorization = null)
    {
        $returnType = '\Ringba\Model\DeleteUnusedNumbersFromYourAccount';
        $request = $this->deleteUnusedNumbersFromYourAccountRequest($accountId, $authorization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteUnusedNumbersFromYourAccount'
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteUnusedNumbersFromYourAccountRequest($accountId, $authorization = null)
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling deleteUnusedNumbersFromYourAccount'
            );
        }

        $resourcePath = '/{accountId}/numbers/ReleaseNonUsedNumbers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json; charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json; charset=utf-8'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHosts = ["https://api.ringba.com/v2"];
        if ($this->hostIndex < 0 || $this->hostIndex >= sizeof($operationHosts)) {
            throw new \InvalidArgumentException("Invalid index {$this->hostIndex} when selecting the host. Must be less than ".sizeof($operationHosts));
        }
        $operationHost = $operationHosts[$this->hostIndex];

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteaNumberFromYourAccount
     *
     * Delete a Number From Your Account
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $numberId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ringba\Model\DeleteaNumberFromYourAccountfailedrequestTryingtodeleteanumberthatwasalreadydeleted1|\Ringba\Model\DeleteaNumberFromYourAccountwithunlinkqueryparameter|\Ringba\Model\DeleteaNumberFromYourAccountfailedbecausenumberislinkedtootherobjects1
     */
    public function deleteaNumberFromYourAccount($accountId, $numberId, $authorization = null)
    {
        list($response) = $this->deleteaNumberFromYourAccountWithHttpInfo($accountId, $numberId, $authorization);
        return $response;
    }

    /**
     * Operation deleteaNumberFromYourAccountWithHttpInfo
     *
     * Delete a Number From Your Account
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $numberId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ringba\Model\DeleteaNumberFromYourAccountfailedrequestTryingtodeleteanumberthatwasalreadydeleted1|\Ringba\Model\DeleteaNumberFromYourAccountwithunlinkqueryparameter|\Ringba\Model\DeleteaNumberFromYourAccountfailedbecausenumberislinkedtootherobjects1, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteaNumberFromYourAccountWithHttpInfo($accountId, $numberId, $authorization = null)
    {
        $request = $this->deleteaNumberFromYourAccountRequest($accountId, $numberId, $authorization);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 404:
                    if ('\Ringba\Model\DeleteaNumberFromYourAccountfailedrequestTryingtodeleteanumberthatwasalreadydeleted1' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ringba\Model\DeleteaNumberFromYourAccountfailedrequestTryingtodeleteanumberthatwasalreadydeleted1' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ringba\Model\DeleteaNumberFromYourAccountfailedrequestTryingtodeleteanumberthatwasalreadydeleted1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\Ringba\Model\DeleteaNumberFromYourAccountwithunlinkqueryparameter' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ringba\Model\DeleteaNumberFromYourAccountwithunlinkqueryparameter' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ringba\Model\DeleteaNumberFromYourAccountwithunlinkqueryparameter', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Ringba\Model\DeleteaNumberFromYourAccountfailedbecausenumberislinkedtootherobjects1' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ringba\Model\DeleteaNumberFromYourAccountfailedbecausenumberislinkedtootherobjects1' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ringba\Model\DeleteaNumberFromYourAccountfailedbecausenumberislinkedtootherobjects1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ringba\Model\DeleteaNumberFromYourAccountwithunlinkqueryparameter';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ringba\Model\DeleteaNumberFromYourAccountfailedrequestTryingtodeleteanumberthatwasalreadydeleted1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ringba\Model\DeleteaNumberFromYourAccountwithunlinkqueryparameter',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ringba\Model\DeleteaNumberFromYourAccountfailedbecausenumberislinkedtootherobjects1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteaNumberFromYourAccountAsync
     *
     * Delete a Number From Your Account
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $numberId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteaNumberFromYourAccountAsync($accountId, $numberId, $authorization = null)
    {
        return $this->deleteaNumberFromYourAccountAsyncWithHttpInfo($accountId, $numberId, $authorization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteaNumberFromYourAccountAsyncWithHttpInfo
     *
     * Delete a Number From Your Account
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $numberId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteaNumberFromYourAccountAsyncWithHttpInfo($accountId, $numberId, $authorization = null)
    {
        $returnType = '\Ringba\Model\DeleteaNumberFromYourAccountwithunlinkqueryparameter';
        $request = $this->deleteaNumberFromYourAccountRequest($accountId, $numberId, $authorization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteaNumberFromYourAccount'
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $numberId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteaNumberFromYourAccountRequest($accountId, $numberId, $authorization = null)
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling deleteaNumberFromYourAccount'
            );
        }
        // verify the required parameter 'numberId' is set
        if ($numberId === null || (is_array($numberId) && count($numberId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $numberId when calling deleteaNumberFromYourAccount'
            );
        }

        $resourcePath = '/{accountId}/numbers/{numberId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($numberId !== null) {
            $resourcePath = str_replace(
                '{' . 'numberId' . '}',
                ObjectSerializer::toPathValue($numberId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json; charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json; charset=utf-8'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHosts = ["https://api.ringba.com/v2"];
        if ($this->hostIndex < 0 || $this->hostIndex >= sizeof($operationHosts)) {
            throw new \InvalidArgumentException("Invalid index {$this->hostIndex} when selecting the host. Must be less than ".sizeof($operationHosts));
        }
        $operationHost = $operationHosts[$this->hostIndex];

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation editInformationAboutaNumber
     *
     * Edit Information About a Number
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  \Ringba\Model\EditInformationAboutaNumberRequest $editInformationAboutaNumberRequest  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ringba\Model\EditInformationAboutaNumber
     */
    public function editInformationAboutaNumber($accountId, $editInformationAboutaNumberRequest, $authorization = null)
    {
        list($response) = $this->editInformationAboutaNumberWithHttpInfo($accountId, $editInformationAboutaNumberRequest, $authorization);
        return $response;
    }

    /**
     * Operation editInformationAboutaNumberWithHttpInfo
     *
     * Edit Information About a Number
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  \Ringba\Model\EditInformationAboutaNumberRequest $editInformationAboutaNumberRequest  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ringba\Model\EditInformationAboutaNumber, HTTP status code, HTTP response headers (array of strings)
     */
    public function editInformationAboutaNumberWithHttpInfo($accountId, $editInformationAboutaNumberRequest, $authorization = null)
    {
        $request = $this->editInformationAboutaNumberRequest($accountId, $editInformationAboutaNumberRequest, $authorization);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ringba\Model\EditInformationAboutaNumber' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ringba\Model\EditInformationAboutaNumber' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ringba\Model\EditInformationAboutaNumber', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ringba\Model\EditInformationAboutaNumber';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ringba\Model\EditInformationAboutaNumber',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation editInformationAboutaNumberAsync
     *
     * Edit Information About a Number
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  \Ringba\Model\EditInformationAboutaNumberRequest $editInformationAboutaNumberRequest  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function editInformationAboutaNumberAsync($accountId, $editInformationAboutaNumberRequest, $authorization = null)
    {
        return $this->editInformationAboutaNumberAsyncWithHttpInfo($accountId, $editInformationAboutaNumberRequest, $authorization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation editInformationAboutaNumberAsyncWithHttpInfo
     *
     * Edit Information About a Number
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  \Ringba\Model\EditInformationAboutaNumberRequest $editInformationAboutaNumberRequest  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function editInformationAboutaNumberAsyncWithHttpInfo($accountId, $editInformationAboutaNumberRequest, $authorization = null)
    {
        $returnType = '\Ringba\Model\EditInformationAboutaNumber';
        $request = $this->editInformationAboutaNumberRequest($accountId, $editInformationAboutaNumberRequest, $authorization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'editInformationAboutaNumber'
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  \Ringba\Model\EditInformationAboutaNumberRequest $editInformationAboutaNumberRequest  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function editInformationAboutaNumberRequest($accountId, $editInformationAboutaNumberRequest, $authorization = null)
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling editInformationAboutaNumber'
            );
        }
        // verify the required parameter 'editInformationAboutaNumberRequest' is set
        if ($editInformationAboutaNumberRequest === null || (is_array($editInformationAboutaNumberRequest) && count($editInformationAboutaNumberRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $editInformationAboutaNumberRequest when calling editInformationAboutaNumber'
            );
        }

        $resourcePath = '/{accountId}/numbers/UCLTDOMQ';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json; charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json; charset=utf-8'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($editInformationAboutaNumberRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($editInformationAboutaNumberRequest));
            } else {
                $httpBody = $editInformationAboutaNumberRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHosts = ["https://api.ringba.com/v2"];
        if ($this->hostIndex < 0 || $this->hostIndex >= sizeof($operationHosts)) {
            throw new \InvalidArgumentException("Invalid index {$this->hostIndex} when selecting the host. Must be less than ".sizeof($operationHosts));
        }
        $operationHost = $operationHosts[$this->hostIndex];

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDetailsAboutaSpecificNumber
     *
     * Get Details About a Specific Number
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $numberId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ringba\Model\GetDetailsAboutaSpecificNumber
     */
    public function getDetailsAboutaSpecificNumber($accountId, $numberId, $authorization = null)
    {
        list($response) = $this->getDetailsAboutaSpecificNumberWithHttpInfo($accountId, $numberId, $authorization);
        return $response;
    }

    /**
     * Operation getDetailsAboutaSpecificNumberWithHttpInfo
     *
     * Get Details About a Specific Number
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $numberId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ringba\Model\GetDetailsAboutaSpecificNumber, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDetailsAboutaSpecificNumberWithHttpInfo($accountId, $numberId, $authorization = null)
    {
        $request = $this->getDetailsAboutaSpecificNumberRequest($accountId, $numberId, $authorization);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ringba\Model\GetDetailsAboutaSpecificNumber' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ringba\Model\GetDetailsAboutaSpecificNumber' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ringba\Model\GetDetailsAboutaSpecificNumber', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ringba\Model\GetDetailsAboutaSpecificNumber';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ringba\Model\GetDetailsAboutaSpecificNumber',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDetailsAboutaSpecificNumberAsync
     *
     * Get Details About a Specific Number
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $numberId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDetailsAboutaSpecificNumberAsync($accountId, $numberId, $authorization = null)
    {
        return $this->getDetailsAboutaSpecificNumberAsyncWithHttpInfo($accountId, $numberId, $authorization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDetailsAboutaSpecificNumberAsyncWithHttpInfo
     *
     * Get Details About a Specific Number
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $numberId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDetailsAboutaSpecificNumberAsyncWithHttpInfo($accountId, $numberId, $authorization = null)
    {
        $returnType = '\Ringba\Model\GetDetailsAboutaSpecificNumber';
        $request = $this->getDetailsAboutaSpecificNumberRequest($accountId, $numberId, $authorization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDetailsAboutaSpecificNumber'
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $numberId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDetailsAboutaSpecificNumberRequest($accountId, $numberId, $authorization = null)
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling getDetailsAboutaSpecificNumber'
            );
        }
        // verify the required parameter 'numberId' is set
        if ($numberId === null || (is_array($numberId) && count($numberId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $numberId when calling getDetailsAboutaSpecificNumber'
            );
        }

        $resourcePath = '/{accountId}/numbers/{numberId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($numberId !== null) {
            $resourcePath = str_replace(
                '{' . 'numberId' . '}',
                ObjectSerializer::toPathValue($numberId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json; charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json; charset=utf-8'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHosts = ["https://api.ringba.com/v2"];
        if ($this->hostIndex < 0 || $this->hostIndex >= sizeof($operationHosts)) {
            throw new \InvalidArgumentException("Invalid index {$this->hostIndex} when selecting the host. Must be less than ".sizeof($operationHosts));
        }
        $operationHost = $operationHosts[$this->hostIndex];

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getInboundReferencesforaSpecificNumber
     *
     * Get Inbound References for a Specific Number
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $numberId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ringba\Model\GetInboundReferencesforaSpecificNumberwithaJsTag
     */
    public function getInboundReferencesforaSpecificNumber($accountId, $numberId, $authorization = null)
    {
        list($response) = $this->getInboundReferencesforaSpecificNumberWithHttpInfo($accountId, $numberId, $authorization);
        return $response;
    }

    /**
     * Operation getInboundReferencesforaSpecificNumberWithHttpInfo
     *
     * Get Inbound References for a Specific Number
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $numberId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ringba\Model\GetInboundReferencesforaSpecificNumberwithaJsTag, HTTP status code, HTTP response headers (array of strings)
     */
    public function getInboundReferencesforaSpecificNumberWithHttpInfo($accountId, $numberId, $authorization = null)
    {
        $request = $this->getInboundReferencesforaSpecificNumberRequest($accountId, $numberId, $authorization);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ringba\Model\GetInboundReferencesforaSpecificNumberwithaJsTag' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ringba\Model\GetInboundReferencesforaSpecificNumberwithaJsTag' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ringba\Model\GetInboundReferencesforaSpecificNumberwithaJsTag', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ringba\Model\GetInboundReferencesforaSpecificNumberwithaJsTag';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ringba\Model\GetInboundReferencesforaSpecificNumberwithaJsTag',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getInboundReferencesforaSpecificNumberAsync
     *
     * Get Inbound References for a Specific Number
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $numberId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInboundReferencesforaSpecificNumberAsync($accountId, $numberId, $authorization = null)
    {
        return $this->getInboundReferencesforaSpecificNumberAsyncWithHttpInfo($accountId, $numberId, $authorization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getInboundReferencesforaSpecificNumberAsyncWithHttpInfo
     *
     * Get Inbound References for a Specific Number
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $numberId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInboundReferencesforaSpecificNumberAsyncWithHttpInfo($accountId, $numberId, $authorization = null)
    {
        $returnType = '\Ringba\Model\GetInboundReferencesforaSpecificNumberwithaJsTag';
        $request = $this->getInboundReferencesforaSpecificNumberRequest($accountId, $numberId, $authorization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getInboundReferencesforaSpecificNumber'
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $numberId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getInboundReferencesforaSpecificNumberRequest($accountId, $numberId, $authorization = null)
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling getInboundReferencesforaSpecificNumber'
            );
        }
        // verify the required parameter 'numberId' is set
        if ($numberId === null || (is_array($numberId) && count($numberId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $numberId when calling getInboundReferencesforaSpecificNumber'
            );
        }

        $resourcePath = '/{accountId}/numbers/{numberId}/InboundReferences';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($numberId !== null) {
            $resourcePath = str_replace(
                '{' . 'numberId' . '}',
                ObjectSerializer::toPathValue($numberId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json; charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json; charset=utf-8'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHosts = ["https://api.ringba.com/v2"];
        if ($this->hostIndex < 0 || $this->hostIndex >= sizeof($operationHosts)) {
            throw new \InvalidArgumentException("Invalid index {$this->hostIndex} when selecting the host. Must be less than ".sizeof($operationHosts));
        }
        $operationHost = $operationHosts[$this->hostIndex];

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNumbersAssociatedwithAccount
     *
     * Get Numbers Associated with Account
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ringba\Model\GetNumbersAssociatedwithAccount
     */
    public function getNumbersAssociatedwithAccount($accountId, $authorization = null)
    {
        list($response) = $this->getNumbersAssociatedwithAccountWithHttpInfo($accountId, $authorization);
        return $response;
    }

    /**
     * Operation getNumbersAssociatedwithAccountWithHttpInfo
     *
     * Get Numbers Associated with Account
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ringba\Model\GetNumbersAssociatedwithAccount, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNumbersAssociatedwithAccountWithHttpInfo($accountId, $authorization = null)
    {
        $request = $this->getNumbersAssociatedwithAccountRequest($accountId, $authorization);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ringba\Model\GetNumbersAssociatedwithAccount' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ringba\Model\GetNumbersAssociatedwithAccount' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ringba\Model\GetNumbersAssociatedwithAccount', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ringba\Model\GetNumbersAssociatedwithAccount';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ringba\Model\GetNumbersAssociatedwithAccount',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNumbersAssociatedwithAccountAsync
     *
     * Get Numbers Associated with Account
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNumbersAssociatedwithAccountAsync($accountId, $authorization = null)
    {
        return $this->getNumbersAssociatedwithAccountAsyncWithHttpInfo($accountId, $authorization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNumbersAssociatedwithAccountAsyncWithHttpInfo
     *
     * Get Numbers Associated with Account
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNumbersAssociatedwithAccountAsyncWithHttpInfo($accountId, $authorization = null)
    {
        $returnType = '\Ringba\Model\GetNumbersAssociatedwithAccount';
        $request = $this->getNumbersAssociatedwithAccountRequest($accountId, $authorization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNumbersAssociatedwithAccount'
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getNumbersAssociatedwithAccountRequest($accountId, $authorization = null)
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling getNumbersAssociatedwithAccount'
            );
        }

        $resourcePath = '/{accountId}/numbers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json; charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json; charset=utf-8'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHosts = ["https://api.ringba.com/v2"];
        if ($this->hostIndex < 0 || $this->hostIndex >= sizeof($operationHosts)) {
            throw new \InvalidArgumentException("Invalid index {$this->hostIndex} when selecting the host. Must be less than ".sizeof($operationHosts));
        }
        $operationHost = $operationHosts[$this->hostIndex];

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeaPublisherfromaNumber
     *
     * Remove a Publisher from a Number
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $numberId  (required)
     * @param  string $publisherId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ringba\Model\RemoveaPublisherfromaNumber
     */
    public function removeaPublisherfromaNumber($accountId, $numberId, $publisherId, $authorization = null)
    {
        list($response) = $this->removeaPublisherfromaNumberWithHttpInfo($accountId, $numberId, $publisherId, $authorization);
        return $response;
    }

    /**
     * Operation removeaPublisherfromaNumberWithHttpInfo
     *
     * Remove a Publisher from a Number
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $numberId  (required)
     * @param  string $publisherId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ringba\Model\RemoveaPublisherfromaNumber, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeaPublisherfromaNumberWithHttpInfo($accountId, $numberId, $publisherId, $authorization = null)
    {
        $request = $this->removeaPublisherfromaNumberRequest($accountId, $numberId, $publisherId, $authorization);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ringba\Model\RemoveaPublisherfromaNumber' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ringba\Model\RemoveaPublisherfromaNumber' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ringba\Model\RemoveaPublisherfromaNumber', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ringba\Model\RemoveaPublisherfromaNumber';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ringba\Model\RemoveaPublisherfromaNumber',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation removeaPublisherfromaNumberAsync
     *
     * Remove a Publisher from a Number
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $numberId  (required)
     * @param  string $publisherId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeaPublisherfromaNumberAsync($accountId, $numberId, $publisherId, $authorization = null)
    {
        return $this->removeaPublisherfromaNumberAsyncWithHttpInfo($accountId, $numberId, $publisherId, $authorization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation removeaPublisherfromaNumberAsyncWithHttpInfo
     *
     * Remove a Publisher from a Number
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $numberId  (required)
     * @param  string $publisherId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeaPublisherfromaNumberAsyncWithHttpInfo($accountId, $numberId, $publisherId, $authorization = null)
    {
        $returnType = '\Ringba\Model\RemoveaPublisherfromaNumber';
        $request = $this->removeaPublisherfromaNumberRequest($accountId, $numberId, $publisherId, $authorization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeaPublisherfromaNumber'
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $numberId  (required)
     * @param  string $publisherId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function removeaPublisherfromaNumberRequest($accountId, $numberId, $publisherId, $authorization = null)
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling removeaPublisherfromaNumber'
            );
        }
        // verify the required parameter 'numberId' is set
        if ($numberId === null || (is_array($numberId) && count($numberId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $numberId when calling removeaPublisherfromaNumber'
            );
        }
        // verify the required parameter 'publisherId' is set
        if ($publisherId === null || (is_array($publisherId) && count($publisherId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $publisherId when calling removeaPublisherfromaNumber'
            );
        }

        $resourcePath = '/{accountId}/numbers/{numberId}/Affiliate/{publisherId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($numberId !== null) {
            $resourcePath = str_replace(
                '{' . 'numberId' . '}',
                ObjectSerializer::toPathValue($numberId),
                $resourcePath
            );
        }
        // path params
        if ($publisherId !== null) {
            $resourcePath = str_replace(
                '{' . 'publisherId' . '}',
                ObjectSerializer::toPathValue($publisherId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json; charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json; charset=utf-8'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHosts = ["https://api.ringba.com/v2"];
        if ($this->hostIndex < 0 || $this->hostIndex >= sizeof($operationHosts)) {
            throw new \InvalidArgumentException("Invalid index {$this->hostIndex} when selecting the host. Must be less than ".sizeof($operationHosts));
        }
        $operationHost = $operationHosts[$this->hostIndex];

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
