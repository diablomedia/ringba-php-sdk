<?php
/**
 * BlockedNumbersApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Ringba
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ringba API Documentation
 *
 * Ringbaâ€™s APIs allow you to interact, gather information, and make dynamic changes in real-time. All functions found within the Ringba portal are also available programmatically through our API.   If this is your first time using our API, please read the __Getting Started__ section below.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Ringba\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Ringba\ApiException;
use Ringba\Configuration;
use Ringba\HeaderSelector;
use Ringba\ObjectSerializer;

/**
 * BlockedNumbersApi Class Doc Comment
 *
 * @category Class
 * @package  Ringba
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class BlockedNumbersApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation blockaPhoneNumber
     *
     * Block a Phone Number
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2/
     *
     * @param  string $accountId  (required)
     * @param  \Ringba\Model\BlockaPhoneNumberRequest $blockaPhoneNumberRequest  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ringba\Model\Blockanonymousnumbersfor8hoursinspecificcampaign
     */
    public function blockaPhoneNumber($accountId, $blockaPhoneNumberRequest, $authorization = null)
    {
        list($response) = $this->blockaPhoneNumberWithHttpInfo($accountId, $blockaPhoneNumberRequest, $authorization);
        return $response;
    }

    /**
     * Operation blockaPhoneNumberWithHttpInfo
     *
     * Block a Phone Number
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2/
     *
     * @param  string $accountId  (required)
     * @param  \Ringba\Model\BlockaPhoneNumberRequest $blockaPhoneNumberRequest  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ringba\Model\Blockanonymousnumbersfor8hoursinspecificcampaign, HTTP status code, HTTP response headers (array of strings)
     */
    public function blockaPhoneNumberWithHttpInfo($accountId, $blockaPhoneNumberRequest, $authorization = null)
    {
        $request = $this->blockaPhoneNumberRequest($accountId, $blockaPhoneNumberRequest, $authorization);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ringba\Model\Blockanonymousnumbersfor8hoursinspecificcampaign' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ringba\Model\Blockanonymousnumbersfor8hoursinspecificcampaign' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ringba\Model\Blockanonymousnumbersfor8hoursinspecificcampaign', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ringba\Model\Blockanonymousnumbersfor8hoursinspecificcampaign';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ringba\Model\Blockanonymousnumbersfor8hoursinspecificcampaign',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation blockaPhoneNumberAsync
     *
     * Block a Phone Number
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2/
     *
     * @param  string $accountId  (required)
     * @param  \Ringba\Model\BlockaPhoneNumberRequest $blockaPhoneNumberRequest  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function blockaPhoneNumberAsync($accountId, $blockaPhoneNumberRequest, $authorization = null)
    {
        return $this->blockaPhoneNumberAsyncWithHttpInfo($accountId, $blockaPhoneNumberRequest, $authorization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation blockaPhoneNumberAsyncWithHttpInfo
     *
     * Block a Phone Number
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2/
     *
     * @param  string $accountId  (required)
     * @param  \Ringba\Model\BlockaPhoneNumberRequest $blockaPhoneNumberRequest  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function blockaPhoneNumberAsyncWithHttpInfo($accountId, $blockaPhoneNumberRequest, $authorization = null)
    {
        $returnType = '\Ringba\Model\Blockanonymousnumbersfor8hoursinspecificcampaign';
        $request = $this->blockaPhoneNumberRequest($accountId, $blockaPhoneNumberRequest, $authorization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'blockaPhoneNumber'
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2/
     *
     * @param  string $accountId  (required)
     * @param  \Ringba\Model\BlockaPhoneNumberRequest $blockaPhoneNumberRequest  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function blockaPhoneNumberRequest($accountId, $blockaPhoneNumberRequest, $authorization = null)
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling blockaPhoneNumber'
            );
        }
        // verify the required parameter 'blockaPhoneNumberRequest' is set
        if ($blockaPhoneNumberRequest === null || (is_array($blockaPhoneNumberRequest) && count($blockaPhoneNumberRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $blockaPhoneNumberRequest when calling blockaPhoneNumber'
            );
        }

        $resourcePath = '/{accountId}/blockedNumbers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json; charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json; charset=utf-8'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($blockaPhoneNumberRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($blockaPhoneNumberRequest));
            } else {
                $httpBody = $blockaPhoneNumberRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHosts = ["https://api.ringba.com/v2/"];
        if ($this->hostIndex < 0 || $this->hostIndex >= sizeof($operationHosts)) {
            throw new \InvalidArgumentException("Invalid index {$this->hostIndex} when selecting the host. Must be less than ".sizeof($operationHosts));
        }
        $operationHost = $operationHosts[$this->hostIndex];

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBlockedPhoneNumbers
     *
     * Get Blocked Phone Numbers
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2/
     *
     * @param  string $accountId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ringba\Model\GetBlockedPhoneNumbers
     */
    public function getBlockedPhoneNumbers($accountId, $authorization = null)
    {
        list($response) = $this->getBlockedPhoneNumbersWithHttpInfo($accountId, $authorization);
        return $response;
    }

    /**
     * Operation getBlockedPhoneNumbersWithHttpInfo
     *
     * Get Blocked Phone Numbers
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2/
     *
     * @param  string $accountId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ringba\Model\GetBlockedPhoneNumbers, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBlockedPhoneNumbersWithHttpInfo($accountId, $authorization = null)
    {
        $request = $this->getBlockedPhoneNumbersRequest($accountId, $authorization);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ringba\Model\GetBlockedPhoneNumbers' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ringba\Model\GetBlockedPhoneNumbers' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ringba\Model\GetBlockedPhoneNumbers', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ringba\Model\GetBlockedPhoneNumbers';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ringba\Model\GetBlockedPhoneNumbers',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBlockedPhoneNumbersAsync
     *
     * Get Blocked Phone Numbers
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2/
     *
     * @param  string $accountId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBlockedPhoneNumbersAsync($accountId, $authorization = null)
    {
        return $this->getBlockedPhoneNumbersAsyncWithHttpInfo($accountId, $authorization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBlockedPhoneNumbersAsyncWithHttpInfo
     *
     * Get Blocked Phone Numbers
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2/
     *
     * @param  string $accountId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBlockedPhoneNumbersAsyncWithHttpInfo($accountId, $authorization = null)
    {
        $returnType = '\Ringba\Model\GetBlockedPhoneNumbers';
        $request = $this->getBlockedPhoneNumbersRequest($accountId, $authorization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBlockedPhoneNumbers'
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2/
     *
     * @param  string $accountId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getBlockedPhoneNumbersRequest($accountId, $authorization = null)
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling getBlockedPhoneNumbers'
            );
        }

        $resourcePath = '/{accountId}/blockedNumbers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json; charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json; charset=utf-8'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHosts = ["https://api.ringba.com/v2/"];
        if ($this->hostIndex < 0 || $this->hostIndex >= sizeof($operationHosts)) {
            throw new \InvalidArgumentException("Invalid index {$this->hostIndex} when selecting the host. Must be less than ".sizeof($operationHosts));
        }
        $operationHost = $operationHosts[$this->hostIndex];

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDetailsAboutaSingleBlockedNumber
     *
     * Get Details About a Single Blocked Number
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2/
     *
     * @param  string $accountId  (required)
     * @param  string $blockedNumberId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ringba\Model\GetDetailsAboutaSingleBlockedNumber
     */
    public function getDetailsAboutaSingleBlockedNumber($accountId, $blockedNumberId, $authorization = null)
    {
        list($response) = $this->getDetailsAboutaSingleBlockedNumberWithHttpInfo($accountId, $blockedNumberId, $authorization);
        return $response;
    }

    /**
     * Operation getDetailsAboutaSingleBlockedNumberWithHttpInfo
     *
     * Get Details About a Single Blocked Number
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2/
     *
     * @param  string $accountId  (required)
     * @param  string $blockedNumberId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ringba\Model\GetDetailsAboutaSingleBlockedNumber, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDetailsAboutaSingleBlockedNumberWithHttpInfo($accountId, $blockedNumberId, $authorization = null)
    {
        $request = $this->getDetailsAboutaSingleBlockedNumberRequest($accountId, $blockedNumberId, $authorization);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ringba\Model\GetDetailsAboutaSingleBlockedNumber' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ringba\Model\GetDetailsAboutaSingleBlockedNumber' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ringba\Model\GetDetailsAboutaSingleBlockedNumber', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ringba\Model\GetDetailsAboutaSingleBlockedNumber';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ringba\Model\GetDetailsAboutaSingleBlockedNumber',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDetailsAboutaSingleBlockedNumberAsync
     *
     * Get Details About a Single Blocked Number
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2/
     *
     * @param  string $accountId  (required)
     * @param  string $blockedNumberId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDetailsAboutaSingleBlockedNumberAsync($accountId, $blockedNumberId, $authorization = null)
    {
        return $this->getDetailsAboutaSingleBlockedNumberAsyncWithHttpInfo($accountId, $blockedNumberId, $authorization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDetailsAboutaSingleBlockedNumberAsyncWithHttpInfo
     *
     * Get Details About a Single Blocked Number
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2/
     *
     * @param  string $accountId  (required)
     * @param  string $blockedNumberId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDetailsAboutaSingleBlockedNumberAsyncWithHttpInfo($accountId, $blockedNumberId, $authorization = null)
    {
        $returnType = '\Ringba\Model\GetDetailsAboutaSingleBlockedNumber';
        $request = $this->getDetailsAboutaSingleBlockedNumberRequest($accountId, $blockedNumberId, $authorization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDetailsAboutaSingleBlockedNumber'
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2/
     *
     * @param  string $accountId  (required)
     * @param  string $blockedNumberId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDetailsAboutaSingleBlockedNumberRequest($accountId, $blockedNumberId, $authorization = null)
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling getDetailsAboutaSingleBlockedNumber'
            );
        }
        // verify the required parameter 'blockedNumberId' is set
        if ($blockedNumberId === null || (is_array($blockedNumberId) && count($blockedNumberId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $blockedNumberId when calling getDetailsAboutaSingleBlockedNumber'
            );
        }

        $resourcePath = '/{accountId}/blockedNumbers/{blockedNumberId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($blockedNumberId !== null) {
            $resourcePath = str_replace(
                '{' . 'blockedNumberId' . '}',
                ObjectSerializer::toPathValue($blockedNumberId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json; charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json; charset=utf-8'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHosts = ["https://api.ringba.com/v2/"];
        if ($this->hostIndex < 0 || $this->hostIndex >= sizeof($operationHosts)) {
            throw new \InvalidArgumentException("Invalid index {$this->hostIndex} when selecting the host. Must be less than ".sizeof($operationHosts));
        }
        $operationHost = $operationHosts[$this->hostIndex];

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation unblockaPhoneNumber
     *
     * Unblock a Phone Number
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2/
     *
     * @param  string $accountId  (required)
     * @param  string $blockedNumberId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ringba\Model\UnblockaPhoneNumber
     */
    public function unblockaPhoneNumber($accountId, $blockedNumberId, $authorization = null)
    {
        list($response) = $this->unblockaPhoneNumberWithHttpInfo($accountId, $blockedNumberId, $authorization);
        return $response;
    }

    /**
     * Operation unblockaPhoneNumberWithHttpInfo
     *
     * Unblock a Phone Number
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2/
     *
     * @param  string $accountId  (required)
     * @param  string $blockedNumberId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ringba\Model\UnblockaPhoneNumber, HTTP status code, HTTP response headers (array of strings)
     */
    public function unblockaPhoneNumberWithHttpInfo($accountId, $blockedNumberId, $authorization = null)
    {
        $request = $this->unblockaPhoneNumberRequest($accountId, $blockedNumberId, $authorization);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ringba\Model\UnblockaPhoneNumber' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ringba\Model\UnblockaPhoneNumber' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ringba\Model\UnblockaPhoneNumber', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ringba\Model\UnblockaPhoneNumber';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ringba\Model\UnblockaPhoneNumber',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation unblockaPhoneNumberAsync
     *
     * Unblock a Phone Number
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2/
     *
     * @param  string $accountId  (required)
     * @param  string $blockedNumberId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function unblockaPhoneNumberAsync($accountId, $blockedNumberId, $authorization = null)
    {
        return $this->unblockaPhoneNumberAsyncWithHttpInfo($accountId, $blockedNumberId, $authorization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation unblockaPhoneNumberAsyncWithHttpInfo
     *
     * Unblock a Phone Number
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2/
     *
     * @param  string $accountId  (required)
     * @param  string $blockedNumberId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function unblockaPhoneNumberAsyncWithHttpInfo($accountId, $blockedNumberId, $authorization = null)
    {
        $returnType = '\Ringba\Model\UnblockaPhoneNumber';
        $request = $this->unblockaPhoneNumberRequest($accountId, $blockedNumberId, $authorization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'unblockaPhoneNumber'
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2/
     *
     * @param  string $accountId  (required)
     * @param  string $blockedNumberId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function unblockaPhoneNumberRequest($accountId, $blockedNumberId, $authorization = null)
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling unblockaPhoneNumber'
            );
        }
        // verify the required parameter 'blockedNumberId' is set
        if ($blockedNumberId === null || (is_array($blockedNumberId) && count($blockedNumberId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $blockedNumberId when calling unblockaPhoneNumber'
            );
        }

        $resourcePath = '/{accountId}/blockedNumbers/{blockedNumberId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($blockedNumberId !== null) {
            $resourcePath = str_replace(
                '{' . 'blockedNumberId' . '}',
                ObjectSerializer::toPathValue($blockedNumberId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json; charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json; charset=utf-8'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHosts = ["https://api.ringba.com/v2/"];
        if ($this->hostIndex < 0 || $this->hostIndex >= sizeof($operationHosts)) {
            throw new \InvalidArgumentException("Invalid index {$this->hostIndex} when selecting the host. Must be less than ".sizeof($operationHosts));
        }
        $operationHost = $operationHosts[$this->hostIndex];

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateaBlockedPhoneNumber
     *
     * Update a Blocked Phone Number
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2/
     *
     * @param  string $accountId  (required)
     * @param  string $blockedNumberId  (required)
     * @param  \Ringba\Model\UpdateaBlockedPhoneNumberRequest $updateaBlockedPhoneNumberRequest  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ringba\Model\UpdateaBlockedPhoneNumber
     */
    public function updateaBlockedPhoneNumber($accountId, $blockedNumberId, $updateaBlockedPhoneNumberRequest, $authorization = null)
    {
        list($response) = $this->updateaBlockedPhoneNumberWithHttpInfo($accountId, $blockedNumberId, $updateaBlockedPhoneNumberRequest, $authorization);
        return $response;
    }

    /**
     * Operation updateaBlockedPhoneNumberWithHttpInfo
     *
     * Update a Blocked Phone Number
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2/
     *
     * @param  string $accountId  (required)
     * @param  string $blockedNumberId  (required)
     * @param  \Ringba\Model\UpdateaBlockedPhoneNumberRequest $updateaBlockedPhoneNumberRequest  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ringba\Model\UpdateaBlockedPhoneNumber, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateaBlockedPhoneNumberWithHttpInfo($accountId, $blockedNumberId, $updateaBlockedPhoneNumberRequest, $authorization = null)
    {
        $request = $this->updateaBlockedPhoneNumberRequest($accountId, $blockedNumberId, $updateaBlockedPhoneNumberRequest, $authorization);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ringba\Model\UpdateaBlockedPhoneNumber' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ringba\Model\UpdateaBlockedPhoneNumber' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ringba\Model\UpdateaBlockedPhoneNumber', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ringba\Model\UpdateaBlockedPhoneNumber';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ringba\Model\UpdateaBlockedPhoneNumber',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateaBlockedPhoneNumberAsync
     *
     * Update a Blocked Phone Number
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2/
     *
     * @param  string $accountId  (required)
     * @param  string $blockedNumberId  (required)
     * @param  \Ringba\Model\UpdateaBlockedPhoneNumberRequest $updateaBlockedPhoneNumberRequest  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateaBlockedPhoneNumberAsync($accountId, $blockedNumberId, $updateaBlockedPhoneNumberRequest, $authorization = null)
    {
        return $this->updateaBlockedPhoneNumberAsyncWithHttpInfo($accountId, $blockedNumberId, $updateaBlockedPhoneNumberRequest, $authorization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateaBlockedPhoneNumberAsyncWithHttpInfo
     *
     * Update a Blocked Phone Number
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2/
     *
     * @param  string $accountId  (required)
     * @param  string $blockedNumberId  (required)
     * @param  \Ringba\Model\UpdateaBlockedPhoneNumberRequest $updateaBlockedPhoneNumberRequest  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateaBlockedPhoneNumberAsyncWithHttpInfo($accountId, $blockedNumberId, $updateaBlockedPhoneNumberRequest, $authorization = null)
    {
        $returnType = '\Ringba\Model\UpdateaBlockedPhoneNumber';
        $request = $this->updateaBlockedPhoneNumberRequest($accountId, $blockedNumberId, $updateaBlockedPhoneNumberRequest, $authorization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateaBlockedPhoneNumber'
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2/
     *
     * @param  string $accountId  (required)
     * @param  string $blockedNumberId  (required)
     * @param  \Ringba\Model\UpdateaBlockedPhoneNumberRequest $updateaBlockedPhoneNumberRequest  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateaBlockedPhoneNumberRequest($accountId, $blockedNumberId, $updateaBlockedPhoneNumberRequest, $authorization = null)
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling updateaBlockedPhoneNumber'
            );
        }
        // verify the required parameter 'blockedNumberId' is set
        if ($blockedNumberId === null || (is_array($blockedNumberId) && count($blockedNumberId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $blockedNumberId when calling updateaBlockedPhoneNumber'
            );
        }
        // verify the required parameter 'updateaBlockedPhoneNumberRequest' is set
        if ($updateaBlockedPhoneNumberRequest === null || (is_array($updateaBlockedPhoneNumberRequest) && count($updateaBlockedPhoneNumberRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $updateaBlockedPhoneNumberRequest when calling updateaBlockedPhoneNumber'
            );
        }

        $resourcePath = '/{accountId}/blockedNumbers/{blockedNumberId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($blockedNumberId !== null) {
            $resourcePath = str_replace(
                '{' . 'blockedNumberId' . '}',
                ObjectSerializer::toPathValue($blockedNumberId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json; charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json; charset=utf-8'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($updateaBlockedPhoneNumberRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($updateaBlockedPhoneNumberRequest));
            } else {
                $httpBody = $updateaBlockedPhoneNumberRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHosts = ["https://api.ringba.com/v2/"];
        if ($this->hostIndex < 0 || $this->hostIndex >= sizeof($operationHosts)) {
            throw new \InvalidArgumentException("Invalid index {$this->hostIndex} when selecting the host. Must be less than ".sizeof($operationHosts));
        }
        $operationHost = $operationHosts[$this->hostIndex];

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
