<?php
/**
 * TargetGroupsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Ringba
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ringba API Documentation
 *
 * Ringbaâ€™s APIs allow you to interact, gather information, and make dynamic changes in real-time. All functions found within the Ringba portal are also available programmatically through our API.   If this is your first time using our API, please read the __Getting Started__ section below.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Ringba\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Ringba\ApiException;
use Ringba\Configuration;
use Ringba\HeaderSelector;
use Ringba\ObjectSerializer;

/**
 * TargetGroupsApi Class Doc Comment
 *
 * @category Class
 * @package  Ringba
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TargetGroupsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addRemoveMultipleTargetstoFromTargetGroup
     *
     * Add/Remove Multiple Targets to/from Target Group
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $targetGroupId  (required)
     * @param  \Ringba\Model\AddRemoveMultipleTargetstofromTargetGroupRequest $addRemoveMultipleTargetstofromTargetGroupRequest  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ringba\Model\RemoveMultipleTargetsfromTargetGroup
     */
    public function addRemoveMultipleTargetstoFromTargetGroup($accountId, $targetGroupId, $addRemoveMultipleTargetstofromTargetGroupRequest, $authorization = null)
    {
        list($response) = $this->addRemoveMultipleTargetstoFromTargetGroupWithHttpInfo($accountId, $targetGroupId, $addRemoveMultipleTargetstofromTargetGroupRequest, $authorization);
        return $response;
    }

    /**
     * Operation addRemoveMultipleTargetstoFromTargetGroupWithHttpInfo
     *
     * Add/Remove Multiple Targets to/from Target Group
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $targetGroupId  (required)
     * @param  \Ringba\Model\AddRemoveMultipleTargetstofromTargetGroupRequest $addRemoveMultipleTargetstofromTargetGroupRequest  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ringba\Model\RemoveMultipleTargetsfromTargetGroup, HTTP status code, HTTP response headers (array of strings)
     */
    public function addRemoveMultipleTargetstoFromTargetGroupWithHttpInfo($accountId, $targetGroupId, $addRemoveMultipleTargetstofromTargetGroupRequest, $authorization = null)
    {
        $request = $this->addRemoveMultipleTargetstoFromTargetGroupRequest($accountId, $targetGroupId, $addRemoveMultipleTargetstofromTargetGroupRequest, $authorization);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ringba\Model\RemoveMultipleTargetsfromTargetGroup' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ringba\Model\RemoveMultipleTargetsfromTargetGroup' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ringba\Model\RemoveMultipleTargetsfromTargetGroup', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ringba\Model\RemoveMultipleTargetsfromTargetGroup';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ringba\Model\RemoveMultipleTargetsfromTargetGroup',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addRemoveMultipleTargetstoFromTargetGroupAsync
     *
     * Add/Remove Multiple Targets to/from Target Group
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $targetGroupId  (required)
     * @param  \Ringba\Model\AddRemoveMultipleTargetstofromTargetGroupRequest $addRemoveMultipleTargetstofromTargetGroupRequest  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addRemoveMultipleTargetstoFromTargetGroupAsync($accountId, $targetGroupId, $addRemoveMultipleTargetstofromTargetGroupRequest, $authorization = null)
    {
        return $this->addRemoveMultipleTargetstoFromTargetGroupAsyncWithHttpInfo($accountId, $targetGroupId, $addRemoveMultipleTargetstofromTargetGroupRequest, $authorization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addRemoveMultipleTargetstoFromTargetGroupAsyncWithHttpInfo
     *
     * Add/Remove Multiple Targets to/from Target Group
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $targetGroupId  (required)
     * @param  \Ringba\Model\AddRemoveMultipleTargetstofromTargetGroupRequest $addRemoveMultipleTargetstofromTargetGroupRequest  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addRemoveMultipleTargetstoFromTargetGroupAsyncWithHttpInfo($accountId, $targetGroupId, $addRemoveMultipleTargetstofromTargetGroupRequest, $authorization = null)
    {
        $returnType = '\Ringba\Model\RemoveMultipleTargetsfromTargetGroup';
        $request = $this->addRemoveMultipleTargetstoFromTargetGroupRequest($accountId, $targetGroupId, $addRemoveMultipleTargetstofromTargetGroupRequest, $authorization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addRemoveMultipleTargetstoFromTargetGroup'
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $targetGroupId  (required)
     * @param  \Ringba\Model\AddRemoveMultipleTargetstofromTargetGroupRequest $addRemoveMultipleTargetstofromTargetGroupRequest  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addRemoveMultipleTargetstoFromTargetGroupRequest($accountId, $targetGroupId, $addRemoveMultipleTargetstofromTargetGroupRequest, $authorization = null)
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling addRemoveMultipleTargetstoFromTargetGroup'
            );
        }
        // verify the required parameter 'targetGroupId' is set
        if ($targetGroupId === null || (is_array($targetGroupId) && count($targetGroupId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $targetGroupId when calling addRemoveMultipleTargetstoFromTargetGroup'
            );
        }
        // verify the required parameter 'addRemoveMultipleTargetstofromTargetGroupRequest' is set
        if ($addRemoveMultipleTargetstofromTargetGroupRequest === null || (is_array($addRemoveMultipleTargetstofromTargetGroupRequest) && count($addRemoveMultipleTargetstofromTargetGroupRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $addRemoveMultipleTargetstofromTargetGroupRequest when calling addRemoveMultipleTargetstoFromTargetGroup'
            );
        }

        $resourcePath = '/{accountId}/targetgroups/{targetGroupId}/targets/bulkUpdate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($targetGroupId !== null) {
            $resourcePath = str_replace(
                '{' . 'targetGroupId' . '}',
                ObjectSerializer::toPathValue($targetGroupId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json; charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json; charset=utf-8'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($addRemoveMultipleTargetstofromTargetGroupRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($addRemoveMultipleTargetstofromTargetGroupRequest));
            } else {
                $httpBody = $addRemoveMultipleTargetstofromTargetGroupRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHosts = ["https://api.ringba.com/v2"];
        if ($this->hostIndex < 0 || $this->hostIndex >= sizeof($operationHosts)) {
            throw new \InvalidArgumentException("Invalid index {$this->hostIndex} when selecting the host. Must be less than ".sizeof($operationHosts));
        }
        $operationHost = $operationHosts[$this->hostIndex];

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addSingleTargettoTargetGroup
     *
     * Add Single Target to Target Group
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $targetGroupId  (required)
     * @param  \Ringba\Model\AddSingleTargettoTargetGroupRequest $addSingleTargettoTargetGroupRequest  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ringba\Model\AddSingleTargettoTargetGroup
     */
    public function addSingleTargettoTargetGroup($accountId, $targetGroupId, $addSingleTargettoTargetGroupRequest, $authorization = null)
    {
        list($response) = $this->addSingleTargettoTargetGroupWithHttpInfo($accountId, $targetGroupId, $addSingleTargettoTargetGroupRequest, $authorization);
        return $response;
    }

    /**
     * Operation addSingleTargettoTargetGroupWithHttpInfo
     *
     * Add Single Target to Target Group
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $targetGroupId  (required)
     * @param  \Ringba\Model\AddSingleTargettoTargetGroupRequest $addSingleTargettoTargetGroupRequest  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ringba\Model\AddSingleTargettoTargetGroup, HTTP status code, HTTP response headers (array of strings)
     */
    public function addSingleTargettoTargetGroupWithHttpInfo($accountId, $targetGroupId, $addSingleTargettoTargetGroupRequest, $authorization = null)
    {
        $request = $this->addSingleTargettoTargetGroupRequest($accountId, $targetGroupId, $addSingleTargettoTargetGroupRequest, $authorization);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ringba\Model\AddSingleTargettoTargetGroup' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ringba\Model\AddSingleTargettoTargetGroup' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ringba\Model\AddSingleTargettoTargetGroup', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ringba\Model\AddSingleTargettoTargetGroup';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ringba\Model\AddSingleTargettoTargetGroup',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addSingleTargettoTargetGroupAsync
     *
     * Add Single Target to Target Group
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $targetGroupId  (required)
     * @param  \Ringba\Model\AddSingleTargettoTargetGroupRequest $addSingleTargettoTargetGroupRequest  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addSingleTargettoTargetGroupAsync($accountId, $targetGroupId, $addSingleTargettoTargetGroupRequest, $authorization = null)
    {
        return $this->addSingleTargettoTargetGroupAsyncWithHttpInfo($accountId, $targetGroupId, $addSingleTargettoTargetGroupRequest, $authorization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addSingleTargettoTargetGroupAsyncWithHttpInfo
     *
     * Add Single Target to Target Group
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $targetGroupId  (required)
     * @param  \Ringba\Model\AddSingleTargettoTargetGroupRequest $addSingleTargettoTargetGroupRequest  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addSingleTargettoTargetGroupAsyncWithHttpInfo($accountId, $targetGroupId, $addSingleTargettoTargetGroupRequest, $authorization = null)
    {
        $returnType = '\Ringba\Model\AddSingleTargettoTargetGroup';
        $request = $this->addSingleTargettoTargetGroupRequest($accountId, $targetGroupId, $addSingleTargettoTargetGroupRequest, $authorization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addSingleTargettoTargetGroup'
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $targetGroupId  (required)
     * @param  \Ringba\Model\AddSingleTargettoTargetGroupRequest $addSingleTargettoTargetGroupRequest  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addSingleTargettoTargetGroupRequest($accountId, $targetGroupId, $addSingleTargettoTargetGroupRequest, $authorization = null)
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling addSingleTargettoTargetGroup'
            );
        }
        // verify the required parameter 'targetGroupId' is set
        if ($targetGroupId === null || (is_array($targetGroupId) && count($targetGroupId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $targetGroupId when calling addSingleTargettoTargetGroup'
            );
        }
        // verify the required parameter 'addSingleTargettoTargetGroupRequest' is set
        if ($addSingleTargettoTargetGroupRequest === null || (is_array($addSingleTargettoTargetGroupRequest) && count($addSingleTargettoTargetGroupRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $addSingleTargettoTargetGroupRequest when calling addSingleTargettoTargetGroup'
            );
        }

        $resourcePath = '/{accountId}/TargetGroups/{targetGroupId}/Targets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($targetGroupId !== null) {
            $resourcePath = str_replace(
                '{' . 'targetGroupId' . '}',
                ObjectSerializer::toPathValue($targetGroupId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json; charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json; charset=utf-8'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($addSingleTargettoTargetGroupRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($addSingleTargettoTargetGroupRequest));
            } else {
                $httpBody = $addSingleTargettoTargetGroupRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHosts = ["https://api.ringba.com/v2"];
        if ($this->hostIndex < 0 || $this->hostIndex >= sizeof($operationHosts)) {
            throw new \InvalidArgumentException("Invalid index {$this->hostIndex} when selecting the host. Must be less than ".sizeof($operationHosts));
        }
        $operationHost = $operationHosts[$this->hostIndex];

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation assignTargetGrouptoaBuyer
     *
     * Assign Target Group to a Buyer
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $targetGroupId  (required)
     * @param  \Ringba\Model\AssignTargetGrouptoaBuyerRequest $assignTargetGrouptoaBuyerRequest  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ringba\Model\AddBuyertoTargetGroup
     */
    public function assignTargetGrouptoaBuyer($accountId, $targetGroupId, $assignTargetGrouptoaBuyerRequest, $authorization = null)
    {
        list($response) = $this->assignTargetGrouptoaBuyerWithHttpInfo($accountId, $targetGroupId, $assignTargetGrouptoaBuyerRequest, $authorization);
        return $response;
    }

    /**
     * Operation assignTargetGrouptoaBuyerWithHttpInfo
     *
     * Assign Target Group to a Buyer
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $targetGroupId  (required)
     * @param  \Ringba\Model\AssignTargetGrouptoaBuyerRequest $assignTargetGrouptoaBuyerRequest  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ringba\Model\AddBuyertoTargetGroup, HTTP status code, HTTP response headers (array of strings)
     */
    public function assignTargetGrouptoaBuyerWithHttpInfo($accountId, $targetGroupId, $assignTargetGrouptoaBuyerRequest, $authorization = null)
    {
        $request = $this->assignTargetGrouptoaBuyerRequest($accountId, $targetGroupId, $assignTargetGrouptoaBuyerRequest, $authorization);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ringba\Model\AddBuyertoTargetGroup' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ringba\Model\AddBuyertoTargetGroup' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ringba\Model\AddBuyertoTargetGroup', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ringba\Model\AddBuyertoTargetGroup';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ringba\Model\AddBuyertoTargetGroup',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation assignTargetGrouptoaBuyerAsync
     *
     * Assign Target Group to a Buyer
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $targetGroupId  (required)
     * @param  \Ringba\Model\AssignTargetGrouptoaBuyerRequest $assignTargetGrouptoaBuyerRequest  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assignTargetGrouptoaBuyerAsync($accountId, $targetGroupId, $assignTargetGrouptoaBuyerRequest, $authorization = null)
    {
        return $this->assignTargetGrouptoaBuyerAsyncWithHttpInfo($accountId, $targetGroupId, $assignTargetGrouptoaBuyerRequest, $authorization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation assignTargetGrouptoaBuyerAsyncWithHttpInfo
     *
     * Assign Target Group to a Buyer
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $targetGroupId  (required)
     * @param  \Ringba\Model\AssignTargetGrouptoaBuyerRequest $assignTargetGrouptoaBuyerRequest  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assignTargetGrouptoaBuyerAsyncWithHttpInfo($accountId, $targetGroupId, $assignTargetGrouptoaBuyerRequest, $authorization = null)
    {
        $returnType = '\Ringba\Model\AddBuyertoTargetGroup';
        $request = $this->assignTargetGrouptoaBuyerRequest($accountId, $targetGroupId, $assignTargetGrouptoaBuyerRequest, $authorization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'assignTargetGrouptoaBuyer'
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $targetGroupId  (required)
     * @param  \Ringba\Model\AssignTargetGrouptoaBuyerRequest $assignTargetGrouptoaBuyerRequest  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function assignTargetGrouptoaBuyerRequest($accountId, $targetGroupId, $assignTargetGrouptoaBuyerRequest, $authorization = null)
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling assignTargetGrouptoaBuyer'
            );
        }
        // verify the required parameter 'targetGroupId' is set
        if ($targetGroupId === null || (is_array($targetGroupId) && count($targetGroupId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $targetGroupId when calling assignTargetGrouptoaBuyer'
            );
        }
        // verify the required parameter 'assignTargetGrouptoaBuyerRequest' is set
        if ($assignTargetGrouptoaBuyerRequest === null || (is_array($assignTargetGrouptoaBuyerRequest) && count($assignTargetGrouptoaBuyerRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $assignTargetGrouptoaBuyerRequest when calling assignTargetGrouptoaBuyer'
            );
        }

        $resourcePath = '/{accountId}/TargetGroups/{targetGroupId}/Buyer';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($targetGroupId !== null) {
            $resourcePath = str_replace(
                '{' . 'targetGroupId' . '}',
                ObjectSerializer::toPathValue($targetGroupId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json; charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json; charset=utf-8'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($assignTargetGrouptoaBuyerRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($assignTargetGrouptoaBuyerRequest));
            } else {
                $httpBody = $assignTargetGrouptoaBuyerRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHosts = ["https://api.ringba.com/v2"];
        if ($this->hostIndex < 0 || $this->hostIndex >= sizeof($operationHosts)) {
            throw new \InvalidArgumentException("Invalid index {$this->hostIndex} when selecting the host. Must be less than ".sizeof($operationHosts));
        }
        $operationHost = $operationHosts[$this->hostIndex];

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createTargetGroup
     *
     * Create Target Group
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  \Ringba\Model\CreateTargetGroupRequest $createTargetGroupRequest  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ringba\Model\CreateTargetGroup
     */
    public function createTargetGroup($accountId, $createTargetGroupRequest, $authorization = null)
    {
        list($response) = $this->createTargetGroupWithHttpInfo($accountId, $createTargetGroupRequest, $authorization);
        return $response;
    }

    /**
     * Operation createTargetGroupWithHttpInfo
     *
     * Create Target Group
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  \Ringba\Model\CreateTargetGroupRequest $createTargetGroupRequest  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ringba\Model\CreateTargetGroup, HTTP status code, HTTP response headers (array of strings)
     */
    public function createTargetGroupWithHttpInfo($accountId, $createTargetGroupRequest, $authorization = null)
    {
        $request = $this->createTargetGroupRequest($accountId, $createTargetGroupRequest, $authorization);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ringba\Model\CreateTargetGroup' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ringba\Model\CreateTargetGroup' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ringba\Model\CreateTargetGroup', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ringba\Model\CreateTargetGroup';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ringba\Model\CreateTargetGroup',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createTargetGroupAsync
     *
     * Create Target Group
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  \Ringba\Model\CreateTargetGroupRequest $createTargetGroupRequest  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createTargetGroupAsync($accountId, $createTargetGroupRequest, $authorization = null)
    {
        return $this->createTargetGroupAsyncWithHttpInfo($accountId, $createTargetGroupRequest, $authorization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createTargetGroupAsyncWithHttpInfo
     *
     * Create Target Group
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  \Ringba\Model\CreateTargetGroupRequest $createTargetGroupRequest  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createTargetGroupAsyncWithHttpInfo($accountId, $createTargetGroupRequest, $authorization = null)
    {
        $returnType = '\Ringba\Model\CreateTargetGroup';
        $request = $this->createTargetGroupRequest($accountId, $createTargetGroupRequest, $authorization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createTargetGroup'
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  \Ringba\Model\CreateTargetGroupRequest $createTargetGroupRequest  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createTargetGroupRequest($accountId, $createTargetGroupRequest, $authorization = null)
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling createTargetGroup'
            );
        }
        // verify the required parameter 'createTargetGroupRequest' is set
        if ($createTargetGroupRequest === null || (is_array($createTargetGroupRequest) && count($createTargetGroupRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $createTargetGroupRequest when calling createTargetGroup'
            );
        }

        $resourcePath = '/{accountId}/targetgroups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json; charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json; charset=utf-8'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($createTargetGroupRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($createTargetGroupRequest));
            } else {
                $httpBody = $createTargetGroupRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHosts = ["https://api.ringba.com/v2"];
        if ($this->hostIndex < 0 || $this->hostIndex >= sizeof($operationHosts)) {
            throw new \InvalidArgumentException("Invalid index {$this->hostIndex} when selecting the host. Must be less than ".sizeof($operationHosts));
        }
        $operationHost = $operationHosts[$this->hostIndex];

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteSingleTargetfromTargetGroup
     *
     * Delete Single Target from Target Group
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $targetGroupId  (required)
     * @param  string $targetId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ringba\Model\DeleteSingleTargetfromTargetGroup
     */
    public function deleteSingleTargetfromTargetGroup($accountId, $targetGroupId, $targetId, $authorization = null)
    {
        list($response) = $this->deleteSingleTargetfromTargetGroupWithHttpInfo($accountId, $targetGroupId, $targetId, $authorization);
        return $response;
    }

    /**
     * Operation deleteSingleTargetfromTargetGroupWithHttpInfo
     *
     * Delete Single Target from Target Group
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $targetGroupId  (required)
     * @param  string $targetId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ringba\Model\DeleteSingleTargetfromTargetGroup, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteSingleTargetfromTargetGroupWithHttpInfo($accountId, $targetGroupId, $targetId, $authorization = null)
    {
        $request = $this->deleteSingleTargetfromTargetGroupRequest($accountId, $targetGroupId, $targetId, $authorization);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ringba\Model\DeleteSingleTargetfromTargetGroup' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ringba\Model\DeleteSingleTargetfromTargetGroup' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ringba\Model\DeleteSingleTargetfromTargetGroup', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ringba\Model\DeleteSingleTargetfromTargetGroup';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ringba\Model\DeleteSingleTargetfromTargetGroup',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteSingleTargetfromTargetGroupAsync
     *
     * Delete Single Target from Target Group
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $targetGroupId  (required)
     * @param  string $targetId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSingleTargetfromTargetGroupAsync($accountId, $targetGroupId, $targetId, $authorization = null)
    {
        return $this->deleteSingleTargetfromTargetGroupAsyncWithHttpInfo($accountId, $targetGroupId, $targetId, $authorization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteSingleTargetfromTargetGroupAsyncWithHttpInfo
     *
     * Delete Single Target from Target Group
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $targetGroupId  (required)
     * @param  string $targetId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSingleTargetfromTargetGroupAsyncWithHttpInfo($accountId, $targetGroupId, $targetId, $authorization = null)
    {
        $returnType = '\Ringba\Model\DeleteSingleTargetfromTargetGroup';
        $request = $this->deleteSingleTargetfromTargetGroupRequest($accountId, $targetGroupId, $targetId, $authorization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteSingleTargetfromTargetGroup'
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $targetGroupId  (required)
     * @param  string $targetId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteSingleTargetfromTargetGroupRequest($accountId, $targetGroupId, $targetId, $authorization = null)
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling deleteSingleTargetfromTargetGroup'
            );
        }
        // verify the required parameter 'targetGroupId' is set
        if ($targetGroupId === null || (is_array($targetGroupId) && count($targetGroupId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $targetGroupId when calling deleteSingleTargetfromTargetGroup'
            );
        }
        // verify the required parameter 'targetId' is set
        if ($targetId === null || (is_array($targetId) && count($targetId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $targetId when calling deleteSingleTargetfromTargetGroup'
            );
        }

        $resourcePath = '/{accountId}/TargetGroups/{targetGroupId}/Targets/{targetId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($targetGroupId !== null) {
            $resourcePath = str_replace(
                '{' . 'targetGroupId' . '}',
                ObjectSerializer::toPathValue($targetGroupId),
                $resourcePath
            );
        }
        // path params
        if ($targetId !== null) {
            $resourcePath = str_replace(
                '{' . 'targetId' . '}',
                ObjectSerializer::toPathValue($targetId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json; charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json; charset=utf-8'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHosts = ["https://api.ringba.com/v2"];
        if ($this->hostIndex < 0 || $this->hostIndex >= sizeof($operationHosts)) {
            throw new \InvalidArgumentException("Invalid index {$this->hostIndex} when selecting the host. Must be less than ".sizeof($operationHosts));
        }
        $operationHost = $operationHosts[$this->hostIndex];

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteTargetGroup
     *
     * Delete Target Group
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $targetGroupId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ringba\Model\DeleteTargetGroupError1|\Ringba\Model\DeleteTargetGroup
     */
    public function deleteTargetGroup($accountId, $targetGroupId, $authorization = null)
    {
        list($response) = $this->deleteTargetGroupWithHttpInfo($accountId, $targetGroupId, $authorization);
        return $response;
    }

    /**
     * Operation deleteTargetGroupWithHttpInfo
     *
     * Delete Target Group
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $targetGroupId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ringba\Model\DeleteTargetGroupError1|\Ringba\Model\DeleteTargetGroup, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteTargetGroupWithHttpInfo($accountId, $targetGroupId, $authorization = null)
    {
        $request = $this->deleteTargetGroupRequest($accountId, $targetGroupId, $authorization);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 400:
                    if ('\Ringba\Model\DeleteTargetGroupError1' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ringba\Model\DeleteTargetGroupError1' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ringba\Model\DeleteTargetGroupError1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\Ringba\Model\DeleteTargetGroup' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ringba\Model\DeleteTargetGroup' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ringba\Model\DeleteTargetGroup', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ringba\Model\DeleteTargetGroup';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ringba\Model\DeleteTargetGroupError1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ringba\Model\DeleteTargetGroup',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteTargetGroupAsync
     *
     * Delete Target Group
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $targetGroupId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteTargetGroupAsync($accountId, $targetGroupId, $authorization = null)
    {
        return $this->deleteTargetGroupAsyncWithHttpInfo($accountId, $targetGroupId, $authorization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteTargetGroupAsyncWithHttpInfo
     *
     * Delete Target Group
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $targetGroupId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteTargetGroupAsyncWithHttpInfo($accountId, $targetGroupId, $authorization = null)
    {
        $returnType = '\Ringba\Model\DeleteTargetGroup';
        $request = $this->deleteTargetGroupRequest($accountId, $targetGroupId, $authorization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteTargetGroup'
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $targetGroupId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteTargetGroupRequest($accountId, $targetGroupId, $authorization = null)
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling deleteTargetGroup'
            );
        }
        // verify the required parameter 'targetGroupId' is set
        if ($targetGroupId === null || (is_array($targetGroupId) && count($targetGroupId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $targetGroupId when calling deleteTargetGroup'
            );
        }

        $resourcePath = '/{accountId}/TargetGroups/{targetGroupId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($targetGroupId !== null) {
            $resourcePath = str_replace(
                '{' . 'targetGroupId' . '}',
                ObjectSerializer::toPathValue($targetGroupId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json; charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json; charset=utf-8'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHosts = ["https://api.ringba.com/v2"];
        if ($this->hostIndex < 0 || $this->hostIndex >= sizeof($operationHosts)) {
            throw new \InvalidArgumentException("Invalid index {$this->hostIndex} when selecting the host. Must be less than ".sizeof($operationHosts));
        }
        $operationHost = $operationHosts[$this->hostIndex];

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation editTargetGroup
     *
     * Edit Target Group
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $targetGroupId  (required)
     * @param  \Ringba\Model\EditTargetGroupRequest $editTargetGroupRequest  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ringba\Model\EditTargetGroup
     */
    public function editTargetGroup($accountId, $targetGroupId, $editTargetGroupRequest, $authorization = null)
    {
        list($response) = $this->editTargetGroupWithHttpInfo($accountId, $targetGroupId, $editTargetGroupRequest, $authorization);
        return $response;
    }

    /**
     * Operation editTargetGroupWithHttpInfo
     *
     * Edit Target Group
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $targetGroupId  (required)
     * @param  \Ringba\Model\EditTargetGroupRequest $editTargetGroupRequest  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ringba\Model\EditTargetGroup, HTTP status code, HTTP response headers (array of strings)
     */
    public function editTargetGroupWithHttpInfo($accountId, $targetGroupId, $editTargetGroupRequest, $authorization = null)
    {
        $request = $this->editTargetGroupRequest($accountId, $targetGroupId, $editTargetGroupRequest, $authorization);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ringba\Model\EditTargetGroup' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ringba\Model\EditTargetGroup' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ringba\Model\EditTargetGroup', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ringba\Model\EditTargetGroup';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ringba\Model\EditTargetGroup',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation editTargetGroupAsync
     *
     * Edit Target Group
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $targetGroupId  (required)
     * @param  \Ringba\Model\EditTargetGroupRequest $editTargetGroupRequest  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function editTargetGroupAsync($accountId, $targetGroupId, $editTargetGroupRequest, $authorization = null)
    {
        return $this->editTargetGroupAsyncWithHttpInfo($accountId, $targetGroupId, $editTargetGroupRequest, $authorization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation editTargetGroupAsyncWithHttpInfo
     *
     * Edit Target Group
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $targetGroupId  (required)
     * @param  \Ringba\Model\EditTargetGroupRequest $editTargetGroupRequest  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function editTargetGroupAsyncWithHttpInfo($accountId, $targetGroupId, $editTargetGroupRequest, $authorization = null)
    {
        $returnType = '\Ringba\Model\EditTargetGroup';
        $request = $this->editTargetGroupRequest($accountId, $targetGroupId, $editTargetGroupRequest, $authorization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'editTargetGroup'
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $targetGroupId  (required)
     * @param  \Ringba\Model\EditTargetGroupRequest $editTargetGroupRequest  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function editTargetGroupRequest($accountId, $targetGroupId, $editTargetGroupRequest, $authorization = null)
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling editTargetGroup'
            );
        }
        // verify the required parameter 'targetGroupId' is set
        if ($targetGroupId === null || (is_array($targetGroupId) && count($targetGroupId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $targetGroupId when calling editTargetGroup'
            );
        }
        // verify the required parameter 'editTargetGroupRequest' is set
        if ($editTargetGroupRequest === null || (is_array($editTargetGroupRequest) && count($editTargetGroupRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $editTargetGroupRequest when calling editTargetGroup'
            );
        }

        $resourcePath = '/{accountId}/TargetGroups/{targetGroupId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($targetGroupId !== null) {
            $resourcePath = str_replace(
                '{' . 'targetGroupId' . '}',
                ObjectSerializer::toPathValue($targetGroupId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json; charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json; charset=utf-8'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($editTargetGroupRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($editTargetGroupRequest));
            } else {
                $httpBody = $editTargetGroupRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHosts = ["https://api.ringba.com/v2"];
        if ($this->hostIndex < 0 || $this->hostIndex >= sizeof($operationHosts)) {
            throw new \InvalidArgumentException("Invalid index {$this->hostIndex} when selecting the host. Must be less than ".sizeof($operationHosts));
        }
        $operationHost = $operationHosts[$this->hostIndex];

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDetailsaboutSpecificTargetGroup
     *
     * Get Details about Specific Target Group
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $targetGroupId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ringba\Model\GetDetailsaboutSpecificTargetGroup
     */
    public function getDetailsaboutSpecificTargetGroup($accountId, $targetGroupId, $authorization = null)
    {
        list($response) = $this->getDetailsaboutSpecificTargetGroupWithHttpInfo($accountId, $targetGroupId, $authorization);
        return $response;
    }

    /**
     * Operation getDetailsaboutSpecificTargetGroupWithHttpInfo
     *
     * Get Details about Specific Target Group
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $targetGroupId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ringba\Model\GetDetailsaboutSpecificTargetGroup, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDetailsaboutSpecificTargetGroupWithHttpInfo($accountId, $targetGroupId, $authorization = null)
    {
        $request = $this->getDetailsaboutSpecificTargetGroupRequest($accountId, $targetGroupId, $authorization);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ringba\Model\GetDetailsaboutSpecificTargetGroup' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ringba\Model\GetDetailsaboutSpecificTargetGroup' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ringba\Model\GetDetailsaboutSpecificTargetGroup', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ringba\Model\GetDetailsaboutSpecificTargetGroup';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ringba\Model\GetDetailsaboutSpecificTargetGroup',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDetailsaboutSpecificTargetGroupAsync
     *
     * Get Details about Specific Target Group
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $targetGroupId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDetailsaboutSpecificTargetGroupAsync($accountId, $targetGroupId, $authorization = null)
    {
        return $this->getDetailsaboutSpecificTargetGroupAsyncWithHttpInfo($accountId, $targetGroupId, $authorization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDetailsaboutSpecificTargetGroupAsyncWithHttpInfo
     *
     * Get Details about Specific Target Group
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $targetGroupId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDetailsaboutSpecificTargetGroupAsyncWithHttpInfo($accountId, $targetGroupId, $authorization = null)
    {
        $returnType = '\Ringba\Model\GetDetailsaboutSpecificTargetGroup';
        $request = $this->getDetailsaboutSpecificTargetGroupRequest($accountId, $targetGroupId, $authorization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDetailsaboutSpecificTargetGroup'
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $targetGroupId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDetailsaboutSpecificTargetGroupRequest($accountId, $targetGroupId, $authorization = null)
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling getDetailsaboutSpecificTargetGroup'
            );
        }
        // verify the required parameter 'targetGroupId' is set
        if ($targetGroupId === null || (is_array($targetGroupId) && count($targetGroupId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $targetGroupId when calling getDetailsaboutSpecificTargetGroup'
            );
        }

        $resourcePath = '/{accountId}/TargetGroups/{targetGroupId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($targetGroupId !== null) {
            $resourcePath = str_replace(
                '{' . 'targetGroupId' . '}',
                ObjectSerializer::toPathValue($targetGroupId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json; charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json; charset=utf-8'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHosts = ["https://api.ringba.com/v2"];
        if ($this->hostIndex < 0 || $this->hostIndex >= sizeof($operationHosts)) {
            throw new \InvalidArgumentException("Invalid index {$this->hostIndex} when selecting the host. Must be less than ".sizeof($operationHosts));
        }
        $operationHost = $operationHosts[$this->hostIndex];

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getInboundReferencesforSpecificTargetGroup
     *
     * Get Inbound References for Specific Target Group
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $targetGroupId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ringba\Model\GetInboundReferencesforSpecificTargetGroup
     */
    public function getInboundReferencesforSpecificTargetGroup($accountId, $targetGroupId, $authorization = null)
    {
        list($response) = $this->getInboundReferencesforSpecificTargetGroupWithHttpInfo($accountId, $targetGroupId, $authorization);
        return $response;
    }

    /**
     * Operation getInboundReferencesforSpecificTargetGroupWithHttpInfo
     *
     * Get Inbound References for Specific Target Group
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $targetGroupId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ringba\Model\GetInboundReferencesforSpecificTargetGroup, HTTP status code, HTTP response headers (array of strings)
     */
    public function getInboundReferencesforSpecificTargetGroupWithHttpInfo($accountId, $targetGroupId, $authorization = null)
    {
        $request = $this->getInboundReferencesforSpecificTargetGroupRequest($accountId, $targetGroupId, $authorization);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ringba\Model\GetInboundReferencesforSpecificTargetGroup' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ringba\Model\GetInboundReferencesforSpecificTargetGroup' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ringba\Model\GetInboundReferencesforSpecificTargetGroup', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ringba\Model\GetInboundReferencesforSpecificTargetGroup';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ringba\Model\GetInboundReferencesforSpecificTargetGroup',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getInboundReferencesforSpecificTargetGroupAsync
     *
     * Get Inbound References for Specific Target Group
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $targetGroupId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInboundReferencesforSpecificTargetGroupAsync($accountId, $targetGroupId, $authorization = null)
    {
        return $this->getInboundReferencesforSpecificTargetGroupAsyncWithHttpInfo($accountId, $targetGroupId, $authorization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getInboundReferencesforSpecificTargetGroupAsyncWithHttpInfo
     *
     * Get Inbound References for Specific Target Group
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $targetGroupId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInboundReferencesforSpecificTargetGroupAsyncWithHttpInfo($accountId, $targetGroupId, $authorization = null)
    {
        $returnType = '\Ringba\Model\GetInboundReferencesforSpecificTargetGroup';
        $request = $this->getInboundReferencesforSpecificTargetGroupRequest($accountId, $targetGroupId, $authorization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getInboundReferencesforSpecificTargetGroup'
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $targetGroupId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getInboundReferencesforSpecificTargetGroupRequest($accountId, $targetGroupId, $authorization = null)
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling getInboundReferencesforSpecificTargetGroup'
            );
        }
        // verify the required parameter 'targetGroupId' is set
        if ($targetGroupId === null || (is_array($targetGroupId) && count($targetGroupId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $targetGroupId when calling getInboundReferencesforSpecificTargetGroup'
            );
        }

        $resourcePath = '/{accountId}/TargetGroups/{targetGroupId}/InboundReferences';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($targetGroupId !== null) {
            $resourcePath = str_replace(
                '{' . 'targetGroupId' . '}',
                ObjectSerializer::toPathValue($targetGroupId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json; charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json; charset=utf-8'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHosts = ["https://api.ringba.com/v2"];
        if ($this->hostIndex < 0 || $this->hostIndex >= sizeof($operationHosts)) {
            throw new \InvalidArgumentException("Invalid index {$this->hostIndex} when selecting the host. Must be less than ".sizeof($operationHosts));
        }
        $operationHost = $operationHosts[$this->hostIndex];

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getStatsforSpecificTargetGroup
     *
     * Get Stats for Specific Target Group
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $targetGroupId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ringba\Model\GetStatsforSpecificTargetGroup
     */
    public function getStatsforSpecificTargetGroup($accountId, $targetGroupId, $authorization = null)
    {
        list($response) = $this->getStatsforSpecificTargetGroupWithHttpInfo($accountId, $targetGroupId, $authorization);
        return $response;
    }

    /**
     * Operation getStatsforSpecificTargetGroupWithHttpInfo
     *
     * Get Stats for Specific Target Group
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $targetGroupId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ringba\Model\GetStatsforSpecificTargetGroup, HTTP status code, HTTP response headers (array of strings)
     */
    public function getStatsforSpecificTargetGroupWithHttpInfo($accountId, $targetGroupId, $authorization = null)
    {
        $request = $this->getStatsforSpecificTargetGroupRequest($accountId, $targetGroupId, $authorization);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ringba\Model\GetStatsforSpecificTargetGroup' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ringba\Model\GetStatsforSpecificTargetGroup' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ringba\Model\GetStatsforSpecificTargetGroup', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ringba\Model\GetStatsforSpecificTargetGroup';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ringba\Model\GetStatsforSpecificTargetGroup',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getStatsforSpecificTargetGroupAsync
     *
     * Get Stats for Specific Target Group
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $targetGroupId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStatsforSpecificTargetGroupAsync($accountId, $targetGroupId, $authorization = null)
    {
        return $this->getStatsforSpecificTargetGroupAsyncWithHttpInfo($accountId, $targetGroupId, $authorization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getStatsforSpecificTargetGroupAsyncWithHttpInfo
     *
     * Get Stats for Specific Target Group
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $targetGroupId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStatsforSpecificTargetGroupAsyncWithHttpInfo($accountId, $targetGroupId, $authorization = null)
    {
        $returnType = '\Ringba\Model\GetStatsforSpecificTargetGroup';
        $request = $this->getStatsforSpecificTargetGroupRequest($accountId, $targetGroupId, $authorization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getStatsforSpecificTargetGroup'
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $targetGroupId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getStatsforSpecificTargetGroupRequest($accountId, $targetGroupId, $authorization = null)
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling getStatsforSpecificTargetGroup'
            );
        }
        // verify the required parameter 'targetGroupId' is set
        if ($targetGroupId === null || (is_array($targetGroupId) && count($targetGroupId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $targetGroupId when calling getStatsforSpecificTargetGroup'
            );
        }

        $resourcePath = '/{accountId}/TargetGroups/{targetGroupId}/Counts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($targetGroupId !== null) {
            $resourcePath = str_replace(
                '{' . 'targetGroupId' . '}',
                ObjectSerializer::toPathValue($targetGroupId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json; charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json; charset=utf-8'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHosts = ["https://api.ringba.com/v2"];
        if ($this->hostIndex < 0 || $this->hostIndex >= sizeof($operationHosts)) {
            throw new \InvalidArgumentException("Invalid index {$this->hostIndex} when selecting the host. Must be less than ".sizeof($operationHosts));
        }
        $operationHost = $operationHosts[$this->hostIndex];

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTargetGroups
     *
     * Get Target Groups
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ringba\Model\GetTargetGroups
     */
    public function getTargetGroups($accountId, $authorization = null)
    {
        list($response) = $this->getTargetGroupsWithHttpInfo($accountId, $authorization);
        return $response;
    }

    /**
     * Operation getTargetGroupsWithHttpInfo
     *
     * Get Target Groups
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ringba\Model\GetTargetGroups, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTargetGroupsWithHttpInfo($accountId, $authorization = null)
    {
        $request = $this->getTargetGroupsRequest($accountId, $authorization);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ringba\Model\GetTargetGroups' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ringba\Model\GetTargetGroups' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ringba\Model\GetTargetGroups', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ringba\Model\GetTargetGroups';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ringba\Model\GetTargetGroups',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTargetGroupsAsync
     *
     * Get Target Groups
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTargetGroupsAsync($accountId, $authorization = null)
    {
        return $this->getTargetGroupsAsyncWithHttpInfo($accountId, $authorization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTargetGroupsAsyncWithHttpInfo
     *
     * Get Target Groups
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTargetGroupsAsyncWithHttpInfo($accountId, $authorization = null)
    {
        $returnType = '\Ringba\Model\GetTargetGroups';
        $request = $this->getTargetGroupsRequest($accountId, $authorization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTargetGroups'
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getTargetGroupsRequest($accountId, $authorization = null)
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling getTargetGroups'
            );
        }

        $resourcePath = '/{accountId}/TargetGroups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json; charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json; charset=utf-8'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHosts = ["https://api.ringba.com/v2"];
        if ($this->hostIndex < 0 || $this->hostIndex >= sizeof($operationHosts)) {
            throw new \InvalidArgumentException("Invalid index {$this->hostIndex} when selecting the host. Must be less than ".sizeof($operationHosts));
        }
        $operationHost = $operationHosts[$this->hostIndex];

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTargetsforTargetGroup
     *
     * Get Targets for Target Group
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $targetGroupId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ringba\Model\GetTargetsforTargetGroup
     */
    public function getTargetsforTargetGroup($accountId, $targetGroupId, $authorization = null)
    {
        list($response) = $this->getTargetsforTargetGroupWithHttpInfo($accountId, $targetGroupId, $authorization);
        return $response;
    }

    /**
     * Operation getTargetsforTargetGroupWithHttpInfo
     *
     * Get Targets for Target Group
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $targetGroupId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ringba\Model\GetTargetsforTargetGroup, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTargetsforTargetGroupWithHttpInfo($accountId, $targetGroupId, $authorization = null)
    {
        $request = $this->getTargetsforTargetGroupRequest($accountId, $targetGroupId, $authorization);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ringba\Model\GetTargetsforTargetGroup' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ringba\Model\GetTargetsforTargetGroup' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ringba\Model\GetTargetsforTargetGroup', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ringba\Model\GetTargetsforTargetGroup';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ringba\Model\GetTargetsforTargetGroup',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTargetsforTargetGroupAsync
     *
     * Get Targets for Target Group
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $targetGroupId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTargetsforTargetGroupAsync($accountId, $targetGroupId, $authorization = null)
    {
        return $this->getTargetsforTargetGroupAsyncWithHttpInfo($accountId, $targetGroupId, $authorization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTargetsforTargetGroupAsyncWithHttpInfo
     *
     * Get Targets for Target Group
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $targetGroupId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTargetsforTargetGroupAsyncWithHttpInfo($accountId, $targetGroupId, $authorization = null)
    {
        $returnType = '\Ringba\Model\GetTargetsforTargetGroup';
        $request = $this->getTargetsforTargetGroupRequest($accountId, $targetGroupId, $authorization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTargetsforTargetGroup'
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $targetGroupId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getTargetsforTargetGroupRequest($accountId, $targetGroupId, $authorization = null)
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling getTargetsforTargetGroup'
            );
        }
        // verify the required parameter 'targetGroupId' is set
        if ($targetGroupId === null || (is_array($targetGroupId) && count($targetGroupId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $targetGroupId when calling getTargetsforTargetGroup'
            );
        }

        $resourcePath = '/{accountId}/TargetGroups/{targetGroupId}/Targets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($targetGroupId !== null) {
            $resourcePath = str_replace(
                '{' . 'targetGroupId' . '}',
                ObjectSerializer::toPathValue($targetGroupId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json; charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json; charset=utf-8'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHosts = ["https://api.ringba.com/v2"];
        if ($this->hostIndex < 0 || $this->hostIndex >= sizeof($operationHosts)) {
            throw new \InvalidArgumentException("Invalid index {$this->hostIndex} when selecting the host. Must be less than ".sizeof($operationHosts));
        }
        $operationHost = $operationHosts[$this->hostIndex];

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeBuyerfromTargetGroup
     *
     * Remove Buyer from Target Group
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $targetGroupId  (required)
     * @param  string $buyerId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ringba\Model\RemoveBuyerfromTargetGroup
     */
    public function removeBuyerfromTargetGroup($accountId, $targetGroupId, $buyerId, $authorization = null)
    {
        list($response) = $this->removeBuyerfromTargetGroupWithHttpInfo($accountId, $targetGroupId, $buyerId, $authorization);
        return $response;
    }

    /**
     * Operation removeBuyerfromTargetGroupWithHttpInfo
     *
     * Remove Buyer from Target Group
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $targetGroupId  (required)
     * @param  string $buyerId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ringba\Model\RemoveBuyerfromTargetGroup, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeBuyerfromTargetGroupWithHttpInfo($accountId, $targetGroupId, $buyerId, $authorization = null)
    {
        $request = $this->removeBuyerfromTargetGroupRequest($accountId, $targetGroupId, $buyerId, $authorization);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ringba\Model\RemoveBuyerfromTargetGroup' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ringba\Model\RemoveBuyerfromTargetGroup' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ringba\Model\RemoveBuyerfromTargetGroup', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ringba\Model\RemoveBuyerfromTargetGroup';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ringba\Model\RemoveBuyerfromTargetGroup',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation removeBuyerfromTargetGroupAsync
     *
     * Remove Buyer from Target Group
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $targetGroupId  (required)
     * @param  string $buyerId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeBuyerfromTargetGroupAsync($accountId, $targetGroupId, $buyerId, $authorization = null)
    {
        return $this->removeBuyerfromTargetGroupAsyncWithHttpInfo($accountId, $targetGroupId, $buyerId, $authorization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation removeBuyerfromTargetGroupAsyncWithHttpInfo
     *
     * Remove Buyer from Target Group
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $targetGroupId  (required)
     * @param  string $buyerId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeBuyerfromTargetGroupAsyncWithHttpInfo($accountId, $targetGroupId, $buyerId, $authorization = null)
    {
        $returnType = '\Ringba\Model\RemoveBuyerfromTargetGroup';
        $request = $this->removeBuyerfromTargetGroupRequest($accountId, $targetGroupId, $buyerId, $authorization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeBuyerfromTargetGroup'
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $targetGroupId  (required)
     * @param  string $buyerId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function removeBuyerfromTargetGroupRequest($accountId, $targetGroupId, $buyerId, $authorization = null)
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling removeBuyerfromTargetGroup'
            );
        }
        // verify the required parameter 'targetGroupId' is set
        if ($targetGroupId === null || (is_array($targetGroupId) && count($targetGroupId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $targetGroupId when calling removeBuyerfromTargetGroup'
            );
        }
        // verify the required parameter 'buyerId' is set
        if ($buyerId === null || (is_array($buyerId) && count($buyerId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $buyerId when calling removeBuyerfromTargetGroup'
            );
        }

        $resourcePath = '/{accountId}/TargetGroups/{targetGroupId}/Buyer/{buyerId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($targetGroupId !== null) {
            $resourcePath = str_replace(
                '{' . 'targetGroupId' . '}',
                ObjectSerializer::toPathValue($targetGroupId),
                $resourcePath
            );
        }
        // path params
        if ($buyerId !== null) {
            $resourcePath = str_replace(
                '{' . 'buyerId' . '}',
                ObjectSerializer::toPathValue($buyerId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json; charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json; charset=utf-8'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHosts = ["https://api.ringba.com/v2"];
        if ($this->hostIndex < 0 || $this->hostIndex >= sizeof($operationHosts)) {
            throw new \InvalidArgumentException("Invalid index {$this->hostIndex} when selecting the host. Must be less than ".sizeof($operationHosts));
        }
        $operationHost = $operationHosts[$this->hostIndex];

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation resetCountsforTargetGroup
     *
     * Reset Counts for Target Group
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $targetGroupId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ringba\Model\ResetCountsforTargetGroup
     */
    public function resetCountsforTargetGroup($accountId, $targetGroupId, $authorization = null)
    {
        list($response) = $this->resetCountsforTargetGroupWithHttpInfo($accountId, $targetGroupId, $authorization);
        return $response;
    }

    /**
     * Operation resetCountsforTargetGroupWithHttpInfo
     *
     * Reset Counts for Target Group
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $targetGroupId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \Ringba\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ringba\Model\ResetCountsforTargetGroup, HTTP status code, HTTP response headers (array of strings)
     */
    public function resetCountsforTargetGroupWithHttpInfo($accountId, $targetGroupId, $authorization = null)
    {
        $request = $this->resetCountsforTargetGroupRequest($accountId, $targetGroupId, $authorization);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Ringba\Model\ResetCountsforTargetGroup' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ringba\Model\ResetCountsforTargetGroup' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ringba\Model\ResetCountsforTargetGroup', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Ringba\Model\ResetCountsforTargetGroup';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ringba\Model\ResetCountsforTargetGroup',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation resetCountsforTargetGroupAsync
     *
     * Reset Counts for Target Group
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $targetGroupId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function resetCountsforTargetGroupAsync($accountId, $targetGroupId, $authorization = null)
    {
        return $this->resetCountsforTargetGroupAsyncWithHttpInfo($accountId, $targetGroupId, $authorization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation resetCountsforTargetGroupAsyncWithHttpInfo
     *
     * Reset Counts for Target Group
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $targetGroupId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function resetCountsforTargetGroupAsyncWithHttpInfo($accountId, $targetGroupId, $authorization = null)
    {
        $returnType = '\Ringba\Model\ResetCountsforTargetGroup';
        $request = $this->resetCountsforTargetGroupRequest($accountId, $targetGroupId, $authorization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'resetCountsforTargetGroup'
     *
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
     * URL: https://api.ringba.com/v2
     *
     * @param  string $accountId  (required)
     * @param  string $targetGroupId  (required)
     * @param  string $authorization Find your [apiToken](#get-or-create-api-token) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function resetCountsforTargetGroupRequest($accountId, $targetGroupId, $authorization = null)
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling resetCountsforTargetGroup'
            );
        }
        // verify the required parameter 'targetGroupId' is set
        if ($targetGroupId === null || (is_array($targetGroupId) && count($targetGroupId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $targetGroupId when calling resetCountsforTargetGroup'
            );
        }

        $resourcePath = '/{accountId}/TargetGroups/{targetGroupId}/ResetCount';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($targetGroupId !== null) {
            $resourcePath = str_replace(
                '{' . 'targetGroupId' . '}',
                ObjectSerializer::toPathValue($targetGroupId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json; charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json; charset=utf-8'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHosts = ["https://api.ringba.com/v2"];
        if ($this->hostIndex < 0 || $this->hostIndex >= sizeof($operationHosts)) {
            throw new \InvalidArgumentException("Invalid index {$this->hostIndex} when selecting the host. Must be less than ".sizeof($operationHosts));
        }
        $operationHost = $operationHosts[$this->hostIndex];

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
