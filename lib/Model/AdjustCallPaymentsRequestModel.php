<?php
/**
 * AdjustCallPaymentsRequestModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ringba
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * api.ringba.com
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.10
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ringba\Model;

use \ArrayAccess;
use \Ringba\ObjectSerializer;

/**
 * AdjustCallPaymentsRequestModel Class Doc Comment
 *
 * @category Class
 * @package  Ringba
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AdjustCallPaymentsRequestModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AdjustCallPaymentsRequestModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'inbound_call_id' => 'string',
        'reason' => 'string',
        'adjust_conversion' => 'bool',
        'adjust_converion_by_amount' => 'double',
        'adjust_payout' => 'bool',
        'adjust_payout_by_amount' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'inbound_call_id' => null,
        'reason' => null,
        'adjust_conversion' => null,
        'adjust_converion_by_amount' => 'double',
        'adjust_payout' => null,
        'adjust_payout_by_amount' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'inbound_call_id' => 'inboundCallId',
        'reason' => 'reason',
        'adjust_conversion' => 'adjustConversion',
        'adjust_converion_by_amount' => 'adjustConverionByAmount',
        'adjust_payout' => 'adjustPayout',
        'adjust_payout_by_amount' => 'adjustPayoutByAmount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'inbound_call_id' => 'setInboundCallId',
        'reason' => 'setReason',
        'adjust_conversion' => 'setAdjustConversion',
        'adjust_converion_by_amount' => 'setAdjustConverionByAmount',
        'adjust_payout' => 'setAdjustPayout',
        'adjust_payout_by_amount' => 'setAdjustPayoutByAmount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'inbound_call_id' => 'getInboundCallId',
        'reason' => 'getReason',
        'adjust_conversion' => 'getAdjustConversion',
        'adjust_converion_by_amount' => 'getAdjustConverionByAmount',
        'adjust_payout' => 'getAdjustPayout',
        'adjust_payout_by_amount' => 'getAdjustPayoutByAmount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['inbound_call_id'] = isset($data['inbound_call_id']) ? $data['inbound_call_id'] : null;
        $this->container['reason'] = isset($data['reason']) ? $data['reason'] : null;
        $this->container['adjust_conversion'] = isset($data['adjust_conversion']) ? $data['adjust_conversion'] : null;
        $this->container['adjust_converion_by_amount'] = isset($data['adjust_converion_by_amount']) ? $data['adjust_converion_by_amount'] : null;
        $this->container['adjust_payout'] = isset($data['adjust_payout']) ? $data['adjust_payout'] : null;
        $this->container['adjust_payout_by_amount'] = isset($data['adjust_payout_by_amount']) ? $data['adjust_payout_by_amount'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['inbound_call_id'] === null) {
            $invalidProperties[] = "'inbound_call_id' can't be null";
        }
        if ($this->container['reason'] === null) {
            $invalidProperties[] = "'reason' can't be null";
        }
        if ($this->container['adjust_conversion'] === null) {
            $invalidProperties[] = "'adjust_conversion' can't be null";
        }
        if ($this->container['adjust_payout'] === null) {
            $invalidProperties[] = "'adjust_payout' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets inbound_call_id
     *
     * @return string
     */
    public function getInboundCallId()
    {
        return $this->container['inbound_call_id'];
    }

    /**
     * Sets inbound_call_id
     *
     * @param string $inbound_call_id inbound_call_id
     *
     * @return $this
     */
    public function setInboundCallId($inbound_call_id)
    {
        $this->container['inbound_call_id'] = $inbound_call_id;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return string
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param string $reason reason
     *
     * @return $this
     */
    public function setReason($reason)
    {
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets adjust_conversion
     *
     * @return bool
     */
    public function getAdjustConversion()
    {
        return $this->container['adjust_conversion'];
    }

    /**
     * Sets adjust_conversion
     *
     * @param bool $adjust_conversion adjust_conversion
     *
     * @return $this
     */
    public function setAdjustConversion($adjust_conversion)
    {
        $this->container['adjust_conversion'] = $adjust_conversion;

        return $this;
    }

    /**
     * Gets adjust_converion_by_amount
     *
     * @return double
     */
    public function getAdjustConverionByAmount()
    {
        return $this->container['adjust_converion_by_amount'];
    }

    /**
     * Sets adjust_converion_by_amount
     *
     * @param double $adjust_converion_by_amount adjust_converion_by_amount
     *
     * @return $this
     */
    public function setAdjustConverionByAmount($adjust_converion_by_amount)
    {
        $this->container['adjust_converion_by_amount'] = $adjust_converion_by_amount;

        return $this;
    }

    /**
     * Gets adjust_payout
     *
     * @return bool
     */
    public function getAdjustPayout()
    {
        return $this->container['adjust_payout'];
    }

    /**
     * Sets adjust_payout
     *
     * @param bool $adjust_payout adjust_payout
     *
     * @return $this
     */
    public function setAdjustPayout($adjust_payout)
    {
        $this->container['adjust_payout'] = $adjust_payout;

        return $this;
    }

    /**
     * Gets adjust_payout_by_amount
     *
     * @return double
     */
    public function getAdjustPayoutByAmount()
    {
        return $this->container['adjust_payout_by_amount'];
    }

    /**
     * Sets adjust_payout_by_amount
     *
     * @param double $adjust_payout_by_amount adjust_payout_by_amount
     *
     * @return $this
     */
    public function setAdjustPayoutByAmount($adjust_payout_by_amount)
    {
        $this->container['adjust_payout_by_amount'] = $adjust_payout_by_amount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


