<?php
/**
 * Number
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ringba
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * api.ringba.com
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.10
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ringba\Model;

use \ArrayAccess;
use \Ringba\ObjectSerializer;

/**
 * Number Class Doc Comment
 *
 * @category Class
 * @package  Ringba
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Number implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Number';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'phone_number' => 'string',
        'local_number' => 'string',
        'display_number' => 'string',
        'provider' => 'string',
        'provider_account_id' => 'string',
        'provider_id' => 'string',
        'number_pool_id' => 'string',
        'campaign_id' => 'string',
        'js_tag_id' => 'string',
        'offer_id' => 'string',
        'allocation_dt' => '\DateTime',
        'last_bill_dt' => '\DateTime',
        'next_charge_dt' => '\DateTime',
        'last_charge_dt' => '\DateTime',
        'de_allocation_dt' => '\DateTime',
        'auto_renew' => 'bool',
        'renew_dom' => 'int',
        'is_toll_free' => 'bool',
        'is_activated' => 'bool',
        'assignment_settings' => '\Ringba\Model\NumberAssignmentSettings',
        'tags' => '\Ringba\Model\Tag[]',
        'dealloc_flag' => 'bool',
        'failed_recharge_attempts' => 'int',
        'is_carrier_number' => 'bool',
        'integration_settings' => '\Ringba\Model\IntegrationSetting[]',
        'int_setting_ids' => 'string[]',
        'affiliate' => '\Ringba\Model\Affiliate',
        'id' => 'string',
        'name' => 'string',
        'account_id' => 'string',
        'enabled' => 'bool',
        'version' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'phone_number' => null,
        'local_number' => null,
        'display_number' => null,
        'provider' => null,
        'provider_account_id' => null,
        'provider_id' => null,
        'number_pool_id' => null,
        'campaign_id' => null,
        'js_tag_id' => null,
        'offer_id' => null,
        'allocation_dt' => 'date-time',
        'last_bill_dt' => 'date-time',
        'next_charge_dt' => 'date-time',
        'last_charge_dt' => 'date-time',
        'de_allocation_dt' => 'date-time',
        'auto_renew' => null,
        'renew_dom' => 'int32',
        'is_toll_free' => null,
        'is_activated' => null,
        'assignment_settings' => null,
        'tags' => null,
        'dealloc_flag' => null,
        'failed_recharge_attempts' => 'int32',
        'is_carrier_number' => null,
        'integration_settings' => null,
        'int_setting_ids' => null,
        'affiliate' => null,
        'id' => null,
        'name' => null,
        'account_id' => null,
        'enabled' => null,
        'version' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'phone_number' => 'phoneNumber',
        'local_number' => 'localNumber',
        'display_number' => 'displayNumber',
        'provider' => 'provider',
        'provider_account_id' => 'providerAccountId',
        'provider_id' => 'providerId',
        'number_pool_id' => 'numberPoolId',
        'campaign_id' => 'campaignId',
        'js_tag_id' => 'jsTagId',
        'offer_id' => 'offerId',
        'allocation_dt' => 'allocationDT',
        'last_bill_dt' => 'lastBillDT',
        'next_charge_dt' => 'nextChargeDT',
        'last_charge_dt' => 'lastChargeDT',
        'de_allocation_dt' => 'deAllocationDT',
        'auto_renew' => 'autoRenew',
        'renew_dom' => 'renewDOM',
        'is_toll_free' => 'isTollFree',
        'is_activated' => 'isActivated',
        'assignment_settings' => 'assignmentSettings',
        'tags' => 'tags',
        'dealloc_flag' => 'deallocFlag',
        'failed_recharge_attempts' => 'failedRechargeAttempts',
        'is_carrier_number' => 'isCarrierNumber',
        'integration_settings' => 'integrationSettings',
        'int_setting_ids' => 'intSettingIds',
        'affiliate' => 'affiliate',
        'id' => 'id',
        'name' => 'name',
        'account_id' => 'accountId',
        'enabled' => 'enabled',
        'version' => 'version'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'phone_number' => 'setPhoneNumber',
        'local_number' => 'setLocalNumber',
        'display_number' => 'setDisplayNumber',
        'provider' => 'setProvider',
        'provider_account_id' => 'setProviderAccountId',
        'provider_id' => 'setProviderId',
        'number_pool_id' => 'setNumberPoolId',
        'campaign_id' => 'setCampaignId',
        'js_tag_id' => 'setJsTagId',
        'offer_id' => 'setOfferId',
        'allocation_dt' => 'setAllocationDt',
        'last_bill_dt' => 'setLastBillDt',
        'next_charge_dt' => 'setNextChargeDt',
        'last_charge_dt' => 'setLastChargeDt',
        'de_allocation_dt' => 'setDeAllocationDt',
        'auto_renew' => 'setAutoRenew',
        'renew_dom' => 'setRenewDom',
        'is_toll_free' => 'setIsTollFree',
        'is_activated' => 'setIsActivated',
        'assignment_settings' => 'setAssignmentSettings',
        'tags' => 'setTags',
        'dealloc_flag' => 'setDeallocFlag',
        'failed_recharge_attempts' => 'setFailedRechargeAttempts',
        'is_carrier_number' => 'setIsCarrierNumber',
        'integration_settings' => 'setIntegrationSettings',
        'int_setting_ids' => 'setIntSettingIds',
        'affiliate' => 'setAffiliate',
        'id' => 'setId',
        'name' => 'setName',
        'account_id' => 'setAccountId',
        'enabled' => 'setEnabled',
        'version' => 'setVersion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'phone_number' => 'getPhoneNumber',
        'local_number' => 'getLocalNumber',
        'display_number' => 'getDisplayNumber',
        'provider' => 'getProvider',
        'provider_account_id' => 'getProviderAccountId',
        'provider_id' => 'getProviderId',
        'number_pool_id' => 'getNumberPoolId',
        'campaign_id' => 'getCampaignId',
        'js_tag_id' => 'getJsTagId',
        'offer_id' => 'getOfferId',
        'allocation_dt' => 'getAllocationDt',
        'last_bill_dt' => 'getLastBillDt',
        'next_charge_dt' => 'getNextChargeDt',
        'last_charge_dt' => 'getLastChargeDt',
        'de_allocation_dt' => 'getDeAllocationDt',
        'auto_renew' => 'getAutoRenew',
        'renew_dom' => 'getRenewDom',
        'is_toll_free' => 'getIsTollFree',
        'is_activated' => 'getIsActivated',
        'assignment_settings' => 'getAssignmentSettings',
        'tags' => 'getTags',
        'dealloc_flag' => 'getDeallocFlag',
        'failed_recharge_attempts' => 'getFailedRechargeAttempts',
        'is_carrier_number' => 'getIsCarrierNumber',
        'integration_settings' => 'getIntegrationSettings',
        'int_setting_ids' => 'getIntSettingIds',
        'affiliate' => 'getAffiliate',
        'id' => 'getId',
        'name' => 'getName',
        'account_id' => 'getAccountId',
        'enabled' => 'getEnabled',
        'version' => 'getVersion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['phone_number'] = isset($data['phone_number']) ? $data['phone_number'] : null;
        $this->container['local_number'] = isset($data['local_number']) ? $data['local_number'] : null;
        $this->container['display_number'] = isset($data['display_number']) ? $data['display_number'] : null;
        $this->container['provider'] = isset($data['provider']) ? $data['provider'] : null;
        $this->container['provider_account_id'] = isset($data['provider_account_id']) ? $data['provider_account_id'] : null;
        $this->container['provider_id'] = isset($data['provider_id']) ? $data['provider_id'] : null;
        $this->container['number_pool_id'] = isset($data['number_pool_id']) ? $data['number_pool_id'] : null;
        $this->container['campaign_id'] = isset($data['campaign_id']) ? $data['campaign_id'] : null;
        $this->container['js_tag_id'] = isset($data['js_tag_id']) ? $data['js_tag_id'] : null;
        $this->container['offer_id'] = isset($data['offer_id']) ? $data['offer_id'] : null;
        $this->container['allocation_dt'] = isset($data['allocation_dt']) ? $data['allocation_dt'] : null;
        $this->container['last_bill_dt'] = isset($data['last_bill_dt']) ? $data['last_bill_dt'] : null;
        $this->container['next_charge_dt'] = isset($data['next_charge_dt']) ? $data['next_charge_dt'] : null;
        $this->container['last_charge_dt'] = isset($data['last_charge_dt']) ? $data['last_charge_dt'] : null;
        $this->container['de_allocation_dt'] = isset($data['de_allocation_dt']) ? $data['de_allocation_dt'] : null;
        $this->container['auto_renew'] = isset($data['auto_renew']) ? $data['auto_renew'] : null;
        $this->container['renew_dom'] = isset($data['renew_dom']) ? $data['renew_dom'] : null;
        $this->container['is_toll_free'] = isset($data['is_toll_free']) ? $data['is_toll_free'] : null;
        $this->container['is_activated'] = isset($data['is_activated']) ? $data['is_activated'] : null;
        $this->container['assignment_settings'] = isset($data['assignment_settings']) ? $data['assignment_settings'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['dealloc_flag'] = isset($data['dealloc_flag']) ? $data['dealloc_flag'] : null;
        $this->container['failed_recharge_attempts'] = isset($data['failed_recharge_attempts']) ? $data['failed_recharge_attempts'] : null;
        $this->container['is_carrier_number'] = isset($data['is_carrier_number']) ? $data['is_carrier_number'] : null;
        $this->container['integration_settings'] = isset($data['integration_settings']) ? $data['integration_settings'] : null;
        $this->container['int_setting_ids'] = isset($data['int_setting_ids']) ? $data['int_setting_ids'] : null;
        $this->container['affiliate'] = isset($data['affiliate']) ? $data['affiliate'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets phone_number
     *
     * @return string
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string $phone_number phone_number
     *
     * @return $this
     */
    public function setPhoneNumber($phone_number)
    {
        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets local_number
     *
     * @return string
     */
    public function getLocalNumber()
    {
        return $this->container['local_number'];
    }

    /**
     * Sets local_number
     *
     * @param string $local_number local_number
     *
     * @return $this
     */
    public function setLocalNumber($local_number)
    {
        $this->container['local_number'] = $local_number;

        return $this;
    }

    /**
     * Gets display_number
     *
     * @return string
     */
    public function getDisplayNumber()
    {
        return $this->container['display_number'];
    }

    /**
     * Sets display_number
     *
     * @param string $display_number display_number
     *
     * @return $this
     */
    public function setDisplayNumber($display_number)
    {
        $this->container['display_number'] = $display_number;

        return $this;
    }

    /**
     * Gets provider
     *
     * @return string
     */
    public function getProvider()
    {
        return $this->container['provider'];
    }

    /**
     * Sets provider
     *
     * @param string $provider provider
     *
     * @return $this
     */
    public function setProvider($provider)
    {
        $this->container['provider'] = $provider;

        return $this;
    }

    /**
     * Gets provider_account_id
     *
     * @return string
     */
    public function getProviderAccountId()
    {
        return $this->container['provider_account_id'];
    }

    /**
     * Sets provider_account_id
     *
     * @param string $provider_account_id provider_account_id
     *
     * @return $this
     */
    public function setProviderAccountId($provider_account_id)
    {
        $this->container['provider_account_id'] = $provider_account_id;

        return $this;
    }

    /**
     * Gets provider_id
     *
     * @return string
     */
    public function getProviderId()
    {
        return $this->container['provider_id'];
    }

    /**
     * Sets provider_id
     *
     * @param string $provider_id provider_id
     *
     * @return $this
     */
    public function setProviderId($provider_id)
    {
        $this->container['provider_id'] = $provider_id;

        return $this;
    }

    /**
     * Gets number_pool_id
     *
     * @return string
     */
    public function getNumberPoolId()
    {
        return $this->container['number_pool_id'];
    }

    /**
     * Sets number_pool_id
     *
     * @param string $number_pool_id number_pool_id
     *
     * @return $this
     */
    public function setNumberPoolId($number_pool_id)
    {
        $this->container['number_pool_id'] = $number_pool_id;

        return $this;
    }

    /**
     * Gets campaign_id
     *
     * @return string
     */
    public function getCampaignId()
    {
        return $this->container['campaign_id'];
    }

    /**
     * Sets campaign_id
     *
     * @param string $campaign_id campaign_id
     *
     * @return $this
     */
    public function setCampaignId($campaign_id)
    {
        $this->container['campaign_id'] = $campaign_id;

        return $this;
    }

    /**
     * Gets js_tag_id
     *
     * @return string
     */
    public function getJsTagId()
    {
        return $this->container['js_tag_id'];
    }

    /**
     * Sets js_tag_id
     *
     * @param string $js_tag_id js_tag_id
     *
     * @return $this
     */
    public function setJsTagId($js_tag_id)
    {
        $this->container['js_tag_id'] = $js_tag_id;

        return $this;
    }

    /**
     * Gets offer_id
     *
     * @return string
     */
    public function getOfferId()
    {
        return $this->container['offer_id'];
    }

    /**
     * Sets offer_id
     *
     * @param string $offer_id offer_id
     *
     * @return $this
     */
    public function setOfferId($offer_id)
    {
        $this->container['offer_id'] = $offer_id;

        return $this;
    }

    /**
     * Gets allocation_dt
     *
     * @return \DateTime
     */
    public function getAllocationDt()
    {
        return $this->container['allocation_dt'];
    }

    /**
     * Sets allocation_dt
     *
     * @param \DateTime $allocation_dt allocation_dt
     *
     * @return $this
     */
    public function setAllocationDt($allocation_dt)
    {
        $this->container['allocation_dt'] = $allocation_dt;

        return $this;
    }

    /**
     * Gets last_bill_dt
     *
     * @return \DateTime
     */
    public function getLastBillDt()
    {
        return $this->container['last_bill_dt'];
    }

    /**
     * Sets last_bill_dt
     *
     * @param \DateTime $last_bill_dt last_bill_dt
     *
     * @return $this
     */
    public function setLastBillDt($last_bill_dt)
    {
        $this->container['last_bill_dt'] = $last_bill_dt;

        return $this;
    }

    /**
     * Gets next_charge_dt
     *
     * @return \DateTime
     */
    public function getNextChargeDt()
    {
        return $this->container['next_charge_dt'];
    }

    /**
     * Sets next_charge_dt
     *
     * @param \DateTime $next_charge_dt next_charge_dt
     *
     * @return $this
     */
    public function setNextChargeDt($next_charge_dt)
    {
        $this->container['next_charge_dt'] = $next_charge_dt;

        return $this;
    }

    /**
     * Gets last_charge_dt
     *
     * @return \DateTime
     */
    public function getLastChargeDt()
    {
        return $this->container['last_charge_dt'];
    }

    /**
     * Sets last_charge_dt
     *
     * @param \DateTime $last_charge_dt last_charge_dt
     *
     * @return $this
     */
    public function setLastChargeDt($last_charge_dt)
    {
        $this->container['last_charge_dt'] = $last_charge_dt;

        return $this;
    }

    /**
     * Gets de_allocation_dt
     *
     * @return \DateTime
     */
    public function getDeAllocationDt()
    {
        return $this->container['de_allocation_dt'];
    }

    /**
     * Sets de_allocation_dt
     *
     * @param \DateTime $de_allocation_dt de_allocation_dt
     *
     * @return $this
     */
    public function setDeAllocationDt($de_allocation_dt)
    {
        $this->container['de_allocation_dt'] = $de_allocation_dt;

        return $this;
    }

    /**
     * Gets auto_renew
     *
     * @return bool
     */
    public function getAutoRenew()
    {
        return $this->container['auto_renew'];
    }

    /**
     * Sets auto_renew
     *
     * @param bool $auto_renew auto_renew
     *
     * @return $this
     */
    public function setAutoRenew($auto_renew)
    {
        $this->container['auto_renew'] = $auto_renew;

        return $this;
    }

    /**
     * Gets renew_dom
     *
     * @return int
     */
    public function getRenewDom()
    {
        return $this->container['renew_dom'];
    }

    /**
     * Sets renew_dom
     *
     * @param int $renew_dom renew_dom
     *
     * @return $this
     */
    public function setRenewDom($renew_dom)
    {
        $this->container['renew_dom'] = $renew_dom;

        return $this;
    }

    /**
     * Gets is_toll_free
     *
     * @return bool
     */
    public function getIsTollFree()
    {
        return $this->container['is_toll_free'];
    }

    /**
     * Sets is_toll_free
     *
     * @param bool $is_toll_free is_toll_free
     *
     * @return $this
     */
    public function setIsTollFree($is_toll_free)
    {
        $this->container['is_toll_free'] = $is_toll_free;

        return $this;
    }

    /**
     * Gets is_activated
     *
     * @return bool
     */
    public function getIsActivated()
    {
        return $this->container['is_activated'];
    }

    /**
     * Sets is_activated
     *
     * @param bool $is_activated is_activated
     *
     * @return $this
     */
    public function setIsActivated($is_activated)
    {
        $this->container['is_activated'] = $is_activated;

        return $this;
    }

    /**
     * Gets assignment_settings
     *
     * @return \Ringba\Model\NumberAssignmentSettings
     */
    public function getAssignmentSettings()
    {
        return $this->container['assignment_settings'];
    }

    /**
     * Sets assignment_settings
     *
     * @param \Ringba\Model\NumberAssignmentSettings $assignment_settings assignment_settings
     *
     * @return $this
     */
    public function setAssignmentSettings($assignment_settings)
    {
        $this->container['assignment_settings'] = $assignment_settings;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \Ringba\Model\Tag[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \Ringba\Model\Tag[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets dealloc_flag
     *
     * @return bool
     */
    public function getDeallocFlag()
    {
        return $this->container['dealloc_flag'];
    }

    /**
     * Sets dealloc_flag
     *
     * @param bool $dealloc_flag dealloc_flag
     *
     * @return $this
     */
    public function setDeallocFlag($dealloc_flag)
    {
        $this->container['dealloc_flag'] = $dealloc_flag;

        return $this;
    }

    /**
     * Gets failed_recharge_attempts
     *
     * @return int
     */
    public function getFailedRechargeAttempts()
    {
        return $this->container['failed_recharge_attempts'];
    }

    /**
     * Sets failed_recharge_attempts
     *
     * @param int $failed_recharge_attempts failed_recharge_attempts
     *
     * @return $this
     */
    public function setFailedRechargeAttempts($failed_recharge_attempts)
    {
        $this->container['failed_recharge_attempts'] = $failed_recharge_attempts;

        return $this;
    }

    /**
     * Gets is_carrier_number
     *
     * @return bool
     */
    public function getIsCarrierNumber()
    {
        return $this->container['is_carrier_number'];
    }

    /**
     * Sets is_carrier_number
     *
     * @param bool $is_carrier_number is_carrier_number
     *
     * @return $this
     */
    public function setIsCarrierNumber($is_carrier_number)
    {
        $this->container['is_carrier_number'] = $is_carrier_number;

        return $this;
    }

    /**
     * Gets integration_settings
     *
     * @return \Ringba\Model\IntegrationSetting[]
     */
    public function getIntegrationSettings()
    {
        return $this->container['integration_settings'];
    }

    /**
     * Sets integration_settings
     *
     * @param \Ringba\Model\IntegrationSetting[] $integration_settings integration_settings
     *
     * @return $this
     */
    public function setIntegrationSettings($integration_settings)
    {
        $this->container['integration_settings'] = $integration_settings;

        return $this;
    }

    /**
     * Gets int_setting_ids
     *
     * @return string[]
     */
    public function getIntSettingIds()
    {
        return $this->container['int_setting_ids'];
    }

    /**
     * Sets int_setting_ids
     *
     * @param string[] $int_setting_ids int_setting_ids
     *
     * @return $this
     */
    public function setIntSettingIds($int_setting_ids)
    {
        $this->container['int_setting_ids'] = $int_setting_ids;

        return $this;
    }

    /**
     * Gets affiliate
     *
     * @return \Ringba\Model\Affiliate
     */
    public function getAffiliate()
    {
        return $this->container['affiliate'];
    }

    /**
     * Sets affiliate
     *
     * @param \Ringba\Model\Affiliate $affiliate affiliate
     *
     * @return $this
     */
    public function setAffiliate($affiliate)
    {
        $this->container['affiliate'] = $affiliate;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string $account_id account_id
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool $enabled enabled
     *
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets version
     *
     * @return int
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param int $version version
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


