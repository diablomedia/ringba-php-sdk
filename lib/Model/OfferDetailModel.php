<?php
/**
 * OfferDetailModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ringba
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * api.ringba.com
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.10
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ringba\Model;

use \ArrayAccess;
use \Ringba\ObjectSerializer;

/**
 * OfferDetailModel Class Doc Comment
 *
 * @category Class
 * @package  Ringba
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OfferDetailModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OfferDetailModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'revision' => 'int',
        'offer_sequence' => 'string',
        'notes' => 'string',
        'category' => 'string',
        'expiration_reason' => 'string',
        'language_codes' => 'string[]',
        'number_restrictions' => '\Ringba\Model\OfferNumberRestrictions',
        'publisher_id' => 'string',
        'decline_reason' => 'string',
        'payout_settings' => '\Ringba\Model\PayoutConversionModel[]',
        'campaign_id' => 'string',
        'campaign_name' => 'string',
        'name' => 'string',
        'description' => 'string',
        'country_code' => 'string',
        'offer_participation_status' => 'string',
        'offer_state' => 'string',
        'offer_visibility' => 'string',
        'require_approval' => 'bool',
        'expiration' => '\DateTime',
        'time_zone_id' => 'string',
        'publisher_has_number' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'revision' => 'int32',
        'offer_sequence' => null,
        'notes' => null,
        'category' => null,
        'expiration_reason' => null,
        'language_codes' => null,
        'number_restrictions' => null,
        'publisher_id' => null,
        'decline_reason' => null,
        'payout_settings' => null,
        'campaign_id' => null,
        'campaign_name' => null,
        'name' => null,
        'description' => null,
        'country_code' => null,
        'offer_participation_status' => null,
        'offer_state' => null,
        'offer_visibility' => null,
        'require_approval' => null,
        'expiration' => 'date-time',
        'time_zone_id' => null,
        'publisher_has_number' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'revision' => 'revision',
        'offer_sequence' => 'offerSequence',
        'notes' => 'notes',
        'category' => 'category',
        'expiration_reason' => 'expirationReason',
        'language_codes' => 'languageCodes',
        'number_restrictions' => 'numberRestrictions',
        'publisher_id' => 'publisherId',
        'decline_reason' => 'declineReason',
        'payout_settings' => 'payoutSettings',
        'campaign_id' => 'campaignId',
        'campaign_name' => 'campaignName',
        'name' => 'name',
        'description' => 'description',
        'country_code' => 'countryCode',
        'offer_participation_status' => 'offerParticipationStatus',
        'offer_state' => 'offerState',
        'offer_visibility' => 'offerVisibility',
        'require_approval' => 'requireApproval',
        'expiration' => 'expiration',
        'time_zone_id' => 'timeZoneId',
        'publisher_has_number' => 'publisherHasNumber'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'revision' => 'setRevision',
        'offer_sequence' => 'setOfferSequence',
        'notes' => 'setNotes',
        'category' => 'setCategory',
        'expiration_reason' => 'setExpirationReason',
        'language_codes' => 'setLanguageCodes',
        'number_restrictions' => 'setNumberRestrictions',
        'publisher_id' => 'setPublisherId',
        'decline_reason' => 'setDeclineReason',
        'payout_settings' => 'setPayoutSettings',
        'campaign_id' => 'setCampaignId',
        'campaign_name' => 'setCampaignName',
        'name' => 'setName',
        'description' => 'setDescription',
        'country_code' => 'setCountryCode',
        'offer_participation_status' => 'setOfferParticipationStatus',
        'offer_state' => 'setOfferState',
        'offer_visibility' => 'setOfferVisibility',
        'require_approval' => 'setRequireApproval',
        'expiration' => 'setExpiration',
        'time_zone_id' => 'setTimeZoneId',
        'publisher_has_number' => 'setPublisherHasNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'revision' => 'getRevision',
        'offer_sequence' => 'getOfferSequence',
        'notes' => 'getNotes',
        'category' => 'getCategory',
        'expiration_reason' => 'getExpirationReason',
        'language_codes' => 'getLanguageCodes',
        'number_restrictions' => 'getNumberRestrictions',
        'publisher_id' => 'getPublisherId',
        'decline_reason' => 'getDeclineReason',
        'payout_settings' => 'getPayoutSettings',
        'campaign_id' => 'getCampaignId',
        'campaign_name' => 'getCampaignName',
        'name' => 'getName',
        'description' => 'getDescription',
        'country_code' => 'getCountryCode',
        'offer_participation_status' => 'getOfferParticipationStatus',
        'offer_state' => 'getOfferState',
        'offer_visibility' => 'getOfferVisibility',
        'require_approval' => 'getRequireApproval',
        'expiration' => 'getExpiration',
        'time_zone_id' => 'getTimeZoneId',
        'publisher_has_number' => 'getPublisherHasNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['revision'] = isset($data['revision']) ? $data['revision'] : null;
        $this->container['offer_sequence'] = isset($data['offer_sequence']) ? $data['offer_sequence'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['expiration_reason'] = isset($data['expiration_reason']) ? $data['expiration_reason'] : null;
        $this->container['language_codes'] = isset($data['language_codes']) ? $data['language_codes'] : null;
        $this->container['number_restrictions'] = isset($data['number_restrictions']) ? $data['number_restrictions'] : null;
        $this->container['publisher_id'] = isset($data['publisher_id']) ? $data['publisher_id'] : null;
        $this->container['decline_reason'] = isset($data['decline_reason']) ? $data['decline_reason'] : null;
        $this->container['payout_settings'] = isset($data['payout_settings']) ? $data['payout_settings'] : null;
        $this->container['campaign_id'] = isset($data['campaign_id']) ? $data['campaign_id'] : null;
        $this->container['campaign_name'] = isset($data['campaign_name']) ? $data['campaign_name'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['country_code'] = isset($data['country_code']) ? $data['country_code'] : null;
        $this->container['offer_participation_status'] = isset($data['offer_participation_status']) ? $data['offer_participation_status'] : null;
        $this->container['offer_state'] = isset($data['offer_state']) ? $data['offer_state'] : null;
        $this->container['offer_visibility'] = isset($data['offer_visibility']) ? $data['offer_visibility'] : null;
        $this->container['require_approval'] = isset($data['require_approval']) ? $data['require_approval'] : null;
        $this->container['expiration'] = isset($data['expiration']) ? $data['expiration'] : null;
        $this->container['time_zone_id'] = isset($data['time_zone_id']) ? $data['time_zone_id'] : null;
        $this->container['publisher_has_number'] = isset($data['publisher_has_number']) ? $data['publisher_has_number'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets revision
     *
     * @return int
     */
    public function getRevision()
    {
        return $this->container['revision'];
    }

    /**
     * Sets revision
     *
     * @param int $revision revision
     *
     * @return $this
     */
    public function setRevision($revision)
    {
        $this->container['revision'] = $revision;

        return $this;
    }

    /**
     * Gets offer_sequence
     *
     * @return string
     */
    public function getOfferSequence()
    {
        return $this->container['offer_sequence'];
    }

    /**
     * Sets offer_sequence
     *
     * @param string $offer_sequence offer_sequence
     *
     * @return $this
     */
    public function setOfferSequence($offer_sequence)
    {
        $this->container['offer_sequence'] = $offer_sequence;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string $notes notes
     *
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string $category category
     *
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets expiration_reason
     *
     * @return string
     */
    public function getExpirationReason()
    {
        return $this->container['expiration_reason'];
    }

    /**
     * Sets expiration_reason
     *
     * @param string $expiration_reason expiration_reason
     *
     * @return $this
     */
    public function setExpirationReason($expiration_reason)
    {
        $this->container['expiration_reason'] = $expiration_reason;

        return $this;
    }

    /**
     * Gets language_codes
     *
     * @return string[]
     */
    public function getLanguageCodes()
    {
        return $this->container['language_codes'];
    }

    /**
     * Sets language_codes
     *
     * @param string[] $language_codes language_codes
     *
     * @return $this
     */
    public function setLanguageCodes($language_codes)
    {
        $this->container['language_codes'] = $language_codes;

        return $this;
    }

    /**
     * Gets number_restrictions
     *
     * @return \Ringba\Model\OfferNumberRestrictions
     */
    public function getNumberRestrictions()
    {
        return $this->container['number_restrictions'];
    }

    /**
     * Sets number_restrictions
     *
     * @param \Ringba\Model\OfferNumberRestrictions $number_restrictions number_restrictions
     *
     * @return $this
     */
    public function setNumberRestrictions($number_restrictions)
    {
        $this->container['number_restrictions'] = $number_restrictions;

        return $this;
    }

    /**
     * Gets publisher_id
     *
     * @return string
     */
    public function getPublisherId()
    {
        return $this->container['publisher_id'];
    }

    /**
     * Sets publisher_id
     *
     * @param string $publisher_id publisher_id
     *
     * @return $this
     */
    public function setPublisherId($publisher_id)
    {
        $this->container['publisher_id'] = $publisher_id;

        return $this;
    }

    /**
     * Gets decline_reason
     *
     * @return string
     */
    public function getDeclineReason()
    {
        return $this->container['decline_reason'];
    }

    /**
     * Sets decline_reason
     *
     * @param string $decline_reason decline_reason
     *
     * @return $this
     */
    public function setDeclineReason($decline_reason)
    {
        $this->container['decline_reason'] = $decline_reason;

        return $this;
    }

    /**
     * Gets payout_settings
     *
     * @return \Ringba\Model\PayoutConversionModel[]
     */
    public function getPayoutSettings()
    {
        return $this->container['payout_settings'];
    }

    /**
     * Sets payout_settings
     *
     * @param \Ringba\Model\PayoutConversionModel[] $payout_settings payout_settings
     *
     * @return $this
     */
    public function setPayoutSettings($payout_settings)
    {
        $this->container['payout_settings'] = $payout_settings;

        return $this;
    }

    /**
     * Gets campaign_id
     *
     * @return string
     */
    public function getCampaignId()
    {
        return $this->container['campaign_id'];
    }

    /**
     * Sets campaign_id
     *
     * @param string $campaign_id campaign_id
     *
     * @return $this
     */
    public function setCampaignId($campaign_id)
    {
        $this->container['campaign_id'] = $campaign_id;

        return $this;
    }

    /**
     * Gets campaign_name
     *
     * @return string
     */
    public function getCampaignName()
    {
        return $this->container['campaign_name'];
    }

    /**
     * Sets campaign_name
     *
     * @param string $campaign_name campaign_name
     *
     * @return $this
     */
    public function setCampaignName($campaign_name)
    {
        $this->container['campaign_name'] = $campaign_name;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string $country_code country_code
     *
     * @return $this
     */
    public function setCountryCode($country_code)
    {
        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets offer_participation_status
     *
     * @return string
     */
    public function getOfferParticipationStatus()
    {
        return $this->container['offer_participation_status'];
    }

    /**
     * Sets offer_participation_status
     *
     * @param string $offer_participation_status offer_participation_status
     *
     * @return $this
     */
    public function setOfferParticipationStatus($offer_participation_status)
    {
        $this->container['offer_participation_status'] = $offer_participation_status;

        return $this;
    }

    /**
     * Gets offer_state
     *
     * @return string
     */
    public function getOfferState()
    {
        return $this->container['offer_state'];
    }

    /**
     * Sets offer_state
     *
     * @param string $offer_state offer_state
     *
     * @return $this
     */
    public function setOfferState($offer_state)
    {
        $this->container['offer_state'] = $offer_state;

        return $this;
    }

    /**
     * Gets offer_visibility
     *
     * @return string
     */
    public function getOfferVisibility()
    {
        return $this->container['offer_visibility'];
    }

    /**
     * Sets offer_visibility
     *
     * @param string $offer_visibility offer_visibility
     *
     * @return $this
     */
    public function setOfferVisibility($offer_visibility)
    {
        $this->container['offer_visibility'] = $offer_visibility;

        return $this;
    }

    /**
     * Gets require_approval
     *
     * @return bool
     */
    public function getRequireApproval()
    {
        return $this->container['require_approval'];
    }

    /**
     * Sets require_approval
     *
     * @param bool $require_approval require_approval
     *
     * @return $this
     */
    public function setRequireApproval($require_approval)
    {
        $this->container['require_approval'] = $require_approval;

        return $this;
    }

    /**
     * Gets expiration
     *
     * @return \DateTime
     */
    public function getExpiration()
    {
        return $this->container['expiration'];
    }

    /**
     * Sets expiration
     *
     * @param \DateTime $expiration expiration
     *
     * @return $this
     */
    public function setExpiration($expiration)
    {
        $this->container['expiration'] = $expiration;

        return $this;
    }

    /**
     * Gets time_zone_id
     *
     * @return string
     */
    public function getTimeZoneId()
    {
        return $this->container['time_zone_id'];
    }

    /**
     * Sets time_zone_id
     *
     * @param string $time_zone_id time_zone_id
     *
     * @return $this
     */
    public function setTimeZoneId($time_zone_id)
    {
        $this->container['time_zone_id'] = $time_zone_id;

        return $this;
    }

    /**
     * Gets publisher_has_number
     *
     * @return bool
     */
    public function getPublisherHasNumber()
    {
        return $this->container['publisher_has_number'];
    }

    /**
     * Sets publisher_has_number
     *
     * @param bool $publisher_has_number publisher_has_number
     *
     * @return $this
     */
    public function setPublisherHasNumber($publisher_has_number)
    {
        $this->container['publisher_has_number'] = $publisher_has_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


