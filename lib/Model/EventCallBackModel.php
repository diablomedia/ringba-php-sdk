<?php
/**
 * EventCallBackModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ringba
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * api.ringba.com
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.10
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ringba\Model;

use \ArrayAccess;
use \Ringba\ObjectSerializer;

/**
 * EventCallBackModel Class Doc Comment
 *
 * @category Class
 * @package  Ringba
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EventCallBackModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EventCallBackModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'pixel_url' => 'string',
        'event_code' => 'string',
        'method' => 'string',
        'content_type' => 'string',
        'post_body' => 'string',
        'headers' => 'map[string,string]',
        'basic_auth_username' => 'string',
        'basic_auth_password' => 'string',
        'criteria' => '\Ringba\Model\TagRoutableRule[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'pixel_url' => null,
        'event_code' => null,
        'method' => null,
        'content_type' => null,
        'post_body' => null,
        'headers' => null,
        'basic_auth_username' => null,
        'basic_auth_password' => null,
        'criteria' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'pixel_url' => 'pixelUrl',
        'event_code' => 'eventCode',
        'method' => 'method',
        'content_type' => 'contentType',
        'post_body' => 'postBody',
        'headers' => 'headers',
        'basic_auth_username' => 'basicAuthUsername',
        'basic_auth_password' => 'basicAuthPassword',
        'criteria' => 'criteria'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'pixel_url' => 'setPixelUrl',
        'event_code' => 'setEventCode',
        'method' => 'setMethod',
        'content_type' => 'setContentType',
        'post_body' => 'setPostBody',
        'headers' => 'setHeaders',
        'basic_auth_username' => 'setBasicAuthUsername',
        'basic_auth_password' => 'setBasicAuthPassword',
        'criteria' => 'setCriteria'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'pixel_url' => 'getPixelUrl',
        'event_code' => 'getEventCode',
        'method' => 'getMethod',
        'content_type' => 'getContentType',
        'post_body' => 'getPostBody',
        'headers' => 'getHeaders',
        'basic_auth_username' => 'getBasicAuthUsername',
        'basic_auth_password' => 'getBasicAuthPassword',
        'criteria' => 'getCriteria'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['pixel_url'] = isset($data['pixel_url']) ? $data['pixel_url'] : null;
        $this->container['event_code'] = isset($data['event_code']) ? $data['event_code'] : null;
        $this->container['method'] = isset($data['method']) ? $data['method'] : null;
        $this->container['content_type'] = isset($data['content_type']) ? $data['content_type'] : null;
        $this->container['post_body'] = isset($data['post_body']) ? $data['post_body'] : null;
        $this->container['headers'] = isset($data['headers']) ? $data['headers'] : null;
        $this->container['basic_auth_username'] = isset($data['basic_auth_username']) ? $data['basic_auth_username'] : null;
        $this->container['basic_auth_password'] = isset($data['basic_auth_password']) ? $data['basic_auth_password'] : null;
        $this->container['criteria'] = isset($data['criteria']) ? $data['criteria'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['pixel_url'] === null) {
            $invalidProperties[] = "'pixel_url' can't be null";
        }
        if ($this->container['event_code'] === null) {
            $invalidProperties[] = "'event_code' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets pixel_url
     *
     * @return string
     */
    public function getPixelUrl()
    {
        return $this->container['pixel_url'];
    }

    /**
     * Sets pixel_url
     *
     * @param string $pixel_url pixel_url
     *
     * @return $this
     */
    public function setPixelUrl($pixel_url)
    {
        $this->container['pixel_url'] = $pixel_url;

        return $this;
    }

    /**
     * Gets event_code
     *
     * @return string
     */
    public function getEventCode()
    {
        return $this->container['event_code'];
    }

    /**
     * Sets event_code
     *
     * @param string $event_code event_code
     *
     * @return $this
     */
    public function setEventCode($event_code)
    {
        $this->container['event_code'] = $event_code;

        return $this;
    }

    /**
     * Gets method
     *
     * @return string
     */
    public function getMethod()
    {
        return $this->container['method'];
    }

    /**
     * Sets method
     *
     * @param string $method method
     *
     * @return $this
     */
    public function setMethod($method)
    {
        $this->container['method'] = $method;

        return $this;
    }

    /**
     * Gets content_type
     *
     * @return string
     */
    public function getContentType()
    {
        return $this->container['content_type'];
    }

    /**
     * Sets content_type
     *
     * @param string $content_type content_type
     *
     * @return $this
     */
    public function setContentType($content_type)
    {
        $this->container['content_type'] = $content_type;

        return $this;
    }

    /**
     * Gets post_body
     *
     * @return string
     */
    public function getPostBody()
    {
        return $this->container['post_body'];
    }

    /**
     * Sets post_body
     *
     * @param string $post_body post_body
     *
     * @return $this
     */
    public function setPostBody($post_body)
    {
        $this->container['post_body'] = $post_body;

        return $this;
    }

    /**
     * Gets headers
     *
     * @return map[string,string]
     */
    public function getHeaders()
    {
        return $this->container['headers'];
    }

    /**
     * Sets headers
     *
     * @param map[string,string] $headers headers
     *
     * @return $this
     */
    public function setHeaders($headers)
    {
        $this->container['headers'] = $headers;

        return $this;
    }

    /**
     * Gets basic_auth_username
     *
     * @return string
     */
    public function getBasicAuthUsername()
    {
        return $this->container['basic_auth_username'];
    }

    /**
     * Sets basic_auth_username
     *
     * @param string $basic_auth_username basic_auth_username
     *
     * @return $this
     */
    public function setBasicAuthUsername($basic_auth_username)
    {
        $this->container['basic_auth_username'] = $basic_auth_username;

        return $this;
    }

    /**
     * Gets basic_auth_password
     *
     * @return string
     */
    public function getBasicAuthPassword()
    {
        return $this->container['basic_auth_password'];
    }

    /**
     * Sets basic_auth_password
     *
     * @param string $basic_auth_password basic_auth_password
     *
     * @return $this
     */
    public function setBasicAuthPassword($basic_auth_password)
    {
        $this->container['basic_auth_password'] = $basic_auth_password;

        return $this;
    }

    /**
     * Gets criteria
     *
     * @return \Ringba\Model\TagRoutableRule[]
     */
    public function getCriteria()
    {
        return $this->container['criteria'];
    }

    /**
     * Sets criteria
     *
     * @param \Ringba\Model\TagRoutableRule[] $criteria criteria
     *
     * @return $this
     */
    public function setCriteria($criteria)
    {
        $this->container['criteria'] = $criteria;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


