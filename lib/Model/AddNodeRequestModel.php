<?php
/**
 * AddNodeRequestModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ringba
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * api.ringba.com
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.10
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ringba\Model;

use \ArrayAccess;
use \Ringba\ObjectSerializer;

/**
 * AddNodeRequestModel Class Doc Comment
 *
 * @category Class
 * @package  Ringba
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AddNodeRequestModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AddNodeRequestModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'fail_on_error' => 'bool',
        'parent_node_id' => 'string',
        'node' => '\Ringba\Model\IVRNodeRequestModel',
        'index' => 'int',
        'criteria' => '\Ringba\Model\TagRoutableRule[]',
        'on_success' => 'bool',
        'name' => 'string',
        'meta_data' => 'map[string,object]',
        'ivr_tree' => '\Ringba\Model\IVRTree'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'fail_on_error' => null,
        'parent_node_id' => null,
        'node' => null,
        'index' => 'int32',
        'criteria' => null,
        'on_success' => null,
        'name' => null,
        'meta_data' => null,
        'ivr_tree' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'fail_on_error' => 'failOnError',
        'parent_node_id' => 'parentNodeId',
        'node' => 'node',
        'index' => 'index',
        'criteria' => 'criteria',
        'on_success' => 'onSuccess',
        'name' => 'name',
        'meta_data' => 'metaData',
        'ivr_tree' => 'ivrTree'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'fail_on_error' => 'setFailOnError',
        'parent_node_id' => 'setParentNodeId',
        'node' => 'setNode',
        'index' => 'setIndex',
        'criteria' => 'setCriteria',
        'on_success' => 'setOnSuccess',
        'name' => 'setName',
        'meta_data' => 'setMetaData',
        'ivr_tree' => 'setIvrTree'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'fail_on_error' => 'getFailOnError',
        'parent_node_id' => 'getParentNodeId',
        'node' => 'getNode',
        'index' => 'getIndex',
        'criteria' => 'getCriteria',
        'on_success' => 'getOnSuccess',
        'name' => 'getName',
        'meta_data' => 'getMetaData',
        'ivr_tree' => 'getIvrTree'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['fail_on_error'] = isset($data['fail_on_error']) ? $data['fail_on_error'] : null;
        $this->container['parent_node_id'] = isset($data['parent_node_id']) ? $data['parent_node_id'] : null;
        $this->container['node'] = isset($data['node']) ? $data['node'] : null;
        $this->container['index'] = isset($data['index']) ? $data['index'] : null;
        $this->container['criteria'] = isset($data['criteria']) ? $data['criteria'] : null;
        $this->container['on_success'] = isset($data['on_success']) ? $data['on_success'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['meta_data'] = isset($data['meta_data']) ? $data['meta_data'] : null;
        $this->container['ivr_tree'] = isset($data['ivr_tree']) ? $data['ivr_tree'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['parent_node_id'] === null) {
            $invalidProperties[] = "'parent_node_id' can't be null";
        }
        if ($this->container['node'] === null) {
            $invalidProperties[] = "'node' can't be null";
        }
        if ($this->container['ivr_tree'] === null) {
            $invalidProperties[] = "'ivr_tree' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets fail_on_error
     *
     * @return bool
     */
    public function getFailOnError()
    {
        return $this->container['fail_on_error'];
    }

    /**
     * Sets fail_on_error
     *
     * @param bool $fail_on_error fail_on_error
     *
     * @return $this
     */
    public function setFailOnError($fail_on_error)
    {
        $this->container['fail_on_error'] = $fail_on_error;

        return $this;
    }

    /**
     * Gets parent_node_id
     *
     * @return string
     */
    public function getParentNodeId()
    {
        return $this->container['parent_node_id'];
    }

    /**
     * Sets parent_node_id
     *
     * @param string $parent_node_id parent_node_id
     *
     * @return $this
     */
    public function setParentNodeId($parent_node_id)
    {
        $this->container['parent_node_id'] = $parent_node_id;

        return $this;
    }

    /**
     * Gets node
     *
     * @return \Ringba\Model\IVRNodeRequestModel
     */
    public function getNode()
    {
        return $this->container['node'];
    }

    /**
     * Sets node
     *
     * @param \Ringba\Model\IVRNodeRequestModel $node node
     *
     * @return $this
     */
    public function setNode($node)
    {
        $this->container['node'] = $node;

        return $this;
    }

    /**
     * Gets index
     *
     * @return int
     */
    public function getIndex()
    {
        return $this->container['index'];
    }

    /**
     * Sets index
     *
     * @param int $index index
     *
     * @return $this
     */
    public function setIndex($index)
    {
        $this->container['index'] = $index;

        return $this;
    }

    /**
     * Gets criteria
     *
     * @return \Ringba\Model\TagRoutableRule[]
     */
    public function getCriteria()
    {
        return $this->container['criteria'];
    }

    /**
     * Sets criteria
     *
     * @param \Ringba\Model\TagRoutableRule[] $criteria criteria
     *
     * @return $this
     */
    public function setCriteria($criteria)
    {
        $this->container['criteria'] = $criteria;

        return $this;
    }

    /**
     * Gets on_success
     *
     * @return bool
     */
    public function getOnSuccess()
    {
        return $this->container['on_success'];
    }

    /**
     * Sets on_success
     *
     * @param bool $on_success on_success
     *
     * @return $this
     */
    public function setOnSuccess($on_success)
    {
        $this->container['on_success'] = $on_success;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets meta_data
     *
     * @return map[string,object]
     */
    public function getMetaData()
    {
        return $this->container['meta_data'];
    }

    /**
     * Sets meta_data
     *
     * @param map[string,object] $meta_data meta_data
     *
     * @return $this
     */
    public function setMetaData($meta_data)
    {
        $this->container['meta_data'] = $meta_data;

        return $this;
    }

    /**
     * Gets ivr_tree
     *
     * @return \Ringba\Model\IVRTree
     */
    public function getIvrTree()
    {
        return $this->container['ivr_tree'];
    }

    /**
     * Sets ivr_tree
     *
     * @param \Ringba\Model\IVRTree $ivr_tree ivr_tree
     *
     * @return $this
     */
    public function setIvrTree($ivr_tree)
    {
        $this->container['ivr_tree'] = $ivr_tree;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


