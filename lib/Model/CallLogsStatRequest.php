<?php
/**
 * CallLogsStatRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ringba
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * api.ringba.com
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.10
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ringba\Model;

use \ArrayAccess;
use \Ringba\ObjectSerializer;

/**
 * CallLogsStatRequest Class Doc Comment
 *
 * @category Class
 * @package  Ringba
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CallLogsStatRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CallLogsStatRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'date_range' => '\Ringba\Model\ReportTime',
        'time_series' => '\Ringba\Model\TimeSeriesSettings',
        'call_log' => '\Ringba\Model\CallLogSettings',
        'sum_group_bys' => 'string[]',
        'message_names' => 'string[]',
        'filters' => '\Ringba\Model\Filter[]',
        'tag_filters' => '\Ringba\Model\TagFilter[]',
        'tag_sum_group_bys' => '\Ringba\Model\KeyValuePairStringString[]',
        'time_zone_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'date_range' => null,
        'time_series' => null,
        'call_log' => null,
        'sum_group_bys' => null,
        'message_names' => null,
        'filters' => null,
        'tag_filters' => null,
        'tag_sum_group_bys' => null,
        'time_zone_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'date_range' => 'dateRange',
        'time_series' => 'timeSeries',
        'call_log' => 'callLog',
        'sum_group_bys' => 'sumGroupBys',
        'message_names' => 'messageNames',
        'filters' => 'filters',
        'tag_filters' => 'tagFilters',
        'tag_sum_group_bys' => 'tagSumGroupBys',
        'time_zone_id' => 'timeZoneId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'date_range' => 'setDateRange',
        'time_series' => 'setTimeSeries',
        'call_log' => 'setCallLog',
        'sum_group_bys' => 'setSumGroupBys',
        'message_names' => 'setMessageNames',
        'filters' => 'setFilters',
        'tag_filters' => 'setTagFilters',
        'tag_sum_group_bys' => 'setTagSumGroupBys',
        'time_zone_id' => 'setTimeZoneId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'date_range' => 'getDateRange',
        'time_series' => 'getTimeSeries',
        'call_log' => 'getCallLog',
        'sum_group_bys' => 'getSumGroupBys',
        'message_names' => 'getMessageNames',
        'filters' => 'getFilters',
        'tag_filters' => 'getTagFilters',
        'tag_sum_group_bys' => 'getTagSumGroupBys',
        'time_zone_id' => 'getTimeZoneId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['date_range'] = isset($data['date_range']) ? $data['date_range'] : null;
        $this->container['time_series'] = isset($data['time_series']) ? $data['time_series'] : null;
        $this->container['call_log'] = isset($data['call_log']) ? $data['call_log'] : null;
        $this->container['sum_group_bys'] = isset($data['sum_group_bys']) ? $data['sum_group_bys'] : null;
        $this->container['message_names'] = isset($data['message_names']) ? $data['message_names'] : null;
        $this->container['filters'] = isset($data['filters']) ? $data['filters'] : null;
        $this->container['tag_filters'] = isset($data['tag_filters']) ? $data['tag_filters'] : null;
        $this->container['tag_sum_group_bys'] = isset($data['tag_sum_group_bys']) ? $data['tag_sum_group_bys'] : null;
        $this->container['time_zone_id'] = isset($data['time_zone_id']) ? $data['time_zone_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['date_range'] === null) {
            $invalidProperties[] = "'date_range' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets date_range
     *
     * @return \Ringba\Model\ReportTime
     */
    public function getDateRange()
    {
        return $this->container['date_range'];
    }

    /**
     * Sets date_range
     *
     * @param \Ringba\Model\ReportTime $date_range date_range
     *
     * @return $this
     */
    public function setDateRange($date_range)
    {
        $this->container['date_range'] = $date_range;

        return $this;
    }

    /**
     * Gets time_series
     *
     * @return \Ringba\Model\TimeSeriesSettings
     */
    public function getTimeSeries()
    {
        return $this->container['time_series'];
    }

    /**
     * Sets time_series
     *
     * @param \Ringba\Model\TimeSeriesSettings $time_series time_series
     *
     * @return $this
     */
    public function setTimeSeries($time_series)
    {
        $this->container['time_series'] = $time_series;

        return $this;
    }

    /**
     * Gets call_log
     *
     * @return \Ringba\Model\CallLogSettings
     */
    public function getCallLog()
    {
        return $this->container['call_log'];
    }

    /**
     * Sets call_log
     *
     * @param \Ringba\Model\CallLogSettings $call_log call_log
     *
     * @return $this
     */
    public function setCallLog($call_log)
    {
        $this->container['call_log'] = $call_log;

        return $this;
    }

    /**
     * Gets sum_group_bys
     *
     * @return string[]
     */
    public function getSumGroupBys()
    {
        return $this->container['sum_group_bys'];
    }

    /**
     * Sets sum_group_bys
     *
     * @param string[] $sum_group_bys sum_group_bys
     *
     * @return $this
     */
    public function setSumGroupBys($sum_group_bys)
    {
        $this->container['sum_group_bys'] = $sum_group_bys;

        return $this;
    }

    /**
     * Gets message_names
     *
     * @return string[]
     */
    public function getMessageNames()
    {
        return $this->container['message_names'];
    }

    /**
     * Sets message_names
     *
     * @param string[] $message_names message_names
     *
     * @return $this
     */
    public function setMessageNames($message_names)
    {
        $this->container['message_names'] = $message_names;

        return $this;
    }

    /**
     * Gets filters
     *
     * @return \Ringba\Model\Filter[]
     */
    public function getFilters()
    {
        return $this->container['filters'];
    }

    /**
     * Sets filters
     *
     * @param \Ringba\Model\Filter[] $filters filters
     *
     * @return $this
     */
    public function setFilters($filters)
    {
        $this->container['filters'] = $filters;

        return $this;
    }

    /**
     * Gets tag_filters
     *
     * @return \Ringba\Model\TagFilter[]
     */
    public function getTagFilters()
    {
        return $this->container['tag_filters'];
    }

    /**
     * Sets tag_filters
     *
     * @param \Ringba\Model\TagFilter[] $tag_filters tag_filters
     *
     * @return $this
     */
    public function setTagFilters($tag_filters)
    {
        $this->container['tag_filters'] = $tag_filters;

        return $this;
    }

    /**
     * Gets tag_sum_group_bys
     *
     * @return \Ringba\Model\KeyValuePairStringString[]
     */
    public function getTagSumGroupBys()
    {
        return $this->container['tag_sum_group_bys'];
    }

    /**
     * Sets tag_sum_group_bys
     *
     * @param \Ringba\Model\KeyValuePairStringString[] $tag_sum_group_bys tag_sum_group_bys
     *
     * @return $this
     */
    public function setTagSumGroupBys($tag_sum_group_bys)
    {
        $this->container['tag_sum_group_bys'] = $tag_sum_group_bys;

        return $this;
    }

    /**
     * Gets time_zone_id
     *
     * @return string
     */
    public function getTimeZoneId()
    {
        return $this->container['time_zone_id'];
    }

    /**
     * Sets time_zone_id
     *
     * @param string $time_zone_id time_zone_id
     *
     * @return $this
     */
    public function setTimeZoneId($time_zone_id)
    {
        $this->container['time_zone_id'] = $time_zone_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


