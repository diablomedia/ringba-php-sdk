<?php
/**
 * TagFilter
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ringba
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * api.ringba.com
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.10
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ringba\Model;

use \ArrayAccess;
use \Ringba\ObjectSerializer;

/**
 * TagFilter Class Doc Comment
 *
 * @category Class
 * @package  Ringba
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TagFilter implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TagFilter';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'is_negative' => 'bool',
        'is_contains' => 'bool',
        'tag_type' => 'string',
        'tag_value' => 'string',
        'tag_name' => 'string',
        'tag_source' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'is_negative' => null,
        'is_contains' => null,
        'tag_type' => null,
        'tag_value' => null,
        'tag_name' => null,
        'tag_source' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'is_negative' => 'isNegative',
        'is_contains' => 'isContains',
        'tag_type' => 'tagType',
        'tag_value' => 'tagValue',
        'tag_name' => 'tagName',
        'tag_source' => 'tagSource'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'is_negative' => 'setIsNegative',
        'is_contains' => 'setIsContains',
        'tag_type' => 'setTagType',
        'tag_value' => 'setTagValue',
        'tag_name' => 'setTagName',
        'tag_source' => 'setTagSource'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'is_negative' => 'getIsNegative',
        'is_contains' => 'getIsContains',
        'tag_type' => 'getTagType',
        'tag_value' => 'getTagValue',
        'tag_name' => 'getTagName',
        'tag_source' => 'getTagSource'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['is_negative'] = isset($data['is_negative']) ? $data['is_negative'] : null;
        $this->container['is_contains'] = isset($data['is_contains']) ? $data['is_contains'] : null;
        $this->container['tag_type'] = isset($data['tag_type']) ? $data['tag_type'] : null;
        $this->container['tag_value'] = isset($data['tag_value']) ? $data['tag_value'] : null;
        $this->container['tag_name'] = isset($data['tag_name']) ? $data['tag_name'] : null;
        $this->container['tag_source'] = isset($data['tag_source']) ? $data['tag_source'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets is_negative
     *
     * @return bool
     */
    public function getIsNegative()
    {
        return $this->container['is_negative'];
    }

    /**
     * Sets is_negative
     *
     * @param bool $is_negative is_negative
     *
     * @return $this
     */
    public function setIsNegative($is_negative)
    {
        $this->container['is_negative'] = $is_negative;

        return $this;
    }

    /**
     * Gets is_contains
     *
     * @return bool
     */
    public function getIsContains()
    {
        return $this->container['is_contains'];
    }

    /**
     * Sets is_contains
     *
     * @param bool $is_contains is_contains
     *
     * @return $this
     */
    public function setIsContains($is_contains)
    {
        $this->container['is_contains'] = $is_contains;

        return $this;
    }

    /**
     * Gets tag_type
     *
     * @return string
     */
    public function getTagType()
    {
        return $this->container['tag_type'];
    }

    /**
     * Sets tag_type
     *
     * @param string $tag_type tag_type
     *
     * @return $this
     */
    public function setTagType($tag_type)
    {
        $this->container['tag_type'] = $tag_type;

        return $this;
    }

    /**
     * Gets tag_value
     *
     * @return string
     */
    public function getTagValue()
    {
        return $this->container['tag_value'];
    }

    /**
     * Sets tag_value
     *
     * @param string $tag_value tag_value
     *
     * @return $this
     */
    public function setTagValue($tag_value)
    {
        $this->container['tag_value'] = $tag_value;

        return $this;
    }

    /**
     * Gets tag_name
     *
     * @return string
     */
    public function getTagName()
    {
        return $this->container['tag_name'];
    }

    /**
     * Sets tag_name
     *
     * @param string $tag_name tag_name
     *
     * @return $this
     */
    public function setTagName($tag_name)
    {
        $this->container['tag_name'] = $tag_name;

        return $this;
    }

    /**
     * Gets tag_source
     *
     * @return string
     */
    public function getTagSource()
    {
        return $this->container['tag_source'];
    }

    /**
     * Sets tag_source
     *
     * @param string $tag_source tag_source
     *
     * @return $this
     */
    public function setTagSource($tag_source)
    {
        $this->container['tag_source'] = $tag_source;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


