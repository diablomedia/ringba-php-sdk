<?php
/**
 * RecordCallSetting
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ringba
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * api.ringba.com
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.10
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ringba\Model;

use \ArrayAccess;
use \Ringba\ObjectSerializer;

/**
 * RecordCallSetting Class Doc Comment
 *
 * @category Class
 * @package  Ringba
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RecordCallSetting implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RecordCallSetting';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'record' => 'bool',
        'record_from_answer' => 'bool',
        'trim_silence' => 'bool',
        'dual_channel_recording' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'record' => null,
        'record_from_answer' => null,
        'trim_silence' => null,
        'dual_channel_recording' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'record' => 'record',
        'record_from_answer' => 'recordFromAnswer',
        'trim_silence' => 'trimSilence',
        'dual_channel_recording' => 'dualChannelRecording'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'record' => 'setRecord',
        'record_from_answer' => 'setRecordFromAnswer',
        'trim_silence' => 'setTrimSilence',
        'dual_channel_recording' => 'setDualChannelRecording'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'record' => 'getRecord',
        'record_from_answer' => 'getRecordFromAnswer',
        'trim_silence' => 'getTrimSilence',
        'dual_channel_recording' => 'getDualChannelRecording'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['record'] = isset($data['record']) ? $data['record'] : null;
        $this->container['record_from_answer'] = isset($data['record_from_answer']) ? $data['record_from_answer'] : null;
        $this->container['trim_silence'] = isset($data['trim_silence']) ? $data['trim_silence'] : null;
        $this->container['dual_channel_recording'] = isset($data['dual_channel_recording']) ? $data['dual_channel_recording'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets record
     *
     * @return bool
     */
    public function getRecord()
    {
        return $this->container['record'];
    }

    /**
     * Sets record
     *
     * @param bool $record record
     *
     * @return $this
     */
    public function setRecord($record)
    {
        $this->container['record'] = $record;

        return $this;
    }

    /**
     * Gets record_from_answer
     *
     * @return bool
     */
    public function getRecordFromAnswer()
    {
        return $this->container['record_from_answer'];
    }

    /**
     * Sets record_from_answer
     *
     * @param bool $record_from_answer record_from_answer
     *
     * @return $this
     */
    public function setRecordFromAnswer($record_from_answer)
    {
        $this->container['record_from_answer'] = $record_from_answer;

        return $this;
    }

    /**
     * Gets trim_silence
     *
     * @return bool
     */
    public function getTrimSilence()
    {
        return $this->container['trim_silence'];
    }

    /**
     * Sets trim_silence
     *
     * @param bool $trim_silence trim_silence
     *
     * @return $this
     */
    public function setTrimSilence($trim_silence)
    {
        $this->container['trim_silence'] = $trim_silence;

        return $this;
    }

    /**
     * Gets dual_channel_recording
     *
     * @return bool
     */
    public function getDualChannelRecording()
    {
        return $this->container['dual_channel_recording'];
    }

    /**
     * Sets dual_channel_recording
     *
     * @param bool $dual_channel_recording dual_channel_recording
     *
     * @return $this
     */
    public function setDualChannelRecording($dual_channel_recording)
    {
        $this->container['dual_channel_recording'] = $dual_channel_recording;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


