<?php
/**
 * PingTree
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ringba
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * api.ringba.com
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.10
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ringba\Model;

use \ArrayAccess;
use \Ringba\ObjectSerializer;

/**
 * PingTree Class Doc Comment
 *
 * @category Class
 * @package  Ringba
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PingTree implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PingTree';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'schedule' => '\Ringba\Model\ScheduleAndCapacity',
        'tag_groups' => '\Ringba\Model\TagGroup[]',
        'criteria' => '\Ringba\Model\TagRoutableRule[]',
        'error_settings' => '\Ringba\Model\ErrorSettings',
        'revenue_settings' => '\Ringba\Model\RevenueSettings',
        'waterfall_routing' => 'bool',
        'min_revenue_to_route' => 'double',
        'targets' => '\Ringba\Model\PingTreeTarget[]',
        'id' => 'string',
        'name' => 'string',
        'account_id' => 'string',
        'enabled' => 'bool',
        'version' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'schedule' => null,
        'tag_groups' => null,
        'criteria' => null,
        'error_settings' => null,
        'revenue_settings' => null,
        'waterfall_routing' => null,
        'min_revenue_to_route' => 'double',
        'targets' => null,
        'id' => null,
        'name' => null,
        'account_id' => null,
        'enabled' => null,
        'version' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'schedule' => 'schedule',
        'tag_groups' => 'tagGroups',
        'criteria' => 'criteria',
        'error_settings' => 'errorSettings',
        'revenue_settings' => 'revenueSettings',
        'waterfall_routing' => 'waterfallRouting',
        'min_revenue_to_route' => 'minRevenueToRoute',
        'targets' => 'targets',
        'id' => 'id',
        'name' => 'name',
        'account_id' => 'accountId',
        'enabled' => 'enabled',
        'version' => 'version'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'schedule' => 'setSchedule',
        'tag_groups' => 'setTagGroups',
        'criteria' => 'setCriteria',
        'error_settings' => 'setErrorSettings',
        'revenue_settings' => 'setRevenueSettings',
        'waterfall_routing' => 'setWaterfallRouting',
        'min_revenue_to_route' => 'setMinRevenueToRoute',
        'targets' => 'setTargets',
        'id' => 'setId',
        'name' => 'setName',
        'account_id' => 'setAccountId',
        'enabled' => 'setEnabled',
        'version' => 'setVersion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'schedule' => 'getSchedule',
        'tag_groups' => 'getTagGroups',
        'criteria' => 'getCriteria',
        'error_settings' => 'getErrorSettings',
        'revenue_settings' => 'getRevenueSettings',
        'waterfall_routing' => 'getWaterfallRouting',
        'min_revenue_to_route' => 'getMinRevenueToRoute',
        'targets' => 'getTargets',
        'id' => 'getId',
        'name' => 'getName',
        'account_id' => 'getAccountId',
        'enabled' => 'getEnabled',
        'version' => 'getVersion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['schedule'] = isset($data['schedule']) ? $data['schedule'] : null;
        $this->container['tag_groups'] = isset($data['tag_groups']) ? $data['tag_groups'] : null;
        $this->container['criteria'] = isset($data['criteria']) ? $data['criteria'] : null;
        $this->container['error_settings'] = isset($data['error_settings']) ? $data['error_settings'] : null;
        $this->container['revenue_settings'] = isset($data['revenue_settings']) ? $data['revenue_settings'] : null;
        $this->container['waterfall_routing'] = isset($data['waterfall_routing']) ? $data['waterfall_routing'] : null;
        $this->container['min_revenue_to_route'] = isset($data['min_revenue_to_route']) ? $data['min_revenue_to_route'] : null;
        $this->container['targets'] = isset($data['targets']) ? $data['targets'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets schedule
     *
     * @return \Ringba\Model\ScheduleAndCapacity
     */
    public function getSchedule()
    {
        return $this->container['schedule'];
    }

    /**
     * Sets schedule
     *
     * @param \Ringba\Model\ScheduleAndCapacity $schedule schedule
     *
     * @return $this
     */
    public function setSchedule($schedule)
    {
        $this->container['schedule'] = $schedule;

        return $this;
    }

    /**
     * Gets tag_groups
     *
     * @return \Ringba\Model\TagGroup[]
     */
    public function getTagGroups()
    {
        return $this->container['tag_groups'];
    }

    /**
     * Sets tag_groups
     *
     * @param \Ringba\Model\TagGroup[] $tag_groups tag_groups
     *
     * @return $this
     */
    public function setTagGroups($tag_groups)
    {
        $this->container['tag_groups'] = $tag_groups;

        return $this;
    }

    /**
     * Gets criteria
     *
     * @return \Ringba\Model\TagRoutableRule[]
     */
    public function getCriteria()
    {
        return $this->container['criteria'];
    }

    /**
     * Sets criteria
     *
     * @param \Ringba\Model\TagRoutableRule[] $criteria criteria
     *
     * @return $this
     */
    public function setCriteria($criteria)
    {
        $this->container['criteria'] = $criteria;

        return $this;
    }

    /**
     * Gets error_settings
     *
     * @return \Ringba\Model\ErrorSettings
     */
    public function getErrorSettings()
    {
        return $this->container['error_settings'];
    }

    /**
     * Sets error_settings
     *
     * @param \Ringba\Model\ErrorSettings $error_settings error_settings
     *
     * @return $this
     */
    public function setErrorSettings($error_settings)
    {
        $this->container['error_settings'] = $error_settings;

        return $this;
    }

    /**
     * Gets revenue_settings
     *
     * @return \Ringba\Model\RevenueSettings
     */
    public function getRevenueSettings()
    {
        return $this->container['revenue_settings'];
    }

    /**
     * Sets revenue_settings
     *
     * @param \Ringba\Model\RevenueSettings $revenue_settings revenue_settings
     *
     * @return $this
     */
    public function setRevenueSettings($revenue_settings)
    {
        $this->container['revenue_settings'] = $revenue_settings;

        return $this;
    }

    /**
     * Gets waterfall_routing
     *
     * @return bool
     */
    public function getWaterfallRouting()
    {
        return $this->container['waterfall_routing'];
    }

    /**
     * Sets waterfall_routing
     *
     * @param bool $waterfall_routing waterfall_routing
     *
     * @return $this
     */
    public function setWaterfallRouting($waterfall_routing)
    {
        $this->container['waterfall_routing'] = $waterfall_routing;

        return $this;
    }

    /**
     * Gets min_revenue_to_route
     *
     * @return double
     */
    public function getMinRevenueToRoute()
    {
        return $this->container['min_revenue_to_route'];
    }

    /**
     * Sets min_revenue_to_route
     *
     * @param double $min_revenue_to_route min_revenue_to_route
     *
     * @return $this
     */
    public function setMinRevenueToRoute($min_revenue_to_route)
    {
        $this->container['min_revenue_to_route'] = $min_revenue_to_route;

        return $this;
    }

    /**
     * Gets targets
     *
     * @return \Ringba\Model\PingTreeTarget[]
     */
    public function getTargets()
    {
        return $this->container['targets'];
    }

    /**
     * Sets targets
     *
     * @param \Ringba\Model\PingTreeTarget[] $targets targets
     *
     * @return $this
     */
    public function setTargets($targets)
    {
        $this->container['targets'] = $targets;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string $account_id account_id
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool $enabled enabled
     *
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets version
     *
     * @return int
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param int $version version
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


