<?php
/**
 * PayoutSetting
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ringba
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * api.ringba.com
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.10
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ringba\Model;

use \ArrayAccess;
use \Ringba\ObjectSerializer;

/**
 * PayoutSetting Class Doc Comment
 *
 * @category Class
 * @package  Ringba
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PayoutSetting implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PayoutSetting';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'is_rev_share' => 'bool',
        'rev_share_percentage' => 'double',
        'rev_share_max_payout_amount' => 'double',
        'rev_share_min_payout_amount' => 'double',
        'fixed_payout_amount' => 'double',
        'is_global' => 'bool',
        'capps' => '\Ringba\Model\ScheduleAndCapacity',
        'criteria' => '\Ringba\Model\TagRoutableRule[]',
        'de_dupe_setting' => '\Ringba\Model\DuplicateSetting',
        'conversion_type' => 'string',
        'conversion_args' => 'map[string,object]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'is_rev_share' => null,
        'rev_share_percentage' => 'double',
        'rev_share_max_payout_amount' => 'double',
        'rev_share_min_payout_amount' => 'double',
        'fixed_payout_amount' => 'double',
        'is_global' => null,
        'capps' => null,
        'criteria' => null,
        'de_dupe_setting' => null,
        'conversion_type' => null,
        'conversion_args' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'is_rev_share' => 'isRevShare',
        'rev_share_percentage' => 'revSharePercentage',
        'rev_share_max_payout_amount' => 'revShareMaxPayoutAmount',
        'rev_share_min_payout_amount' => 'revShareMinPayoutAmount',
        'fixed_payout_amount' => 'fixedPayoutAmount',
        'is_global' => 'isGlobal',
        'capps' => 'capps',
        'criteria' => 'criteria',
        'de_dupe_setting' => 'deDupeSetting',
        'conversion_type' => 'conversionType',
        'conversion_args' => 'conversionArgs'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'is_rev_share' => 'setIsRevShare',
        'rev_share_percentage' => 'setRevSharePercentage',
        'rev_share_max_payout_amount' => 'setRevShareMaxPayoutAmount',
        'rev_share_min_payout_amount' => 'setRevShareMinPayoutAmount',
        'fixed_payout_amount' => 'setFixedPayoutAmount',
        'is_global' => 'setIsGlobal',
        'capps' => 'setCapps',
        'criteria' => 'setCriteria',
        'de_dupe_setting' => 'setDeDupeSetting',
        'conversion_type' => 'setConversionType',
        'conversion_args' => 'setConversionArgs'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'is_rev_share' => 'getIsRevShare',
        'rev_share_percentage' => 'getRevSharePercentage',
        'rev_share_max_payout_amount' => 'getRevShareMaxPayoutAmount',
        'rev_share_min_payout_amount' => 'getRevShareMinPayoutAmount',
        'fixed_payout_amount' => 'getFixedPayoutAmount',
        'is_global' => 'getIsGlobal',
        'capps' => 'getCapps',
        'criteria' => 'getCriteria',
        'de_dupe_setting' => 'getDeDupeSetting',
        'conversion_type' => 'getConversionType',
        'conversion_args' => 'getConversionArgs'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['is_rev_share'] = isset($data['is_rev_share']) ? $data['is_rev_share'] : null;
        $this->container['rev_share_percentage'] = isset($data['rev_share_percentage']) ? $data['rev_share_percentage'] : null;
        $this->container['rev_share_max_payout_amount'] = isset($data['rev_share_max_payout_amount']) ? $data['rev_share_max_payout_amount'] : null;
        $this->container['rev_share_min_payout_amount'] = isset($data['rev_share_min_payout_amount']) ? $data['rev_share_min_payout_amount'] : null;
        $this->container['fixed_payout_amount'] = isset($data['fixed_payout_amount']) ? $data['fixed_payout_amount'] : null;
        $this->container['is_global'] = isset($data['is_global']) ? $data['is_global'] : null;
        $this->container['capps'] = isset($data['capps']) ? $data['capps'] : null;
        $this->container['criteria'] = isset($data['criteria']) ? $data['criteria'] : null;
        $this->container['de_dupe_setting'] = isset($data['de_dupe_setting']) ? $data['de_dupe_setting'] : null;
        $this->container['conversion_type'] = isset($data['conversion_type']) ? $data['conversion_type'] : null;
        $this->container['conversion_args'] = isset($data['conversion_args']) ? $data['conversion_args'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets is_rev_share
     *
     * @return bool
     */
    public function getIsRevShare()
    {
        return $this->container['is_rev_share'];
    }

    /**
     * Sets is_rev_share
     *
     * @param bool $is_rev_share is_rev_share
     *
     * @return $this
     */
    public function setIsRevShare($is_rev_share)
    {
        $this->container['is_rev_share'] = $is_rev_share;

        return $this;
    }

    /**
     * Gets rev_share_percentage
     *
     * @return double
     */
    public function getRevSharePercentage()
    {
        return $this->container['rev_share_percentage'];
    }

    /**
     * Sets rev_share_percentage
     *
     * @param double $rev_share_percentage rev_share_percentage
     *
     * @return $this
     */
    public function setRevSharePercentage($rev_share_percentage)
    {
        $this->container['rev_share_percentage'] = $rev_share_percentage;

        return $this;
    }

    /**
     * Gets rev_share_max_payout_amount
     *
     * @return double
     */
    public function getRevShareMaxPayoutAmount()
    {
        return $this->container['rev_share_max_payout_amount'];
    }

    /**
     * Sets rev_share_max_payout_amount
     *
     * @param double $rev_share_max_payout_amount rev_share_max_payout_amount
     *
     * @return $this
     */
    public function setRevShareMaxPayoutAmount($rev_share_max_payout_amount)
    {
        $this->container['rev_share_max_payout_amount'] = $rev_share_max_payout_amount;

        return $this;
    }

    /**
     * Gets rev_share_min_payout_amount
     *
     * @return double
     */
    public function getRevShareMinPayoutAmount()
    {
        return $this->container['rev_share_min_payout_amount'];
    }

    /**
     * Sets rev_share_min_payout_amount
     *
     * @param double $rev_share_min_payout_amount rev_share_min_payout_amount
     *
     * @return $this
     */
    public function setRevShareMinPayoutAmount($rev_share_min_payout_amount)
    {
        $this->container['rev_share_min_payout_amount'] = $rev_share_min_payout_amount;

        return $this;
    }

    /**
     * Gets fixed_payout_amount
     *
     * @return double
     */
    public function getFixedPayoutAmount()
    {
        return $this->container['fixed_payout_amount'];
    }

    /**
     * Sets fixed_payout_amount
     *
     * @param double $fixed_payout_amount fixed_payout_amount
     *
     * @return $this
     */
    public function setFixedPayoutAmount($fixed_payout_amount)
    {
        $this->container['fixed_payout_amount'] = $fixed_payout_amount;

        return $this;
    }

    /**
     * Gets is_global
     *
     * @return bool
     */
    public function getIsGlobal()
    {
        return $this->container['is_global'];
    }

    /**
     * Sets is_global
     *
     * @param bool $is_global is_global
     *
     * @return $this
     */
    public function setIsGlobal($is_global)
    {
        $this->container['is_global'] = $is_global;

        return $this;
    }

    /**
     * Gets capps
     *
     * @return \Ringba\Model\ScheduleAndCapacity
     */
    public function getCapps()
    {
        return $this->container['capps'];
    }

    /**
     * Sets capps
     *
     * @param \Ringba\Model\ScheduleAndCapacity $capps capps
     *
     * @return $this
     */
    public function setCapps($capps)
    {
        $this->container['capps'] = $capps;

        return $this;
    }

    /**
     * Gets criteria
     *
     * @return \Ringba\Model\TagRoutableRule[]
     */
    public function getCriteria()
    {
        return $this->container['criteria'];
    }

    /**
     * Sets criteria
     *
     * @param \Ringba\Model\TagRoutableRule[] $criteria criteria
     *
     * @return $this
     */
    public function setCriteria($criteria)
    {
        $this->container['criteria'] = $criteria;

        return $this;
    }

    /**
     * Gets de_dupe_setting
     *
     * @return \Ringba\Model\DuplicateSetting
     */
    public function getDeDupeSetting()
    {
        return $this->container['de_dupe_setting'];
    }

    /**
     * Sets de_dupe_setting
     *
     * @param \Ringba\Model\DuplicateSetting $de_dupe_setting de_dupe_setting
     *
     * @return $this
     */
    public function setDeDupeSetting($de_dupe_setting)
    {
        $this->container['de_dupe_setting'] = $de_dupe_setting;

        return $this;
    }

    /**
     * Gets conversion_type
     *
     * @return string
     */
    public function getConversionType()
    {
        return $this->container['conversion_type'];
    }

    /**
     * Sets conversion_type
     *
     * @param string $conversion_type conversion_type
     *
     * @return $this
     */
    public function setConversionType($conversion_type)
    {
        $this->container['conversion_type'] = $conversion_type;

        return $this;
    }

    /**
     * Gets conversion_args
     *
     * @return map[string,object]
     */
    public function getConversionArgs()
    {
        return $this->container['conversion_args'];
    }

    /**
     * Sets conversion_args
     *
     * @param map[string,object] $conversion_args conversion_args
     *
     * @return $this
     */
    public function setConversionArgs($conversion_args)
    {
        $this->container['conversion_args'] = $conversion_args;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


