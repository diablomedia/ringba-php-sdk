<?php
/**
 * IVRNodeDescription
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ringba
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * api.ringba.com
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.10
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ringba\Model;

use \ArrayAccess;
use \Ringba\ObjectSerializer;

/**
 * IVRNodeDescription Class Doc Comment
 *
 * @category Class
 * @package  Ringba
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class IVRNodeDescription implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'IVRNodeDescription';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'node_type' => 'string',
        'node_type_id' => 'string',
        'description' => 'string',
        'category' => 'string',
        'parameters' => 'object[]',
        'allowed_parent_types' => 'string[]',
        'banned_parent_types' => 'string[]',
        'potential_links' => '\Ringba\Model\Link[]',
        'required_feature_flag' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'node_type' => null,
        'node_type_id' => null,
        'description' => null,
        'category' => null,
        'parameters' => null,
        'allowed_parent_types' => null,
        'banned_parent_types' => null,
        'potential_links' => null,
        'required_feature_flag' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'node_type' => 'nodeType',
        'node_type_id' => 'nodeTypeId',
        'description' => 'description',
        'category' => 'category',
        'parameters' => 'parameters',
        'allowed_parent_types' => 'allowedParentTypes',
        'banned_parent_types' => 'bannedParentTypes',
        'potential_links' => 'potentialLinks',
        'required_feature_flag' => 'requiredFeatureFlag'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'node_type' => 'setNodeType',
        'node_type_id' => 'setNodeTypeId',
        'description' => 'setDescription',
        'category' => 'setCategory',
        'parameters' => 'setParameters',
        'allowed_parent_types' => 'setAllowedParentTypes',
        'banned_parent_types' => 'setBannedParentTypes',
        'potential_links' => 'setPotentialLinks',
        'required_feature_flag' => 'setRequiredFeatureFlag'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'node_type' => 'getNodeType',
        'node_type_id' => 'getNodeTypeId',
        'description' => 'getDescription',
        'category' => 'getCategory',
        'parameters' => 'getParameters',
        'allowed_parent_types' => 'getAllowedParentTypes',
        'banned_parent_types' => 'getBannedParentTypes',
        'potential_links' => 'getPotentialLinks',
        'required_feature_flag' => 'getRequiredFeatureFlag'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['node_type'] = isset($data['node_type']) ? $data['node_type'] : null;
        $this->container['node_type_id'] = isset($data['node_type_id']) ? $data['node_type_id'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['parameters'] = isset($data['parameters']) ? $data['parameters'] : null;
        $this->container['allowed_parent_types'] = isset($data['allowed_parent_types']) ? $data['allowed_parent_types'] : null;
        $this->container['banned_parent_types'] = isset($data['banned_parent_types']) ? $data['banned_parent_types'] : null;
        $this->container['potential_links'] = isset($data['potential_links']) ? $data['potential_links'] : null;
        $this->container['required_feature_flag'] = isset($data['required_feature_flag']) ? $data['required_feature_flag'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets node_type
     *
     * @return string
     */
    public function getNodeType()
    {
        return $this->container['node_type'];
    }

    /**
     * Sets node_type
     *
     * @param string $node_type node_type
     *
     * @return $this
     */
    public function setNodeType($node_type)
    {
        $this->container['node_type'] = $node_type;

        return $this;
    }

    /**
     * Gets node_type_id
     *
     * @return string
     */
    public function getNodeTypeId()
    {
        return $this->container['node_type_id'];
    }

    /**
     * Sets node_type_id
     *
     * @param string $node_type_id node_type_id
     *
     * @return $this
     */
    public function setNodeTypeId($node_type_id)
    {
        $this->container['node_type_id'] = $node_type_id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string $category category
     *
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets parameters
     *
     * @return object[]
     */
    public function getParameters()
    {
        return $this->container['parameters'];
    }

    /**
     * Sets parameters
     *
     * @param object[] $parameters parameters
     *
     * @return $this
     */
    public function setParameters($parameters)
    {
        $this->container['parameters'] = $parameters;

        return $this;
    }

    /**
     * Gets allowed_parent_types
     *
     * @return string[]
     */
    public function getAllowedParentTypes()
    {
        return $this->container['allowed_parent_types'];
    }

    /**
     * Sets allowed_parent_types
     *
     * @param string[] $allowed_parent_types allowed_parent_types
     *
     * @return $this
     */
    public function setAllowedParentTypes($allowed_parent_types)
    {
        $this->container['allowed_parent_types'] = $allowed_parent_types;

        return $this;
    }

    /**
     * Gets banned_parent_types
     *
     * @return string[]
     */
    public function getBannedParentTypes()
    {
        return $this->container['banned_parent_types'];
    }

    /**
     * Sets banned_parent_types
     *
     * @param string[] $banned_parent_types banned_parent_types
     *
     * @return $this
     */
    public function setBannedParentTypes($banned_parent_types)
    {
        $this->container['banned_parent_types'] = $banned_parent_types;

        return $this;
    }

    /**
     * Gets potential_links
     *
     * @return \Ringba\Model\Link[]
     */
    public function getPotentialLinks()
    {
        return $this->container['potential_links'];
    }

    /**
     * Sets potential_links
     *
     * @param \Ringba\Model\Link[] $potential_links potential_links
     *
     * @return $this
     */
    public function setPotentialLinks($potential_links)
    {
        $this->container['potential_links'] = $potential_links;

        return $this;
    }

    /**
     * Gets required_feature_flag
     *
     * @return string
     */
    public function getRequiredFeatureFlag()
    {
        return $this->container['required_feature_flag'];
    }

    /**
     * Sets required_feature_flag
     *
     * @param string $required_feature_flag required_feature_flag
     *
     * @return $this
     */
    public function setRequiredFeatureFlag($required_feature_flag)
    {
        $this->container['required_feature_flag'] = $required_feature_flag;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


