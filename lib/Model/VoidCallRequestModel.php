<?php
/**
 * VoidCallRequestModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ringba
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * api.ringba.com
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.10
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ringba\Model;

use \ArrayAccess;
use \Ringba\ObjectSerializer;

/**
 * VoidCallRequestModel Class Doc Comment
 *
 * @category Class
 * @package  Ringba
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VoidCallRequestModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'VoidCallRequestModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'inbound_call_id' => 'string',
        'void_reason' => 'string',
        'void_conversion' => 'bool',
        'void_converion_amount' => 'double',
        'void_payout' => 'bool',
        'void_payout_amount' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'inbound_call_id' => null,
        'void_reason' => null,
        'void_conversion' => null,
        'void_converion_amount' => 'double',
        'void_payout' => null,
        'void_payout_amount' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'inbound_call_id' => 'inboundCallId',
        'void_reason' => 'voidReason',
        'void_conversion' => 'voidConversion',
        'void_converion_amount' => 'voidConverionAmount',
        'void_payout' => 'voidPayout',
        'void_payout_amount' => 'voidPayoutAmount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'inbound_call_id' => 'setInboundCallId',
        'void_reason' => 'setVoidReason',
        'void_conversion' => 'setVoidConversion',
        'void_converion_amount' => 'setVoidConverionAmount',
        'void_payout' => 'setVoidPayout',
        'void_payout_amount' => 'setVoidPayoutAmount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'inbound_call_id' => 'getInboundCallId',
        'void_reason' => 'getVoidReason',
        'void_conversion' => 'getVoidConversion',
        'void_converion_amount' => 'getVoidConverionAmount',
        'void_payout' => 'getVoidPayout',
        'void_payout_amount' => 'getVoidPayoutAmount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['inbound_call_id'] = isset($data['inbound_call_id']) ? $data['inbound_call_id'] : null;
        $this->container['void_reason'] = isset($data['void_reason']) ? $data['void_reason'] : null;
        $this->container['void_conversion'] = isset($data['void_conversion']) ? $data['void_conversion'] : null;
        $this->container['void_converion_amount'] = isset($data['void_converion_amount']) ? $data['void_converion_amount'] : null;
        $this->container['void_payout'] = isset($data['void_payout']) ? $data['void_payout'] : null;
        $this->container['void_payout_amount'] = isset($data['void_payout_amount']) ? $data['void_payout_amount'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['inbound_call_id'] === null) {
            $invalidProperties[] = "'inbound_call_id' can't be null";
        }
        if ($this->container['void_reason'] === null) {
            $invalidProperties[] = "'void_reason' can't be null";
        }
        if ($this->container['void_conversion'] === null) {
            $invalidProperties[] = "'void_conversion' can't be null";
        }
        if (!is_null($this->container['void_converion_amount']) && ($this->container['void_converion_amount'] < 0)) {
            $invalidProperties[] = "invalid value for 'void_converion_amount', must be bigger than or equal to 0.";
        }

        if ($this->container['void_payout'] === null) {
            $invalidProperties[] = "'void_payout' can't be null";
        }
        if (!is_null($this->container['void_payout_amount']) && ($this->container['void_payout_amount'] < 0)) {
            $invalidProperties[] = "invalid value for 'void_payout_amount', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets inbound_call_id
     *
     * @return string
     */
    public function getInboundCallId()
    {
        return $this->container['inbound_call_id'];
    }

    /**
     * Sets inbound_call_id
     *
     * @param string $inbound_call_id inbound_call_id
     *
     * @return $this
     */
    public function setInboundCallId($inbound_call_id)
    {
        $this->container['inbound_call_id'] = $inbound_call_id;

        return $this;
    }

    /**
     * Gets void_reason
     *
     * @return string
     */
    public function getVoidReason()
    {
        return $this->container['void_reason'];
    }

    /**
     * Sets void_reason
     *
     * @param string $void_reason void_reason
     *
     * @return $this
     */
    public function setVoidReason($void_reason)
    {
        $this->container['void_reason'] = $void_reason;

        return $this;
    }

    /**
     * Gets void_conversion
     *
     * @return bool
     */
    public function getVoidConversion()
    {
        return $this->container['void_conversion'];
    }

    /**
     * Sets void_conversion
     *
     * @param bool $void_conversion void_conversion
     *
     * @return $this
     */
    public function setVoidConversion($void_conversion)
    {
        $this->container['void_conversion'] = $void_conversion;

        return $this;
    }

    /**
     * Gets void_converion_amount
     *
     * @return double
     */
    public function getVoidConverionAmount()
    {
        return $this->container['void_converion_amount'];
    }

    /**
     * Sets void_converion_amount
     *
     * @param double $void_converion_amount void_converion_amount
     *
     * @return $this
     */
    public function setVoidConverionAmount($void_converion_amount)
    {

        if (!is_null($void_converion_amount) && ($void_converion_amount < 0)) {
            throw new \InvalidArgumentException('invalid value for $void_converion_amount when calling VoidCallRequestModel., must be bigger than or equal to 0.');
        }

        $this->container['void_converion_amount'] = $void_converion_amount;

        return $this;
    }

    /**
     * Gets void_payout
     *
     * @return bool
     */
    public function getVoidPayout()
    {
        return $this->container['void_payout'];
    }

    /**
     * Sets void_payout
     *
     * @param bool $void_payout void_payout
     *
     * @return $this
     */
    public function setVoidPayout($void_payout)
    {
        $this->container['void_payout'] = $void_payout;

        return $this;
    }

    /**
     * Gets void_payout_amount
     *
     * @return double
     */
    public function getVoidPayoutAmount()
    {
        return $this->container['void_payout_amount'];
    }

    /**
     * Sets void_payout_amount
     *
     * @param double $void_payout_amount void_payout_amount
     *
     * @return $this
     */
    public function setVoidPayoutAmount($void_payout_amount)
    {

        if (!is_null($void_payout_amount) && ($void_payout_amount < 0)) {
            throw new \InvalidArgumentException('invalid value for $void_payout_amount when calling VoidCallRequestModel., must be bigger than or equal to 0.');
        }

        $this->container['void_payout_amount'] = $void_payout_amount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


