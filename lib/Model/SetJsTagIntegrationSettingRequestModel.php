<?php
/**
 * SetJsTagIntegrationSettingRequestModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ringba
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * api.ringba.com
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.10
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ringba\Model;

use \ArrayAccess;
use \Ringba\ObjectSerializer;

/**
 * SetJsTagIntegrationSettingRequestModel Class Doc Comment
 *
 * @category Class
 * @package  Ringba
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SetJsTagIntegrationSettingRequestModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SetJsTagIntegrationSettingRequestModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'js_tag_id' => 'string',
        'campaign_id' => 'string',
        'conversion_set' => '\Ringba\Model\IntegrationConversionSet',
        'event_code' => 'string',
        'offline_upload_delay' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'js_tag_id' => null,
        'campaign_id' => null,
        'conversion_set' => null,
        'event_code' => null,
        'offline_upload_delay' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'js_tag_id' => 'jsTagId',
        'campaign_id' => 'campaignId',
        'conversion_set' => 'conversionSet',
        'event_code' => 'eventCode',
        'offline_upload_delay' => 'offlineUploadDelay'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'js_tag_id' => 'setJsTagId',
        'campaign_id' => 'setCampaignId',
        'conversion_set' => 'setConversionSet',
        'event_code' => 'setEventCode',
        'offline_upload_delay' => 'setOfflineUploadDelay'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'js_tag_id' => 'getJsTagId',
        'campaign_id' => 'getCampaignId',
        'conversion_set' => 'getConversionSet',
        'event_code' => 'getEventCode',
        'offline_upload_delay' => 'getOfflineUploadDelay'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['js_tag_id'] = isset($data['js_tag_id']) ? $data['js_tag_id'] : null;
        $this->container['campaign_id'] = isset($data['campaign_id']) ? $data['campaign_id'] : null;
        $this->container['conversion_set'] = isset($data['conversion_set']) ? $data['conversion_set'] : null;
        $this->container['event_code'] = isset($data['event_code']) ? $data['event_code'] : null;
        $this->container['offline_upload_delay'] = isset($data['offline_upload_delay']) ? $data['offline_upload_delay'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets js_tag_id
     *
     * @return string
     */
    public function getJsTagId()
    {
        return $this->container['js_tag_id'];
    }

    /**
     * Sets js_tag_id
     *
     * @param string $js_tag_id js_tag_id
     *
     * @return $this
     */
    public function setJsTagId($js_tag_id)
    {
        $this->container['js_tag_id'] = $js_tag_id;

        return $this;
    }

    /**
     * Gets campaign_id
     *
     * @return string
     */
    public function getCampaignId()
    {
        return $this->container['campaign_id'];
    }

    /**
     * Sets campaign_id
     *
     * @param string $campaign_id campaign_id
     *
     * @return $this
     */
    public function setCampaignId($campaign_id)
    {
        $this->container['campaign_id'] = $campaign_id;

        return $this;
    }

    /**
     * Gets conversion_set
     *
     * @return \Ringba\Model\IntegrationConversionSet
     */
    public function getConversionSet()
    {
        return $this->container['conversion_set'];
    }

    /**
     * Sets conversion_set
     *
     * @param \Ringba\Model\IntegrationConversionSet $conversion_set conversion_set
     *
     * @return $this
     */
    public function setConversionSet($conversion_set)
    {
        $this->container['conversion_set'] = $conversion_set;

        return $this;
    }

    /**
     * Gets event_code
     *
     * @return string
     */
    public function getEventCode()
    {
        return $this->container['event_code'];
    }

    /**
     * Sets event_code
     *
     * @param string $event_code event_code
     *
     * @return $this
     */
    public function setEventCode($event_code)
    {
        $this->container['event_code'] = $event_code;

        return $this;
    }

    /**
     * Gets offline_upload_delay
     *
     * @return int
     */
    public function getOfflineUploadDelay()
    {
        return $this->container['offline_upload_delay'];
    }

    /**
     * Sets offline_upload_delay
     *
     * @param int $offline_upload_delay offline_upload_delay
     *
     * @return $this
     */
    public function setOfflineUploadDelay($offline_upload_delay)
    {
        $this->container['offline_upload_delay'] = $offline_upload_delay;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


