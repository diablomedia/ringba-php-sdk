<?php
/**
 * JobQueItemHistoryAction
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ringba
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * api.ringba.com
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.10
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ringba\Model;

use \ArrayAccess;
use \Ringba\ObjectSerializer;

/**
 * JobQueItemHistoryAction Class Doc Comment
 *
 * @category Class
 * @package  Ringba
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class JobQueItemHistoryAction implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'JobQueItem_HistoryAction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'job_que_item_id' => 'string',
        'user_name' => 'string',
        'user_id' => 'string',
        'before_status' => 'string',
        'after_status' => 'string',
        'description' => 'string',
        'action_args' => 'map[string,object]',
        'is_successfull' => 'bool',
        'action_time' => '\DateTime',
        'id' => 'string',
        'name' => 'string',
        'account_id' => 'string',
        'enabled' => 'bool',
        'version' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'job_que_item_id' => null,
        'user_name' => null,
        'user_id' => null,
        'before_status' => null,
        'after_status' => null,
        'description' => null,
        'action_args' => null,
        'is_successfull' => null,
        'action_time' => 'date-time',
        'id' => null,
        'name' => null,
        'account_id' => null,
        'enabled' => null,
        'version' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'job_que_item_id' => 'jobQueItemId',
        'user_name' => 'userName',
        'user_id' => 'userId',
        'before_status' => 'beforeStatus',
        'after_status' => 'afterStatus',
        'description' => 'description',
        'action_args' => 'actionArgs',
        'is_successfull' => 'isSuccessfull',
        'action_time' => 'actionTime',
        'id' => 'id',
        'name' => 'name',
        'account_id' => 'accountId',
        'enabled' => 'enabled',
        'version' => 'version'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'job_que_item_id' => 'setJobQueItemId',
        'user_name' => 'setUserName',
        'user_id' => 'setUserId',
        'before_status' => 'setBeforeStatus',
        'after_status' => 'setAfterStatus',
        'description' => 'setDescription',
        'action_args' => 'setActionArgs',
        'is_successfull' => 'setIsSuccessfull',
        'action_time' => 'setActionTime',
        'id' => 'setId',
        'name' => 'setName',
        'account_id' => 'setAccountId',
        'enabled' => 'setEnabled',
        'version' => 'setVersion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'job_que_item_id' => 'getJobQueItemId',
        'user_name' => 'getUserName',
        'user_id' => 'getUserId',
        'before_status' => 'getBeforeStatus',
        'after_status' => 'getAfterStatus',
        'description' => 'getDescription',
        'action_args' => 'getActionArgs',
        'is_successfull' => 'getIsSuccessfull',
        'action_time' => 'getActionTime',
        'id' => 'getId',
        'name' => 'getName',
        'account_id' => 'getAccountId',
        'enabled' => 'getEnabled',
        'version' => 'getVersion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['job_que_item_id'] = isset($data['job_que_item_id']) ? $data['job_que_item_id'] : null;
        $this->container['user_name'] = isset($data['user_name']) ? $data['user_name'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['before_status'] = isset($data['before_status']) ? $data['before_status'] : null;
        $this->container['after_status'] = isset($data['after_status']) ? $data['after_status'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['action_args'] = isset($data['action_args']) ? $data['action_args'] : null;
        $this->container['is_successfull'] = isset($data['is_successfull']) ? $data['is_successfull'] : null;
        $this->container['action_time'] = isset($data['action_time']) ? $data['action_time'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets job_que_item_id
     *
     * @return string
     */
    public function getJobQueItemId()
    {
        return $this->container['job_que_item_id'];
    }

    /**
     * Sets job_que_item_id
     *
     * @param string $job_que_item_id job_que_item_id
     *
     * @return $this
     */
    public function setJobQueItemId($job_que_item_id)
    {
        $this->container['job_que_item_id'] = $job_que_item_id;

        return $this;
    }

    /**
     * Gets user_name
     *
     * @return string
     */
    public function getUserName()
    {
        return $this->container['user_name'];
    }

    /**
     * Sets user_name
     *
     * @param string $user_name user_name
     *
     * @return $this
     */
    public function setUserName($user_name)
    {
        $this->container['user_name'] = $user_name;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string $user_id user_id
     *
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets before_status
     *
     * @return string
     */
    public function getBeforeStatus()
    {
        return $this->container['before_status'];
    }

    /**
     * Sets before_status
     *
     * @param string $before_status before_status
     *
     * @return $this
     */
    public function setBeforeStatus($before_status)
    {
        $this->container['before_status'] = $before_status;

        return $this;
    }

    /**
     * Gets after_status
     *
     * @return string
     */
    public function getAfterStatus()
    {
        return $this->container['after_status'];
    }

    /**
     * Sets after_status
     *
     * @param string $after_status after_status
     *
     * @return $this
     */
    public function setAfterStatus($after_status)
    {
        $this->container['after_status'] = $after_status;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets action_args
     *
     * @return map[string,object]
     */
    public function getActionArgs()
    {
        return $this->container['action_args'];
    }

    /**
     * Sets action_args
     *
     * @param map[string,object] $action_args action_args
     *
     * @return $this
     */
    public function setActionArgs($action_args)
    {
        $this->container['action_args'] = $action_args;

        return $this;
    }

    /**
     * Gets is_successfull
     *
     * @return bool
     */
    public function getIsSuccessfull()
    {
        return $this->container['is_successfull'];
    }

    /**
     * Sets is_successfull
     *
     * @param bool $is_successfull is_successfull
     *
     * @return $this
     */
    public function setIsSuccessfull($is_successfull)
    {
        $this->container['is_successfull'] = $is_successfull;

        return $this;
    }

    /**
     * Gets action_time
     *
     * @return \DateTime
     */
    public function getActionTime()
    {
        return $this->container['action_time'];
    }

    /**
     * Sets action_time
     *
     * @param \DateTime $action_time action_time
     *
     * @return $this
     */
    public function setActionTime($action_time)
    {
        $this->container['action_time'] = $action_time;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string $account_id account_id
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool $enabled enabled
     *
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets version
     *
     * @return int
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param int $version version
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


