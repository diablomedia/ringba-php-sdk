<?php
/**
 * CreatePRPModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ringba
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * api.ringba.com
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.10
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ringba\Model;

use \ArrayAccess;
use \Ringba\ObjectSerializer;

/**
 * CreatePRPModel Class Doc Comment
 *
 * @category Class
 * @package  Ringba
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CreatePRPModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreatePRPModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'description' => 'string',
        'contact_email' => 'string',
        'set_as_default' => 'bool',
        'terms_and_conditions' => 'string',
        'is_terms_and_conditions_url' => 'bool',
        'require_agreement_to_terms' => 'bool',
        'custom_publisher_fields' => '\Ringba\Model\PRPCustomField[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'description' => null,
        'contact_email' => null,
        'set_as_default' => null,
        'terms_and_conditions' => null,
        'is_terms_and_conditions_url' => null,
        'require_agreement_to_terms' => null,
        'custom_publisher_fields' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'description' => 'description',
        'contact_email' => 'contactEmail',
        'set_as_default' => 'setAsDefault',
        'terms_and_conditions' => 'termsAndConditions',
        'is_terms_and_conditions_url' => 'isTermsAndConditionsURL',
        'require_agreement_to_terms' => 'requireAgreementToTerms',
        'custom_publisher_fields' => 'customPublisherFields'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'description' => 'setDescription',
        'contact_email' => 'setContactEmail',
        'set_as_default' => 'setSetAsDefault',
        'terms_and_conditions' => 'setTermsAndConditions',
        'is_terms_and_conditions_url' => 'setIsTermsAndConditionsUrl',
        'require_agreement_to_terms' => 'setRequireAgreementToTerms',
        'custom_publisher_fields' => 'setCustomPublisherFields'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'description' => 'getDescription',
        'contact_email' => 'getContactEmail',
        'set_as_default' => 'getSetAsDefault',
        'terms_and_conditions' => 'getTermsAndConditions',
        'is_terms_and_conditions_url' => 'getIsTermsAndConditionsUrl',
        'require_agreement_to_terms' => 'getRequireAgreementToTerms',
        'custom_publisher_fields' => 'getCustomPublisherFields'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['contact_email'] = isset($data['contact_email']) ? $data['contact_email'] : null;
        $this->container['set_as_default'] = isset($data['set_as_default']) ? $data['set_as_default'] : null;
        $this->container['terms_and_conditions'] = isset($data['terms_and_conditions']) ? $data['terms_and_conditions'] : null;
        $this->container['is_terms_and_conditions_url'] = isset($data['is_terms_and_conditions_url']) ? $data['is_terms_and_conditions_url'] : null;
        $this->container['require_agreement_to_terms'] = isset($data['require_agreement_to_terms']) ? $data['require_agreement_to_terms'] : null;
        $this->container['custom_publisher_fields'] = isset($data['custom_publisher_fields']) ? $data['custom_publisher_fields'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets contact_email
     *
     * @return string
     */
    public function getContactEmail()
    {
        return $this->container['contact_email'];
    }

    /**
     * Sets contact_email
     *
     * @param string $contact_email contact_email
     *
     * @return $this
     */
    public function setContactEmail($contact_email)
    {
        $this->container['contact_email'] = $contact_email;

        return $this;
    }

    /**
     * Gets set_as_default
     *
     * @return bool
     */
    public function getSetAsDefault()
    {
        return $this->container['set_as_default'];
    }

    /**
     * Sets set_as_default
     *
     * @param bool $set_as_default set_as_default
     *
     * @return $this
     */
    public function setSetAsDefault($set_as_default)
    {
        $this->container['set_as_default'] = $set_as_default;

        return $this;
    }

    /**
     * Gets terms_and_conditions
     *
     * @return string
     */
    public function getTermsAndConditions()
    {
        return $this->container['terms_and_conditions'];
    }

    /**
     * Sets terms_and_conditions
     *
     * @param string $terms_and_conditions terms_and_conditions
     *
     * @return $this
     */
    public function setTermsAndConditions($terms_and_conditions)
    {
        $this->container['terms_and_conditions'] = $terms_and_conditions;

        return $this;
    }

    /**
     * Gets is_terms_and_conditions_url
     *
     * @return bool
     */
    public function getIsTermsAndConditionsUrl()
    {
        return $this->container['is_terms_and_conditions_url'];
    }

    /**
     * Sets is_terms_and_conditions_url
     *
     * @param bool $is_terms_and_conditions_url is_terms_and_conditions_url
     *
     * @return $this
     */
    public function setIsTermsAndConditionsUrl($is_terms_and_conditions_url)
    {
        $this->container['is_terms_and_conditions_url'] = $is_terms_and_conditions_url;

        return $this;
    }

    /**
     * Gets require_agreement_to_terms
     *
     * @return bool
     */
    public function getRequireAgreementToTerms()
    {
        return $this->container['require_agreement_to_terms'];
    }

    /**
     * Sets require_agreement_to_terms
     *
     * @param bool $require_agreement_to_terms require_agreement_to_terms
     *
     * @return $this
     */
    public function setRequireAgreementToTerms($require_agreement_to_terms)
    {
        $this->container['require_agreement_to_terms'] = $require_agreement_to_terms;

        return $this;
    }

    /**
     * Gets custom_publisher_fields
     *
     * @return \Ringba\Model\PRPCustomField[]
     */
    public function getCustomPublisherFields()
    {
        return $this->container['custom_publisher_fields'];
    }

    /**
     * Sets custom_publisher_fields
     *
     * @param \Ringba\Model\PRPCustomField[] $custom_publisher_fields custom_publisher_fields
     *
     * @return $this
     */
    public function setCustomPublisherFields($custom_publisher_fields)
    {
        $this->container['custom_publisher_fields'] = $custom_publisher_fields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


