<?php
/**
 * Campaign
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ringba
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * api.ringba.com
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.10
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ringba\Model;

use \ArrayAccess;
use \Ringba\ObjectSerializer;

/**
 * Campaign Class Doc Comment
 *
 * @category Class
 * @package  Ringba
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Campaign implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Campaign';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'user_campaign_id' => 'string',
        'number_display_format' => 'string',
        'country_code' => 'string',
        'completed' => 'bool',
        'distribution_setting' => 'string',
        'offer_id' => 'string',
        'offer_draft_id' => 'string',
        'eval_anonym_duplication' => 'bool',
        'payout_dupes_global' => 'bool',
        'spam_detection' => '\Ringba\Model\SpamDetectionSettings',
        'default_number' => '\Ringba\Model\Number',
        'affiliate_numbers' => '\Ringba\Model\Number[]',
        'pool' => '\Ringba\Model\NumberPool',
        'default_target' => '\Ringba\Model\Target',
        'de_dupe_settings' => '\Ringba\Model\DuplicateCallSetting',
        'call_ivr_tree' => '\Ringba\Model\IVRTree',
        'routes' => '\Ringba\Model\CallRoute[]',
        'q_path_maps' => '\Ringba\Model\QueryPathMap[]',
        'event_call_backs' => '\Ringba\Model\EventCallBack[]',
        'payout_override' => 'map[string,\Ringba\Model\PayoutConversionSetting]',
        'default_payout_setting' => '\Ringba\Model\PayoutSetting',
        'duplicate_settings' => '\Ringba\Model\MarkAsDuplicateSettings',
        'payout_settings' => '\Ringba\Model\PayoutSettingItem[]',
        'js_tags' => '\Ringba\Model\JsTag[]',
        'record_setting' => '\Ringba\Model\RecordCallSetting',
        'campaign_type' => 'string',
        'affiliates' => '\Ringba\Model\Affiliate[]',
        'name' => 'string',
        'account_id' => 'string',
        'enabled' => 'bool',
        'version' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'user_campaign_id' => null,
        'number_display_format' => null,
        'country_code' => null,
        'completed' => null,
        'distribution_setting' => null,
        'offer_id' => null,
        'offer_draft_id' => null,
        'eval_anonym_duplication' => null,
        'payout_dupes_global' => null,
        'spam_detection' => null,
        'default_number' => null,
        'affiliate_numbers' => null,
        'pool' => null,
        'default_target' => null,
        'de_dupe_settings' => null,
        'call_ivr_tree' => null,
        'routes' => null,
        'q_path_maps' => null,
        'event_call_backs' => null,
        'payout_override' => null,
        'default_payout_setting' => null,
        'duplicate_settings' => null,
        'payout_settings' => null,
        'js_tags' => null,
        'record_setting' => null,
        'campaign_type' => null,
        'affiliates' => null,
        'name' => null,
        'account_id' => null,
        'enabled' => null,
        'version' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'user_campaign_id' => 'userCampaignId',
        'number_display_format' => 'numberDisplayFormat',
        'country_code' => 'countryCode',
        'completed' => 'completed',
        'distribution_setting' => 'distributionSetting',
        'offer_id' => 'offerId',
        'offer_draft_id' => 'offerDraftId',
        'eval_anonym_duplication' => 'evalAnonymDuplication',
        'payout_dupes_global' => 'payoutDupesGlobal',
        'spam_detection' => 'spamDetection',
        'default_number' => 'defaultNumber',
        'affiliate_numbers' => 'affiliateNumbers',
        'pool' => 'pool',
        'default_target' => 'defaultTarget',
        'de_dupe_settings' => 'deDupeSettings',
        'call_ivr_tree' => 'callIVRTree',
        'routes' => 'routes',
        'q_path_maps' => 'qPathMaps',
        'event_call_backs' => 'eventCallBacks',
        'payout_override' => 'payoutOverride',
        'default_payout_setting' => 'defaultPayoutSetting',
        'duplicate_settings' => 'duplicateSettings',
        'payout_settings' => 'payoutSettings',
        'js_tags' => 'jsTags',
        'record_setting' => 'recordSetting',
        'campaign_type' => 'campaignType',
        'affiliates' => 'affiliates',
        'name' => 'name',
        'account_id' => 'accountId',
        'enabled' => 'enabled',
        'version' => 'version'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'user_campaign_id' => 'setUserCampaignId',
        'number_display_format' => 'setNumberDisplayFormat',
        'country_code' => 'setCountryCode',
        'completed' => 'setCompleted',
        'distribution_setting' => 'setDistributionSetting',
        'offer_id' => 'setOfferId',
        'offer_draft_id' => 'setOfferDraftId',
        'eval_anonym_duplication' => 'setEvalAnonymDuplication',
        'payout_dupes_global' => 'setPayoutDupesGlobal',
        'spam_detection' => 'setSpamDetection',
        'default_number' => 'setDefaultNumber',
        'affiliate_numbers' => 'setAffiliateNumbers',
        'pool' => 'setPool',
        'default_target' => 'setDefaultTarget',
        'de_dupe_settings' => 'setDeDupeSettings',
        'call_ivr_tree' => 'setCallIvrTree',
        'routes' => 'setRoutes',
        'q_path_maps' => 'setQPathMaps',
        'event_call_backs' => 'setEventCallBacks',
        'payout_override' => 'setPayoutOverride',
        'default_payout_setting' => 'setDefaultPayoutSetting',
        'duplicate_settings' => 'setDuplicateSettings',
        'payout_settings' => 'setPayoutSettings',
        'js_tags' => 'setJsTags',
        'record_setting' => 'setRecordSetting',
        'campaign_type' => 'setCampaignType',
        'affiliates' => 'setAffiliates',
        'name' => 'setName',
        'account_id' => 'setAccountId',
        'enabled' => 'setEnabled',
        'version' => 'setVersion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'user_campaign_id' => 'getUserCampaignId',
        'number_display_format' => 'getNumberDisplayFormat',
        'country_code' => 'getCountryCode',
        'completed' => 'getCompleted',
        'distribution_setting' => 'getDistributionSetting',
        'offer_id' => 'getOfferId',
        'offer_draft_id' => 'getOfferDraftId',
        'eval_anonym_duplication' => 'getEvalAnonymDuplication',
        'payout_dupes_global' => 'getPayoutDupesGlobal',
        'spam_detection' => 'getSpamDetection',
        'default_number' => 'getDefaultNumber',
        'affiliate_numbers' => 'getAffiliateNumbers',
        'pool' => 'getPool',
        'default_target' => 'getDefaultTarget',
        'de_dupe_settings' => 'getDeDupeSettings',
        'call_ivr_tree' => 'getCallIvrTree',
        'routes' => 'getRoutes',
        'q_path_maps' => 'getQPathMaps',
        'event_call_backs' => 'getEventCallBacks',
        'payout_override' => 'getPayoutOverride',
        'default_payout_setting' => 'getDefaultPayoutSetting',
        'duplicate_settings' => 'getDuplicateSettings',
        'payout_settings' => 'getPayoutSettings',
        'js_tags' => 'getJsTags',
        'record_setting' => 'getRecordSetting',
        'campaign_type' => 'getCampaignType',
        'affiliates' => 'getAffiliates',
        'name' => 'getName',
        'account_id' => 'getAccountId',
        'enabled' => 'getEnabled',
        'version' => 'getVersion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const DISTRIBUTION_SETTING_WEIGHT_BY_TARGETS_AVAILABLE = 'WEIGHT_BY_TARGETS_AVAILABLE';
    const DISTRIBUTION_SETTING_BY_CAMPAIGN = 'BY_CAMPAIGN';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDistributionSettingAllowableValues()
    {
        return [
            self::DISTRIBUTION_SETTING_WEIGHT_BY_TARGETS_AVAILABLE,
            self::DISTRIBUTION_SETTING_BY_CAMPAIGN,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['user_campaign_id'] = isset($data['user_campaign_id']) ? $data['user_campaign_id'] : null;
        $this->container['number_display_format'] = isset($data['number_display_format']) ? $data['number_display_format'] : null;
        $this->container['country_code'] = isset($data['country_code']) ? $data['country_code'] : null;
        $this->container['completed'] = isset($data['completed']) ? $data['completed'] : null;
        $this->container['distribution_setting'] = isset($data['distribution_setting']) ? $data['distribution_setting'] : null;
        $this->container['offer_id'] = isset($data['offer_id']) ? $data['offer_id'] : null;
        $this->container['offer_draft_id'] = isset($data['offer_draft_id']) ? $data['offer_draft_id'] : null;
        $this->container['eval_anonym_duplication'] = isset($data['eval_anonym_duplication']) ? $data['eval_anonym_duplication'] : null;
        $this->container['payout_dupes_global'] = isset($data['payout_dupes_global']) ? $data['payout_dupes_global'] : null;
        $this->container['spam_detection'] = isset($data['spam_detection']) ? $data['spam_detection'] : null;
        $this->container['default_number'] = isset($data['default_number']) ? $data['default_number'] : null;
        $this->container['affiliate_numbers'] = isset($data['affiliate_numbers']) ? $data['affiliate_numbers'] : null;
        $this->container['pool'] = isset($data['pool']) ? $data['pool'] : null;
        $this->container['default_target'] = isset($data['default_target']) ? $data['default_target'] : null;
        $this->container['de_dupe_settings'] = isset($data['de_dupe_settings']) ? $data['de_dupe_settings'] : null;
        $this->container['call_ivr_tree'] = isset($data['call_ivr_tree']) ? $data['call_ivr_tree'] : null;
        $this->container['routes'] = isset($data['routes']) ? $data['routes'] : null;
        $this->container['q_path_maps'] = isset($data['q_path_maps']) ? $data['q_path_maps'] : null;
        $this->container['event_call_backs'] = isset($data['event_call_backs']) ? $data['event_call_backs'] : null;
        $this->container['payout_override'] = isset($data['payout_override']) ? $data['payout_override'] : null;
        $this->container['default_payout_setting'] = isset($data['default_payout_setting']) ? $data['default_payout_setting'] : null;
        $this->container['duplicate_settings'] = isset($data['duplicate_settings']) ? $data['duplicate_settings'] : null;
        $this->container['payout_settings'] = isset($data['payout_settings']) ? $data['payout_settings'] : null;
        $this->container['js_tags'] = isset($data['js_tags']) ? $data['js_tags'] : null;
        $this->container['record_setting'] = isset($data['record_setting']) ? $data['record_setting'] : null;
        $this->container['campaign_type'] = isset($data['campaign_type']) ? $data['campaign_type'] : null;
        $this->container['affiliates'] = isset($data['affiliates']) ? $data['affiliates'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDistributionSettingAllowableValues();
        if (!is_null($this->container['distribution_setting']) && !in_array($this->container['distribution_setting'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'distribution_setting', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets user_campaign_id
     *
     * @return string
     */
    public function getUserCampaignId()
    {
        return $this->container['user_campaign_id'];
    }

    /**
     * Sets user_campaign_id
     *
     * @param string $user_campaign_id user_campaign_id
     *
     * @return $this
     */
    public function setUserCampaignId($user_campaign_id)
    {
        $this->container['user_campaign_id'] = $user_campaign_id;

        return $this;
    }

    /**
     * Gets number_display_format
     *
     * @return string
     */
    public function getNumberDisplayFormat()
    {
        return $this->container['number_display_format'];
    }

    /**
     * Sets number_display_format
     *
     * @param string $number_display_format number_display_format
     *
     * @return $this
     */
    public function setNumberDisplayFormat($number_display_format)
    {
        $this->container['number_display_format'] = $number_display_format;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string $country_code country_code
     *
     * @return $this
     */
    public function setCountryCode($country_code)
    {
        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets completed
     *
     * @return bool
     */
    public function getCompleted()
    {
        return $this->container['completed'];
    }

    /**
     * Sets completed
     *
     * @param bool $completed completed
     *
     * @return $this
     */
    public function setCompleted($completed)
    {
        $this->container['completed'] = $completed;

        return $this;
    }

    /**
     * Gets distribution_setting
     *
     * @return string
     */
    public function getDistributionSetting()
    {
        return $this->container['distribution_setting'];
    }

    /**
     * Sets distribution_setting
     *
     * @param string $distribution_setting distribution_setting
     *
     * @return $this
     */
    public function setDistributionSetting($distribution_setting)
    {
        $allowedValues = $this->getDistributionSettingAllowableValues();
        if (!is_null($distribution_setting) && !in_array($distribution_setting, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'distribution_setting', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['distribution_setting'] = $distribution_setting;

        return $this;
    }

    /**
     * Gets offer_id
     *
     * @return string
     */
    public function getOfferId()
    {
        return $this->container['offer_id'];
    }

    /**
     * Sets offer_id
     *
     * @param string $offer_id offer_id
     *
     * @return $this
     */
    public function setOfferId($offer_id)
    {
        $this->container['offer_id'] = $offer_id;

        return $this;
    }

    /**
     * Gets offer_draft_id
     *
     * @return string
     */
    public function getOfferDraftId()
    {
        return $this->container['offer_draft_id'];
    }

    /**
     * Sets offer_draft_id
     *
     * @param string $offer_draft_id offer_draft_id
     *
     * @return $this
     */
    public function setOfferDraftId($offer_draft_id)
    {
        $this->container['offer_draft_id'] = $offer_draft_id;

        return $this;
    }

    /**
     * Gets eval_anonym_duplication
     *
     * @return bool
     */
    public function getEvalAnonymDuplication()
    {
        return $this->container['eval_anonym_duplication'];
    }

    /**
     * Sets eval_anonym_duplication
     *
     * @param bool $eval_anonym_duplication eval_anonym_duplication
     *
     * @return $this
     */
    public function setEvalAnonymDuplication($eval_anonym_duplication)
    {
        $this->container['eval_anonym_duplication'] = $eval_anonym_duplication;

        return $this;
    }

    /**
     * Gets payout_dupes_global
     *
     * @return bool
     */
    public function getPayoutDupesGlobal()
    {
        return $this->container['payout_dupes_global'];
    }

    /**
     * Sets payout_dupes_global
     *
     * @param bool $payout_dupes_global payout_dupes_global
     *
     * @return $this
     */
    public function setPayoutDupesGlobal($payout_dupes_global)
    {
        $this->container['payout_dupes_global'] = $payout_dupes_global;

        return $this;
    }

    /**
     * Gets spam_detection
     *
     * @return \Ringba\Model\SpamDetectionSettings
     */
    public function getSpamDetection()
    {
        return $this->container['spam_detection'];
    }

    /**
     * Sets spam_detection
     *
     * @param \Ringba\Model\SpamDetectionSettings $spam_detection spam_detection
     *
     * @return $this
     */
    public function setSpamDetection($spam_detection)
    {
        $this->container['spam_detection'] = $spam_detection;

        return $this;
    }

    /**
     * Gets default_number
     *
     * @return \Ringba\Model\Number
     */
    public function getDefaultNumber()
    {
        return $this->container['default_number'];
    }

    /**
     * Sets default_number
     *
     * @param \Ringba\Model\Number $default_number default_number
     *
     * @return $this
     */
    public function setDefaultNumber($default_number)
    {
        $this->container['default_number'] = $default_number;

        return $this;
    }

    /**
     * Gets affiliate_numbers
     *
     * @return \Ringba\Model\Number[]
     */
    public function getAffiliateNumbers()
    {
        return $this->container['affiliate_numbers'];
    }

    /**
     * Sets affiliate_numbers
     *
     * @param \Ringba\Model\Number[] $affiliate_numbers affiliate_numbers
     *
     * @return $this
     */
    public function setAffiliateNumbers($affiliate_numbers)
    {
        $this->container['affiliate_numbers'] = $affiliate_numbers;

        return $this;
    }

    /**
     * Gets pool
     *
     * @return \Ringba\Model\NumberPool
     */
    public function getPool()
    {
        return $this->container['pool'];
    }

    /**
     * Sets pool
     *
     * @param \Ringba\Model\NumberPool $pool pool
     *
     * @return $this
     */
    public function setPool($pool)
    {
        $this->container['pool'] = $pool;

        return $this;
    }

    /**
     * Gets default_target
     *
     * @return \Ringba\Model\Target
     */
    public function getDefaultTarget()
    {
        return $this->container['default_target'];
    }

    /**
     * Sets default_target
     *
     * @param \Ringba\Model\Target $default_target default_target
     *
     * @return $this
     */
    public function setDefaultTarget($default_target)
    {
        $this->container['default_target'] = $default_target;

        return $this;
    }

    /**
     * Gets de_dupe_settings
     *
     * @return \Ringba\Model\DuplicateCallSetting
     */
    public function getDeDupeSettings()
    {
        return $this->container['de_dupe_settings'];
    }

    /**
     * Sets de_dupe_settings
     *
     * @param \Ringba\Model\DuplicateCallSetting $de_dupe_settings de_dupe_settings
     *
     * @return $this
     */
    public function setDeDupeSettings($de_dupe_settings)
    {
        $this->container['de_dupe_settings'] = $de_dupe_settings;

        return $this;
    }

    /**
     * Gets call_ivr_tree
     *
     * @return \Ringba\Model\IVRTree
     */
    public function getCallIvrTree()
    {
        return $this->container['call_ivr_tree'];
    }

    /**
     * Sets call_ivr_tree
     *
     * @param \Ringba\Model\IVRTree $call_ivr_tree call_ivr_tree
     *
     * @return $this
     */
    public function setCallIvrTree($call_ivr_tree)
    {
        $this->container['call_ivr_tree'] = $call_ivr_tree;

        return $this;
    }

    /**
     * Gets routes
     *
     * @return \Ringba\Model\CallRoute[]
     */
    public function getRoutes()
    {
        return $this->container['routes'];
    }

    /**
     * Sets routes
     *
     * @param \Ringba\Model\CallRoute[] $routes routes
     *
     * @return $this
     */
    public function setRoutes($routes)
    {
        $this->container['routes'] = $routes;

        return $this;
    }

    /**
     * Gets q_path_maps
     *
     * @return \Ringba\Model\QueryPathMap[]
     */
    public function getQPathMaps()
    {
        return $this->container['q_path_maps'];
    }

    /**
     * Sets q_path_maps
     *
     * @param \Ringba\Model\QueryPathMap[] $q_path_maps q_path_maps
     *
     * @return $this
     */
    public function setQPathMaps($q_path_maps)
    {
        $this->container['q_path_maps'] = $q_path_maps;

        return $this;
    }

    /**
     * Gets event_call_backs
     *
     * @return \Ringba\Model\EventCallBack[]
     */
    public function getEventCallBacks()
    {
        return $this->container['event_call_backs'];
    }

    /**
     * Sets event_call_backs
     *
     * @param \Ringba\Model\EventCallBack[] $event_call_backs event_call_backs
     *
     * @return $this
     */
    public function setEventCallBacks($event_call_backs)
    {
        $this->container['event_call_backs'] = $event_call_backs;

        return $this;
    }

    /**
     * Gets payout_override
     *
     * @return map[string,\Ringba\Model\PayoutConversionSetting]
     */
    public function getPayoutOverride()
    {
        return $this->container['payout_override'];
    }

    /**
     * Sets payout_override
     *
     * @param map[string,\Ringba\Model\PayoutConversionSetting] $payout_override payout_override
     *
     * @return $this
     */
    public function setPayoutOverride($payout_override)
    {
        $this->container['payout_override'] = $payout_override;

        return $this;
    }

    /**
     * Gets default_payout_setting
     *
     * @return \Ringba\Model\PayoutSetting
     */
    public function getDefaultPayoutSetting()
    {
        return $this->container['default_payout_setting'];
    }

    /**
     * Sets default_payout_setting
     *
     * @param \Ringba\Model\PayoutSetting $default_payout_setting default_payout_setting
     *
     * @return $this
     */
    public function setDefaultPayoutSetting($default_payout_setting)
    {
        $this->container['default_payout_setting'] = $default_payout_setting;

        return $this;
    }

    /**
     * Gets duplicate_settings
     *
     * @return \Ringba\Model\MarkAsDuplicateSettings
     */
    public function getDuplicateSettings()
    {
        return $this->container['duplicate_settings'];
    }

    /**
     * Sets duplicate_settings
     *
     * @param \Ringba\Model\MarkAsDuplicateSettings $duplicate_settings duplicate_settings
     *
     * @return $this
     */
    public function setDuplicateSettings($duplicate_settings)
    {
        $this->container['duplicate_settings'] = $duplicate_settings;

        return $this;
    }

    /**
     * Gets payout_settings
     *
     * @return \Ringba\Model\PayoutSettingItem[]
     */
    public function getPayoutSettings()
    {
        return $this->container['payout_settings'];
    }

    /**
     * Sets payout_settings
     *
     * @param \Ringba\Model\PayoutSettingItem[] $payout_settings payout_settings
     *
     * @return $this
     */
    public function setPayoutSettings($payout_settings)
    {
        $this->container['payout_settings'] = $payout_settings;

        return $this;
    }

    /**
     * Gets js_tags
     *
     * @return \Ringba\Model\JsTag[]
     */
    public function getJsTags()
    {
        return $this->container['js_tags'];
    }

    /**
     * Sets js_tags
     *
     * @param \Ringba\Model\JsTag[] $js_tags js_tags
     *
     * @return $this
     */
    public function setJsTags($js_tags)
    {
        $this->container['js_tags'] = $js_tags;

        return $this;
    }

    /**
     * Gets record_setting
     *
     * @return \Ringba\Model\RecordCallSetting
     */
    public function getRecordSetting()
    {
        return $this->container['record_setting'];
    }

    /**
     * Sets record_setting
     *
     * @param \Ringba\Model\RecordCallSetting $record_setting record_setting
     *
     * @return $this
     */
    public function setRecordSetting($record_setting)
    {
        $this->container['record_setting'] = $record_setting;

        return $this;
    }

    /**
     * Gets campaign_type
     *
     * @return string
     */
    public function getCampaignType()
    {
        return $this->container['campaign_type'];
    }

    /**
     * Sets campaign_type
     *
     * @param string $campaign_type campaign_type
     *
     * @return $this
     */
    public function setCampaignType($campaign_type)
    {
        $this->container['campaign_type'] = $campaign_type;

        return $this;
    }

    /**
     * Gets affiliates
     *
     * @return \Ringba\Model\Affiliate[]
     */
    public function getAffiliates()
    {
        return $this->container['affiliates'];
    }

    /**
     * Sets affiliates
     *
     * @param \Ringba\Model\Affiliate[] $affiliates affiliates
     *
     * @return $this
     */
    public function setAffiliates($affiliates)
    {
        $this->container['affiliates'] = $affiliates;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string $account_id account_id
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool $enabled enabled
     *
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets version
     *
     * @return int
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param int $version version
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


