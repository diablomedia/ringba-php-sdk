<?php
/**
 * ScheduleAndCapacity
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ringba
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * api.ringba.com
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.10
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ringba\Model;

use \ArrayAccess;
use \Ringba\ObjectSerializer;

/**
 * ScheduleAndCapacity Class Doc Comment
 *
 * @category Class
 * @package  Ringba
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ScheduleAndCapacity implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ScheduleAndCapacity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'call_cap_matrix' => 'int[][]',
        'call_concurrency_matrix' => 'int[][]',
        'time_zone_id' => 'string',
        'all_time_cap' => 'int',
        'monthly_cap' => 'int',
        'daily_cap' => 'int',
        'hourly_cap' => 'int',
        'concurrency_cap' => 'int',
        'all_time_sum_cap' => 'double',
        'monthly_sum_cap' => 'double',
        'daily_sum_cap' => 'double',
        'hourly_sum_cap' => 'double',
        'hours_of_operation' => '\Ringba\Model\OpenSetting[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'call_cap_matrix' => 'int32',
        'call_concurrency_matrix' => 'int32',
        'time_zone_id' => null,
        'all_time_cap' => 'int32',
        'monthly_cap' => 'int32',
        'daily_cap' => 'int32',
        'hourly_cap' => 'int32',
        'concurrency_cap' => 'int32',
        'all_time_sum_cap' => 'double',
        'monthly_sum_cap' => 'double',
        'daily_sum_cap' => 'double',
        'hourly_sum_cap' => 'double',
        'hours_of_operation' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'call_cap_matrix' => 'callCapMatrix',
        'call_concurrency_matrix' => 'callConcurrencyMatrix',
        'time_zone_id' => 'timeZoneId',
        'all_time_cap' => 'allTimeCap',
        'monthly_cap' => 'monthlyCap',
        'daily_cap' => 'dailyCap',
        'hourly_cap' => 'hourlyCap',
        'concurrency_cap' => 'concurrencyCap',
        'all_time_sum_cap' => 'allTimeSumCap',
        'monthly_sum_cap' => 'monthlySumCap',
        'daily_sum_cap' => 'dailySumCap',
        'hourly_sum_cap' => 'hourlySumCap',
        'hours_of_operation' => 'hoursOfOperation'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'call_cap_matrix' => 'setCallCapMatrix',
        'call_concurrency_matrix' => 'setCallConcurrencyMatrix',
        'time_zone_id' => 'setTimeZoneId',
        'all_time_cap' => 'setAllTimeCap',
        'monthly_cap' => 'setMonthlyCap',
        'daily_cap' => 'setDailyCap',
        'hourly_cap' => 'setHourlyCap',
        'concurrency_cap' => 'setConcurrencyCap',
        'all_time_sum_cap' => 'setAllTimeSumCap',
        'monthly_sum_cap' => 'setMonthlySumCap',
        'daily_sum_cap' => 'setDailySumCap',
        'hourly_sum_cap' => 'setHourlySumCap',
        'hours_of_operation' => 'setHoursOfOperation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'call_cap_matrix' => 'getCallCapMatrix',
        'call_concurrency_matrix' => 'getCallConcurrencyMatrix',
        'time_zone_id' => 'getTimeZoneId',
        'all_time_cap' => 'getAllTimeCap',
        'monthly_cap' => 'getMonthlyCap',
        'daily_cap' => 'getDailyCap',
        'hourly_cap' => 'getHourlyCap',
        'concurrency_cap' => 'getConcurrencyCap',
        'all_time_sum_cap' => 'getAllTimeSumCap',
        'monthly_sum_cap' => 'getMonthlySumCap',
        'daily_sum_cap' => 'getDailySumCap',
        'hourly_sum_cap' => 'getHourlySumCap',
        'hours_of_operation' => 'getHoursOfOperation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['call_cap_matrix'] = isset($data['call_cap_matrix']) ? $data['call_cap_matrix'] : null;
        $this->container['call_concurrency_matrix'] = isset($data['call_concurrency_matrix']) ? $data['call_concurrency_matrix'] : null;
        $this->container['time_zone_id'] = isset($data['time_zone_id']) ? $data['time_zone_id'] : null;
        $this->container['all_time_cap'] = isset($data['all_time_cap']) ? $data['all_time_cap'] : null;
        $this->container['monthly_cap'] = isset($data['monthly_cap']) ? $data['monthly_cap'] : null;
        $this->container['daily_cap'] = isset($data['daily_cap']) ? $data['daily_cap'] : null;
        $this->container['hourly_cap'] = isset($data['hourly_cap']) ? $data['hourly_cap'] : null;
        $this->container['concurrency_cap'] = isset($data['concurrency_cap']) ? $data['concurrency_cap'] : null;
        $this->container['all_time_sum_cap'] = isset($data['all_time_sum_cap']) ? $data['all_time_sum_cap'] : null;
        $this->container['monthly_sum_cap'] = isset($data['monthly_sum_cap']) ? $data['monthly_sum_cap'] : null;
        $this->container['daily_sum_cap'] = isset($data['daily_sum_cap']) ? $data['daily_sum_cap'] : null;
        $this->container['hourly_sum_cap'] = isset($data['hourly_sum_cap']) ? $data['hourly_sum_cap'] : null;
        $this->container['hours_of_operation'] = isset($data['hours_of_operation']) ? $data['hours_of_operation'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets call_cap_matrix
     *
     * @return int[][]
     */
    public function getCallCapMatrix()
    {
        return $this->container['call_cap_matrix'];
    }

    /**
     * Sets call_cap_matrix
     *
     * @param int[][] $call_cap_matrix call_cap_matrix
     *
     * @return $this
     */
    public function setCallCapMatrix($call_cap_matrix)
    {
        $this->container['call_cap_matrix'] = $call_cap_matrix;

        return $this;
    }

    /**
     * Gets call_concurrency_matrix
     *
     * @return int[][]
     */
    public function getCallConcurrencyMatrix()
    {
        return $this->container['call_concurrency_matrix'];
    }

    /**
     * Sets call_concurrency_matrix
     *
     * @param int[][] $call_concurrency_matrix call_concurrency_matrix
     *
     * @return $this
     */
    public function setCallConcurrencyMatrix($call_concurrency_matrix)
    {
        $this->container['call_concurrency_matrix'] = $call_concurrency_matrix;

        return $this;
    }

    /**
     * Gets time_zone_id
     *
     * @return string
     */
    public function getTimeZoneId()
    {
        return $this->container['time_zone_id'];
    }

    /**
     * Sets time_zone_id
     *
     * @param string $time_zone_id time_zone_id
     *
     * @return $this
     */
    public function setTimeZoneId($time_zone_id)
    {
        $this->container['time_zone_id'] = $time_zone_id;

        return $this;
    }

    /**
     * Gets all_time_cap
     *
     * @return int
     */
    public function getAllTimeCap()
    {
        return $this->container['all_time_cap'];
    }

    /**
     * Sets all_time_cap
     *
     * @param int $all_time_cap all_time_cap
     *
     * @return $this
     */
    public function setAllTimeCap($all_time_cap)
    {
        $this->container['all_time_cap'] = $all_time_cap;

        return $this;
    }

    /**
     * Gets monthly_cap
     *
     * @return int
     */
    public function getMonthlyCap()
    {
        return $this->container['monthly_cap'];
    }

    /**
     * Sets monthly_cap
     *
     * @param int $monthly_cap monthly_cap
     *
     * @return $this
     */
    public function setMonthlyCap($monthly_cap)
    {
        $this->container['monthly_cap'] = $monthly_cap;

        return $this;
    }

    /**
     * Gets daily_cap
     *
     * @return int
     */
    public function getDailyCap()
    {
        return $this->container['daily_cap'];
    }

    /**
     * Sets daily_cap
     *
     * @param int $daily_cap daily_cap
     *
     * @return $this
     */
    public function setDailyCap($daily_cap)
    {
        $this->container['daily_cap'] = $daily_cap;

        return $this;
    }

    /**
     * Gets hourly_cap
     *
     * @return int
     */
    public function getHourlyCap()
    {
        return $this->container['hourly_cap'];
    }

    /**
     * Sets hourly_cap
     *
     * @param int $hourly_cap hourly_cap
     *
     * @return $this
     */
    public function setHourlyCap($hourly_cap)
    {
        $this->container['hourly_cap'] = $hourly_cap;

        return $this;
    }

    /**
     * Gets concurrency_cap
     *
     * @return int
     */
    public function getConcurrencyCap()
    {
        return $this->container['concurrency_cap'];
    }

    /**
     * Sets concurrency_cap
     *
     * @param int $concurrency_cap concurrency_cap
     *
     * @return $this
     */
    public function setConcurrencyCap($concurrency_cap)
    {
        $this->container['concurrency_cap'] = $concurrency_cap;

        return $this;
    }

    /**
     * Gets all_time_sum_cap
     *
     * @return double
     */
    public function getAllTimeSumCap()
    {
        return $this->container['all_time_sum_cap'];
    }

    /**
     * Sets all_time_sum_cap
     *
     * @param double $all_time_sum_cap all_time_sum_cap
     *
     * @return $this
     */
    public function setAllTimeSumCap($all_time_sum_cap)
    {
        $this->container['all_time_sum_cap'] = $all_time_sum_cap;

        return $this;
    }

    /**
     * Gets monthly_sum_cap
     *
     * @return double
     */
    public function getMonthlySumCap()
    {
        return $this->container['monthly_sum_cap'];
    }

    /**
     * Sets monthly_sum_cap
     *
     * @param double $monthly_sum_cap monthly_sum_cap
     *
     * @return $this
     */
    public function setMonthlySumCap($monthly_sum_cap)
    {
        $this->container['monthly_sum_cap'] = $monthly_sum_cap;

        return $this;
    }

    /**
     * Gets daily_sum_cap
     *
     * @return double
     */
    public function getDailySumCap()
    {
        return $this->container['daily_sum_cap'];
    }

    /**
     * Sets daily_sum_cap
     *
     * @param double $daily_sum_cap daily_sum_cap
     *
     * @return $this
     */
    public function setDailySumCap($daily_sum_cap)
    {
        $this->container['daily_sum_cap'] = $daily_sum_cap;

        return $this;
    }

    /**
     * Gets hourly_sum_cap
     *
     * @return double
     */
    public function getHourlySumCap()
    {
        return $this->container['hourly_sum_cap'];
    }

    /**
     * Sets hourly_sum_cap
     *
     * @param double $hourly_sum_cap hourly_sum_cap
     *
     * @return $this
     */
    public function setHourlySumCap($hourly_sum_cap)
    {
        $this->container['hourly_sum_cap'] = $hourly_sum_cap;

        return $this;
    }

    /**
     * Gets hours_of_operation
     *
     * @return \Ringba\Model\OpenSetting[]
     */
    public function getHoursOfOperation()
    {
        return $this->container['hours_of_operation'];
    }

    /**
     * Sets hours_of_operation
     *
     * @param \Ringba\Model\OpenSetting[] $hours_of_operation hours_of_operation
     *
     * @return $this
     */
    public function setHoursOfOperation($hours_of_operation)
    {
        $this->container['hours_of_operation'] = $hours_of_operation;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


