<?php
/**
 * NumberPool
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ringba
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * api.ringba.com
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.10
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ringba\Model;

use \ArrayAccess;
use \Ringba\ObjectSerializer;

/**
 * NumberPool Class Doc Comment
 *
 * @category Class
 * @package  Ringba
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class NumberPool implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'NumberPool';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'hold_number_out_of_pool_in_seconds' => 'int',
        'pool_size' => 'int',
        'sort_by_geo' => 'bool',
        'total_time_for_number_out_of_pool_in_seconds' => 'int',
        'assignment_settings' => '\Ringba\Model\NumberAssignmentSettings',
        'auto_rotate_numbers' => 'bool',
        'affiliate' => '\Ringba\Model\Affiliate',
        'id' => 'string',
        'name' => 'string',
        'account_id' => 'string',
        'enabled' => 'bool',
        'version' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'hold_number_out_of_pool_in_seconds' => 'int32',
        'pool_size' => 'int32',
        'sort_by_geo' => null,
        'total_time_for_number_out_of_pool_in_seconds' => 'int32',
        'assignment_settings' => null,
        'auto_rotate_numbers' => null,
        'affiliate' => null,
        'id' => null,
        'name' => null,
        'account_id' => null,
        'enabled' => null,
        'version' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'hold_number_out_of_pool_in_seconds' => 'holdNumberOutOfPoolInSeconds',
        'pool_size' => 'poolSize',
        'sort_by_geo' => 'sortByGeo',
        'total_time_for_number_out_of_pool_in_seconds' => 'totalTimeForNumberOutOfPoolInSeconds',
        'assignment_settings' => 'assignmentSettings',
        'auto_rotate_numbers' => 'autoRotateNumbers',
        'affiliate' => 'affiliate',
        'id' => 'id',
        'name' => 'name',
        'account_id' => 'accountId',
        'enabled' => 'enabled',
        'version' => 'version'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'hold_number_out_of_pool_in_seconds' => 'setHoldNumberOutOfPoolInSeconds',
        'pool_size' => 'setPoolSize',
        'sort_by_geo' => 'setSortByGeo',
        'total_time_for_number_out_of_pool_in_seconds' => 'setTotalTimeForNumberOutOfPoolInSeconds',
        'assignment_settings' => 'setAssignmentSettings',
        'auto_rotate_numbers' => 'setAutoRotateNumbers',
        'affiliate' => 'setAffiliate',
        'id' => 'setId',
        'name' => 'setName',
        'account_id' => 'setAccountId',
        'enabled' => 'setEnabled',
        'version' => 'setVersion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'hold_number_out_of_pool_in_seconds' => 'getHoldNumberOutOfPoolInSeconds',
        'pool_size' => 'getPoolSize',
        'sort_by_geo' => 'getSortByGeo',
        'total_time_for_number_out_of_pool_in_seconds' => 'getTotalTimeForNumberOutOfPoolInSeconds',
        'assignment_settings' => 'getAssignmentSettings',
        'auto_rotate_numbers' => 'getAutoRotateNumbers',
        'affiliate' => 'getAffiliate',
        'id' => 'getId',
        'name' => 'getName',
        'account_id' => 'getAccountId',
        'enabled' => 'getEnabled',
        'version' => 'getVersion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['hold_number_out_of_pool_in_seconds'] = isset($data['hold_number_out_of_pool_in_seconds']) ? $data['hold_number_out_of_pool_in_seconds'] : null;
        $this->container['pool_size'] = isset($data['pool_size']) ? $data['pool_size'] : null;
        $this->container['sort_by_geo'] = isset($data['sort_by_geo']) ? $data['sort_by_geo'] : null;
        $this->container['total_time_for_number_out_of_pool_in_seconds'] = isset($data['total_time_for_number_out_of_pool_in_seconds']) ? $data['total_time_for_number_out_of_pool_in_seconds'] : null;
        $this->container['assignment_settings'] = isset($data['assignment_settings']) ? $data['assignment_settings'] : null;
        $this->container['auto_rotate_numbers'] = isset($data['auto_rotate_numbers']) ? $data['auto_rotate_numbers'] : null;
        $this->container['affiliate'] = isset($data['affiliate']) ? $data['affiliate'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets hold_number_out_of_pool_in_seconds
     *
     * @return int
     */
    public function getHoldNumberOutOfPoolInSeconds()
    {
        return $this->container['hold_number_out_of_pool_in_seconds'];
    }

    /**
     * Sets hold_number_out_of_pool_in_seconds
     *
     * @param int $hold_number_out_of_pool_in_seconds hold_number_out_of_pool_in_seconds
     *
     * @return $this
     */
    public function setHoldNumberOutOfPoolInSeconds($hold_number_out_of_pool_in_seconds)
    {
        $this->container['hold_number_out_of_pool_in_seconds'] = $hold_number_out_of_pool_in_seconds;

        return $this;
    }

    /**
     * Gets pool_size
     *
     * @return int
     */
    public function getPoolSize()
    {
        return $this->container['pool_size'];
    }

    /**
     * Sets pool_size
     *
     * @param int $pool_size pool_size
     *
     * @return $this
     */
    public function setPoolSize($pool_size)
    {
        $this->container['pool_size'] = $pool_size;

        return $this;
    }

    /**
     * Gets sort_by_geo
     *
     * @return bool
     */
    public function getSortByGeo()
    {
        return $this->container['sort_by_geo'];
    }

    /**
     * Sets sort_by_geo
     *
     * @param bool $sort_by_geo sort_by_geo
     *
     * @return $this
     */
    public function setSortByGeo($sort_by_geo)
    {
        $this->container['sort_by_geo'] = $sort_by_geo;

        return $this;
    }

    /**
     * Gets total_time_for_number_out_of_pool_in_seconds
     *
     * @return int
     */
    public function getTotalTimeForNumberOutOfPoolInSeconds()
    {
        return $this->container['total_time_for_number_out_of_pool_in_seconds'];
    }

    /**
     * Sets total_time_for_number_out_of_pool_in_seconds
     *
     * @param int $total_time_for_number_out_of_pool_in_seconds total_time_for_number_out_of_pool_in_seconds
     *
     * @return $this
     */
    public function setTotalTimeForNumberOutOfPoolInSeconds($total_time_for_number_out_of_pool_in_seconds)
    {
        $this->container['total_time_for_number_out_of_pool_in_seconds'] = $total_time_for_number_out_of_pool_in_seconds;

        return $this;
    }

    /**
     * Gets assignment_settings
     *
     * @return \Ringba\Model\NumberAssignmentSettings
     */
    public function getAssignmentSettings()
    {
        return $this->container['assignment_settings'];
    }

    /**
     * Sets assignment_settings
     *
     * @param \Ringba\Model\NumberAssignmentSettings $assignment_settings assignment_settings
     *
     * @return $this
     */
    public function setAssignmentSettings($assignment_settings)
    {
        $this->container['assignment_settings'] = $assignment_settings;

        return $this;
    }

    /**
     * Gets auto_rotate_numbers
     *
     * @return bool
     */
    public function getAutoRotateNumbers()
    {
        return $this->container['auto_rotate_numbers'];
    }

    /**
     * Sets auto_rotate_numbers
     *
     * @param bool $auto_rotate_numbers auto_rotate_numbers
     *
     * @return $this
     */
    public function setAutoRotateNumbers($auto_rotate_numbers)
    {
        $this->container['auto_rotate_numbers'] = $auto_rotate_numbers;

        return $this;
    }

    /**
     * Gets affiliate
     *
     * @return \Ringba\Model\Affiliate
     */
    public function getAffiliate()
    {
        return $this->container['affiliate'];
    }

    /**
     * Sets affiliate
     *
     * @param \Ringba\Model\Affiliate $affiliate affiliate
     *
     * @return $this
     */
    public function setAffiliate($affiliate)
    {
        $this->container['affiliate'] = $affiliate;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string $account_id account_id
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool $enabled enabled
     *
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets version
     *
     * @return int
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param int $version version
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


