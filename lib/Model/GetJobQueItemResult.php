<?php
/**
 * GetJobQueItemResult
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ringba
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * api.ringba.com
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.10
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ringba\Model;

use \ArrayAccess;
use \Ringba\ObjectSerializer;

/**
 * GetJobQueItemResult Class Doc Comment
 *
 * @category Class
 * @package  Ringba
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetJobQueItemResult implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GetJobQueItemResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'history' => '\Ringba\Model\JobQueItemHistoryAction[]',
        'available_actions' => '\Ringba\Model\JobQueItemAvailableAction[]',
        'creation_time' => '\DateTime',
        'last_update_time' => '\DateTime',
        'next_action_due_date' => '\DateTime',
        'completion_time' => '\DateTime',
        'status' => 'string',
        'type' => 'string',
        'title' => 'string',
        'from' => 'string',
        'from_user_id' => 'string',
        'limit_role' => 'bool',
        'role' => 'string',
        'role_id' => 'string',
        'job_details' => 'string',
        'public_state' => 'map[string,\Ringba\Model\JobQueItemPublicStateValue]',
        'id' => 'string',
        'name' => 'string',
        'account_id' => 'string',
        'enabled' => 'bool',
        'version' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'history' => null,
        'available_actions' => null,
        'creation_time' => 'date-time',
        'last_update_time' => 'date-time',
        'next_action_due_date' => 'date-time',
        'completion_time' => 'date-time',
        'status' => null,
        'type' => null,
        'title' => null,
        'from' => null,
        'from_user_id' => null,
        'limit_role' => null,
        'role' => null,
        'role_id' => null,
        'job_details' => null,
        'public_state' => null,
        'id' => null,
        'name' => null,
        'account_id' => null,
        'enabled' => null,
        'version' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'history' => 'history',
        'available_actions' => 'availableActions',
        'creation_time' => 'creationTime',
        'last_update_time' => 'lastUpdateTime',
        'next_action_due_date' => 'nextActionDueDate',
        'completion_time' => 'completionTime',
        'status' => 'status',
        'type' => 'type',
        'title' => 'title',
        'from' => 'from',
        'from_user_id' => 'fromUserId',
        'limit_role' => 'limitRole',
        'role' => 'role',
        'role_id' => 'roleId',
        'job_details' => 'jobDetails',
        'public_state' => 'publicState',
        'id' => 'id',
        'name' => 'name',
        'account_id' => 'accountId',
        'enabled' => 'enabled',
        'version' => 'version'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'history' => 'setHistory',
        'available_actions' => 'setAvailableActions',
        'creation_time' => 'setCreationTime',
        'last_update_time' => 'setLastUpdateTime',
        'next_action_due_date' => 'setNextActionDueDate',
        'completion_time' => 'setCompletionTime',
        'status' => 'setStatus',
        'type' => 'setType',
        'title' => 'setTitle',
        'from' => 'setFrom',
        'from_user_id' => 'setFromUserId',
        'limit_role' => 'setLimitRole',
        'role' => 'setRole',
        'role_id' => 'setRoleId',
        'job_details' => 'setJobDetails',
        'public_state' => 'setPublicState',
        'id' => 'setId',
        'name' => 'setName',
        'account_id' => 'setAccountId',
        'enabled' => 'setEnabled',
        'version' => 'setVersion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'history' => 'getHistory',
        'available_actions' => 'getAvailableActions',
        'creation_time' => 'getCreationTime',
        'last_update_time' => 'getLastUpdateTime',
        'next_action_due_date' => 'getNextActionDueDate',
        'completion_time' => 'getCompletionTime',
        'status' => 'getStatus',
        'type' => 'getType',
        'title' => 'getTitle',
        'from' => 'getFrom',
        'from_user_id' => 'getFromUserId',
        'limit_role' => 'getLimitRole',
        'role' => 'getRole',
        'role_id' => 'getRoleId',
        'job_details' => 'getJobDetails',
        'public_state' => 'getPublicState',
        'id' => 'getId',
        'name' => 'getName',
        'account_id' => 'getAccountId',
        'enabled' => 'getEnabled',
        'version' => 'getVersion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['history'] = isset($data['history']) ? $data['history'] : null;
        $this->container['available_actions'] = isset($data['available_actions']) ? $data['available_actions'] : null;
        $this->container['creation_time'] = isset($data['creation_time']) ? $data['creation_time'] : null;
        $this->container['last_update_time'] = isset($data['last_update_time']) ? $data['last_update_time'] : null;
        $this->container['next_action_due_date'] = isset($data['next_action_due_date']) ? $data['next_action_due_date'] : null;
        $this->container['completion_time'] = isset($data['completion_time']) ? $data['completion_time'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['from'] = isset($data['from']) ? $data['from'] : null;
        $this->container['from_user_id'] = isset($data['from_user_id']) ? $data['from_user_id'] : null;
        $this->container['limit_role'] = isset($data['limit_role']) ? $data['limit_role'] : null;
        $this->container['role'] = isset($data['role']) ? $data['role'] : null;
        $this->container['role_id'] = isset($data['role_id']) ? $data['role_id'] : null;
        $this->container['job_details'] = isset($data['job_details']) ? $data['job_details'] : null;
        $this->container['public_state'] = isset($data['public_state']) ? $data['public_state'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets history
     *
     * @return \Ringba\Model\JobQueItemHistoryAction[]
     */
    public function getHistory()
    {
        return $this->container['history'];
    }

    /**
     * Sets history
     *
     * @param \Ringba\Model\JobQueItemHistoryAction[] $history history
     *
     * @return $this
     */
    public function setHistory($history)
    {
        $this->container['history'] = $history;

        return $this;
    }

    /**
     * Gets available_actions
     *
     * @return \Ringba\Model\JobQueItemAvailableAction[]
     */
    public function getAvailableActions()
    {
        return $this->container['available_actions'];
    }

    /**
     * Sets available_actions
     *
     * @param \Ringba\Model\JobQueItemAvailableAction[] $available_actions available_actions
     *
     * @return $this
     */
    public function setAvailableActions($available_actions)
    {
        $this->container['available_actions'] = $available_actions;

        return $this;
    }

    /**
     * Gets creation_time
     *
     * @return \DateTime
     */
    public function getCreationTime()
    {
        return $this->container['creation_time'];
    }

    /**
     * Sets creation_time
     *
     * @param \DateTime $creation_time creation_time
     *
     * @return $this
     */
    public function setCreationTime($creation_time)
    {
        $this->container['creation_time'] = $creation_time;

        return $this;
    }

    /**
     * Gets last_update_time
     *
     * @return \DateTime
     */
    public function getLastUpdateTime()
    {
        return $this->container['last_update_time'];
    }

    /**
     * Sets last_update_time
     *
     * @param \DateTime $last_update_time last_update_time
     *
     * @return $this
     */
    public function setLastUpdateTime($last_update_time)
    {
        $this->container['last_update_time'] = $last_update_time;

        return $this;
    }

    /**
     * Gets next_action_due_date
     *
     * @return \DateTime
     */
    public function getNextActionDueDate()
    {
        return $this->container['next_action_due_date'];
    }

    /**
     * Sets next_action_due_date
     *
     * @param \DateTime $next_action_due_date next_action_due_date
     *
     * @return $this
     */
    public function setNextActionDueDate($next_action_due_date)
    {
        $this->container['next_action_due_date'] = $next_action_due_date;

        return $this;
    }

    /**
     * Gets completion_time
     *
     * @return \DateTime
     */
    public function getCompletionTime()
    {
        return $this->container['completion_time'];
    }

    /**
     * Sets completion_time
     *
     * @param \DateTime $completion_time completion_time
     *
     * @return $this
     */
    public function setCompletionTime($completion_time)
    {
        $this->container['completion_time'] = $completion_time;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets from
     *
     * @return string
     */
    public function getFrom()
    {
        return $this->container['from'];
    }

    /**
     * Sets from
     *
     * @param string $from from
     *
     * @return $this
     */
    public function setFrom($from)
    {
        $this->container['from'] = $from;

        return $this;
    }

    /**
     * Gets from_user_id
     *
     * @return string
     */
    public function getFromUserId()
    {
        return $this->container['from_user_id'];
    }

    /**
     * Sets from_user_id
     *
     * @param string $from_user_id from_user_id
     *
     * @return $this
     */
    public function setFromUserId($from_user_id)
    {
        $this->container['from_user_id'] = $from_user_id;

        return $this;
    }

    /**
     * Gets limit_role
     *
     * @return bool
     */
    public function getLimitRole()
    {
        return $this->container['limit_role'];
    }

    /**
     * Sets limit_role
     *
     * @param bool $limit_role limit_role
     *
     * @return $this
     */
    public function setLimitRole($limit_role)
    {
        $this->container['limit_role'] = $limit_role;

        return $this;
    }

    /**
     * Gets role
     *
     * @return string
     */
    public function getRole()
    {
        return $this->container['role'];
    }

    /**
     * Sets role
     *
     * @param string $role role
     *
     * @return $this
     */
    public function setRole($role)
    {
        $this->container['role'] = $role;

        return $this;
    }

    /**
     * Gets role_id
     *
     * @return string
     */
    public function getRoleId()
    {
        return $this->container['role_id'];
    }

    /**
     * Sets role_id
     *
     * @param string $role_id role_id
     *
     * @return $this
     */
    public function setRoleId($role_id)
    {
        $this->container['role_id'] = $role_id;

        return $this;
    }

    /**
     * Gets job_details
     *
     * @return string
     */
    public function getJobDetails()
    {
        return $this->container['job_details'];
    }

    /**
     * Sets job_details
     *
     * @param string $job_details job_details
     *
     * @return $this
     */
    public function setJobDetails($job_details)
    {
        $this->container['job_details'] = $job_details;

        return $this;
    }

    /**
     * Gets public_state
     *
     * @return map[string,\Ringba\Model\JobQueItemPublicStateValue]
     */
    public function getPublicState()
    {
        return $this->container['public_state'];
    }

    /**
     * Sets public_state
     *
     * @param map[string,\Ringba\Model\JobQueItemPublicStateValue] $public_state public_state
     *
     * @return $this
     */
    public function setPublicState($public_state)
    {
        $this->container['public_state'] = $public_state;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string $account_id account_id
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool $enabled enabled
     *
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets version
     *
     * @return int
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param int $version version
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


