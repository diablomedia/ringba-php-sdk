<?php
/**
 * PingTreeTarget
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ringba
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * api.ringba.com
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.10
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ringba\Model;

use \ArrayAccess;
use \Ringba\ObjectSerializer;

/**
 * PingTreeTarget Class Doc Comment
 *
 * @category Class
 * @package  Ringba
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PingTreeTarget implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PingTreeTarget';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'url' => 'string',
        'method' => 'string',
        'body' => 'string',
        'content_type' => 'string',
        'headers' => 'map[string,string]',
        'parse_settings' => 'map[string,\Ringba\Model\ParseSetting[]]',
        'bid_acceptance_settings' => '\Ringba\Model\BidAcceptanceSettings',
        'is_number_dynamic' => 'bool',
        'ping_tree_id' => 'string',
        'error_settings' => '\Ringba\Model\ErrorSettings',
        'revenue_settings' => '\Ringba\Model\RevenueSettings',
        'target_group_id' => 'string',
        'instructions' => '\Ringba\Model\CallInstructions',
        'is_high_rate_target' => 'bool',
        'sub_id' => 'string',
        'target_call_increment' => 'string',
        'owner' => '\Ringba\Model\Buyer',
        'conversion_timer_offset' => 'int',
        'schedule' => '\Ringba\Model\ScheduleAndCapacity',
        'criteria' => '\Ringba\Model\TagRoutableRule[]',
        'id' => 'string',
        'name' => 'string',
        'account_id' => 'string',
        'enabled' => 'bool',
        'version' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'url' => null,
        'method' => null,
        'body' => null,
        'content_type' => null,
        'headers' => null,
        'parse_settings' => null,
        'bid_acceptance_settings' => null,
        'is_number_dynamic' => null,
        'ping_tree_id' => null,
        'error_settings' => null,
        'revenue_settings' => null,
        'target_group_id' => null,
        'instructions' => null,
        'is_high_rate_target' => null,
        'sub_id' => null,
        'target_call_increment' => null,
        'owner' => null,
        'conversion_timer_offset' => 'int32',
        'schedule' => null,
        'criteria' => null,
        'id' => null,
        'name' => null,
        'account_id' => null,
        'enabled' => null,
        'version' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'url' => 'url',
        'method' => 'method',
        'body' => 'body',
        'content_type' => 'contentType',
        'headers' => 'headers',
        'parse_settings' => 'parseSettings',
        'bid_acceptance_settings' => 'bidAcceptanceSettings',
        'is_number_dynamic' => 'isNumberDynamic',
        'ping_tree_id' => 'pingTreeId',
        'error_settings' => 'errorSettings',
        'revenue_settings' => 'revenueSettings',
        'target_group_id' => 'targetGroupId',
        'instructions' => 'instructions',
        'is_high_rate_target' => 'isHighRateTarget',
        'sub_id' => 'subId',
        'target_call_increment' => 'targetCallIncrement',
        'owner' => 'owner',
        'conversion_timer_offset' => 'conversionTimerOffset',
        'schedule' => 'schedule',
        'criteria' => 'criteria',
        'id' => 'id',
        'name' => 'name',
        'account_id' => 'accountId',
        'enabled' => 'enabled',
        'version' => 'version'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'url' => 'setUrl',
        'method' => 'setMethod',
        'body' => 'setBody',
        'content_type' => 'setContentType',
        'headers' => 'setHeaders',
        'parse_settings' => 'setParseSettings',
        'bid_acceptance_settings' => 'setBidAcceptanceSettings',
        'is_number_dynamic' => 'setIsNumberDynamic',
        'ping_tree_id' => 'setPingTreeId',
        'error_settings' => 'setErrorSettings',
        'revenue_settings' => 'setRevenueSettings',
        'target_group_id' => 'setTargetGroupId',
        'instructions' => 'setInstructions',
        'is_high_rate_target' => 'setIsHighRateTarget',
        'sub_id' => 'setSubId',
        'target_call_increment' => 'setTargetCallIncrement',
        'owner' => 'setOwner',
        'conversion_timer_offset' => 'setConversionTimerOffset',
        'schedule' => 'setSchedule',
        'criteria' => 'setCriteria',
        'id' => 'setId',
        'name' => 'setName',
        'account_id' => 'setAccountId',
        'enabled' => 'setEnabled',
        'version' => 'setVersion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'url' => 'getUrl',
        'method' => 'getMethod',
        'body' => 'getBody',
        'content_type' => 'getContentType',
        'headers' => 'getHeaders',
        'parse_settings' => 'getParseSettings',
        'bid_acceptance_settings' => 'getBidAcceptanceSettings',
        'is_number_dynamic' => 'getIsNumberDynamic',
        'ping_tree_id' => 'getPingTreeId',
        'error_settings' => 'getErrorSettings',
        'revenue_settings' => 'getRevenueSettings',
        'target_group_id' => 'getTargetGroupId',
        'instructions' => 'getInstructions',
        'is_high_rate_target' => 'getIsHighRateTarget',
        'sub_id' => 'getSubId',
        'target_call_increment' => 'getTargetCallIncrement',
        'owner' => 'getOwner',
        'conversion_timer_offset' => 'getConversionTimerOffset',
        'schedule' => 'getSchedule',
        'criteria' => 'getCriteria',
        'id' => 'getId',
        'name' => 'getName',
        'account_id' => 'getAccountId',
        'enabled' => 'getEnabled',
        'version' => 'getVersion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['method'] = isset($data['method']) ? $data['method'] : null;
        $this->container['body'] = isset($data['body']) ? $data['body'] : null;
        $this->container['content_type'] = isset($data['content_type']) ? $data['content_type'] : null;
        $this->container['headers'] = isset($data['headers']) ? $data['headers'] : null;
        $this->container['parse_settings'] = isset($data['parse_settings']) ? $data['parse_settings'] : null;
        $this->container['bid_acceptance_settings'] = isset($data['bid_acceptance_settings']) ? $data['bid_acceptance_settings'] : null;
        $this->container['is_number_dynamic'] = isset($data['is_number_dynamic']) ? $data['is_number_dynamic'] : null;
        $this->container['ping_tree_id'] = isset($data['ping_tree_id']) ? $data['ping_tree_id'] : null;
        $this->container['error_settings'] = isset($data['error_settings']) ? $data['error_settings'] : null;
        $this->container['revenue_settings'] = isset($data['revenue_settings']) ? $data['revenue_settings'] : null;
        $this->container['target_group_id'] = isset($data['target_group_id']) ? $data['target_group_id'] : null;
        $this->container['instructions'] = isset($data['instructions']) ? $data['instructions'] : null;
        $this->container['is_high_rate_target'] = isset($data['is_high_rate_target']) ? $data['is_high_rate_target'] : null;
        $this->container['sub_id'] = isset($data['sub_id']) ? $data['sub_id'] : null;
        $this->container['target_call_increment'] = isset($data['target_call_increment']) ? $data['target_call_increment'] : null;
        $this->container['owner'] = isset($data['owner']) ? $data['owner'] : null;
        $this->container['conversion_timer_offset'] = isset($data['conversion_timer_offset']) ? $data['conversion_timer_offset'] : null;
        $this->container['schedule'] = isset($data['schedule']) ? $data['schedule'] : null;
        $this->container['criteria'] = isset($data['criteria']) ? $data['criteria'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets method
     *
     * @return string
     */
    public function getMethod()
    {
        return $this->container['method'];
    }

    /**
     * Sets method
     *
     * @param string $method method
     *
     * @return $this
     */
    public function setMethod($method)
    {
        $this->container['method'] = $method;

        return $this;
    }

    /**
     * Gets body
     *
     * @return string
     */
    public function getBody()
    {
        return $this->container['body'];
    }

    /**
     * Sets body
     *
     * @param string $body body
     *
     * @return $this
     */
    public function setBody($body)
    {
        $this->container['body'] = $body;

        return $this;
    }

    /**
     * Gets content_type
     *
     * @return string
     */
    public function getContentType()
    {
        return $this->container['content_type'];
    }

    /**
     * Sets content_type
     *
     * @param string $content_type content_type
     *
     * @return $this
     */
    public function setContentType($content_type)
    {
        $this->container['content_type'] = $content_type;

        return $this;
    }

    /**
     * Gets headers
     *
     * @return map[string,string]
     */
    public function getHeaders()
    {
        return $this->container['headers'];
    }

    /**
     * Sets headers
     *
     * @param map[string,string] $headers headers
     *
     * @return $this
     */
    public function setHeaders($headers)
    {
        $this->container['headers'] = $headers;

        return $this;
    }

    /**
     * Gets parse_settings
     *
     * @return map[string,\Ringba\Model\ParseSetting[]]
     */
    public function getParseSettings()
    {
        return $this->container['parse_settings'];
    }

    /**
     * Sets parse_settings
     *
     * @param map[string,\Ringba\Model\ParseSetting[]] $parse_settings parse_settings
     *
     * @return $this
     */
    public function setParseSettings($parse_settings)
    {
        $this->container['parse_settings'] = $parse_settings;

        return $this;
    }

    /**
     * Gets bid_acceptance_settings
     *
     * @return \Ringba\Model\BidAcceptanceSettings
     */
    public function getBidAcceptanceSettings()
    {
        return $this->container['bid_acceptance_settings'];
    }

    /**
     * Sets bid_acceptance_settings
     *
     * @param \Ringba\Model\BidAcceptanceSettings $bid_acceptance_settings bid_acceptance_settings
     *
     * @return $this
     */
    public function setBidAcceptanceSettings($bid_acceptance_settings)
    {
        $this->container['bid_acceptance_settings'] = $bid_acceptance_settings;

        return $this;
    }

    /**
     * Gets is_number_dynamic
     *
     * @return bool
     */
    public function getIsNumberDynamic()
    {
        return $this->container['is_number_dynamic'];
    }

    /**
     * Sets is_number_dynamic
     *
     * @param bool $is_number_dynamic is_number_dynamic
     *
     * @return $this
     */
    public function setIsNumberDynamic($is_number_dynamic)
    {
        $this->container['is_number_dynamic'] = $is_number_dynamic;

        return $this;
    }

    /**
     * Gets ping_tree_id
     *
     * @return string
     */
    public function getPingTreeId()
    {
        return $this->container['ping_tree_id'];
    }

    /**
     * Sets ping_tree_id
     *
     * @param string $ping_tree_id ping_tree_id
     *
     * @return $this
     */
    public function setPingTreeId($ping_tree_id)
    {
        $this->container['ping_tree_id'] = $ping_tree_id;

        return $this;
    }

    /**
     * Gets error_settings
     *
     * @return \Ringba\Model\ErrorSettings
     */
    public function getErrorSettings()
    {
        return $this->container['error_settings'];
    }

    /**
     * Sets error_settings
     *
     * @param \Ringba\Model\ErrorSettings $error_settings error_settings
     *
     * @return $this
     */
    public function setErrorSettings($error_settings)
    {
        $this->container['error_settings'] = $error_settings;

        return $this;
    }

    /**
     * Gets revenue_settings
     *
     * @return \Ringba\Model\RevenueSettings
     */
    public function getRevenueSettings()
    {
        return $this->container['revenue_settings'];
    }

    /**
     * Sets revenue_settings
     *
     * @param \Ringba\Model\RevenueSettings $revenue_settings revenue_settings
     *
     * @return $this
     */
    public function setRevenueSettings($revenue_settings)
    {
        $this->container['revenue_settings'] = $revenue_settings;

        return $this;
    }

    /**
     * Gets target_group_id
     *
     * @return string
     */
    public function getTargetGroupId()
    {
        return $this->container['target_group_id'];
    }

    /**
     * Sets target_group_id
     *
     * @param string $target_group_id target_group_id
     *
     * @return $this
     */
    public function setTargetGroupId($target_group_id)
    {
        $this->container['target_group_id'] = $target_group_id;

        return $this;
    }

    /**
     * Gets instructions
     *
     * @return \Ringba\Model\CallInstructions
     */
    public function getInstructions()
    {
        return $this->container['instructions'];
    }

    /**
     * Sets instructions
     *
     * @param \Ringba\Model\CallInstructions $instructions instructions
     *
     * @return $this
     */
    public function setInstructions($instructions)
    {
        $this->container['instructions'] = $instructions;

        return $this;
    }

    /**
     * Gets is_high_rate_target
     *
     * @return bool
     */
    public function getIsHighRateTarget()
    {
        return $this->container['is_high_rate_target'];
    }

    /**
     * Sets is_high_rate_target
     *
     * @param bool $is_high_rate_target is_high_rate_target
     *
     * @return $this
     */
    public function setIsHighRateTarget($is_high_rate_target)
    {
        $this->container['is_high_rate_target'] = $is_high_rate_target;

        return $this;
    }

    /**
     * Gets sub_id
     *
     * @return string
     */
    public function getSubId()
    {
        return $this->container['sub_id'];
    }

    /**
     * Sets sub_id
     *
     * @param string $sub_id sub_id
     *
     * @return $this
     */
    public function setSubId($sub_id)
    {
        $this->container['sub_id'] = $sub_id;

        return $this;
    }

    /**
     * Gets target_call_increment
     *
     * @return string
     */
    public function getTargetCallIncrement()
    {
        return $this->container['target_call_increment'];
    }

    /**
     * Sets target_call_increment
     *
     * @param string $target_call_increment target_call_increment
     *
     * @return $this
     */
    public function setTargetCallIncrement($target_call_increment)
    {
        $this->container['target_call_increment'] = $target_call_increment;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return \Ringba\Model\Buyer
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param \Ringba\Model\Buyer $owner owner
     *
     * @return $this
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets conversion_timer_offset
     *
     * @return int
     */
    public function getConversionTimerOffset()
    {
        return $this->container['conversion_timer_offset'];
    }

    /**
     * Sets conversion_timer_offset
     *
     * @param int $conversion_timer_offset conversion_timer_offset
     *
     * @return $this
     */
    public function setConversionTimerOffset($conversion_timer_offset)
    {
        $this->container['conversion_timer_offset'] = $conversion_timer_offset;

        return $this;
    }

    /**
     * Gets schedule
     *
     * @return \Ringba\Model\ScheduleAndCapacity
     */
    public function getSchedule()
    {
        return $this->container['schedule'];
    }

    /**
     * Sets schedule
     *
     * @param \Ringba\Model\ScheduleAndCapacity $schedule schedule
     *
     * @return $this
     */
    public function setSchedule($schedule)
    {
        $this->container['schedule'] = $schedule;

        return $this;
    }

    /**
     * Gets criteria
     *
     * @return \Ringba\Model\TagRoutableRule[]
     */
    public function getCriteria()
    {
        return $this->container['criteria'];
    }

    /**
     * Sets criteria
     *
     * @param \Ringba\Model\TagRoutableRule[] $criteria criteria
     *
     * @return $this
     */
    public function setCriteria($criteria)
    {
        $this->container['criteria'] = $criteria;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string $account_id account_id
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool $enabled enabled
     *
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets version
     *
     * @return int
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param int $version version
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


