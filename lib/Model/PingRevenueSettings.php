<?php
/**
 * PingRevenueSettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ringba
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * api.ringba.com
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.10
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ringba\Model;

use \ArrayAccess;
use \Ringba\ObjectSerializer;

/**
 * PingRevenueSettings Class Doc Comment
 *
 * @category Class
 * @package  Ringba
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PingRevenueSettings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PingRevenueSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'revenue_dynamic' => 'bool',
        'static_revenue_amount' => 'double',
        'revenue_on_failure' => 'double',
        'conversion_params' => '\Ringba\Model\BaseConversion',
        'conversion_call_length_dynamic' => 'bool',
        'max_conversion_call_duration_seconds' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'revenue_dynamic' => null,
        'static_revenue_amount' => 'double',
        'revenue_on_failure' => 'double',
        'conversion_params' => null,
        'conversion_call_length_dynamic' => null,
        'max_conversion_call_duration_seconds' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'revenue_dynamic' => 'revenueDynamic',
        'static_revenue_amount' => 'staticRevenueAmount',
        'revenue_on_failure' => 'revenueOnFailure',
        'conversion_params' => 'conversionParams',
        'conversion_call_length_dynamic' => 'conversionCallLengthDynamic',
        'max_conversion_call_duration_seconds' => 'maxConversionCallDurationSeconds'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'revenue_dynamic' => 'setRevenueDynamic',
        'static_revenue_amount' => 'setStaticRevenueAmount',
        'revenue_on_failure' => 'setRevenueOnFailure',
        'conversion_params' => 'setConversionParams',
        'conversion_call_length_dynamic' => 'setConversionCallLengthDynamic',
        'max_conversion_call_duration_seconds' => 'setMaxConversionCallDurationSeconds'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'revenue_dynamic' => 'getRevenueDynamic',
        'static_revenue_amount' => 'getStaticRevenueAmount',
        'revenue_on_failure' => 'getRevenueOnFailure',
        'conversion_params' => 'getConversionParams',
        'conversion_call_length_dynamic' => 'getConversionCallLengthDynamic',
        'max_conversion_call_duration_seconds' => 'getMaxConversionCallDurationSeconds'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['revenue_dynamic'] = isset($data['revenue_dynamic']) ? $data['revenue_dynamic'] : null;
        $this->container['static_revenue_amount'] = isset($data['static_revenue_amount']) ? $data['static_revenue_amount'] : null;
        $this->container['revenue_on_failure'] = isset($data['revenue_on_failure']) ? $data['revenue_on_failure'] : null;
        $this->container['conversion_params'] = isset($data['conversion_params']) ? $data['conversion_params'] : null;
        $this->container['conversion_call_length_dynamic'] = isset($data['conversion_call_length_dynamic']) ? $data['conversion_call_length_dynamic'] : null;
        $this->container['max_conversion_call_duration_seconds'] = isset($data['max_conversion_call_duration_seconds']) ? $data['max_conversion_call_duration_seconds'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['revenue_dynamic'] === null) {
            $invalidProperties[] = "'revenue_dynamic' can't be null";
        }
        if (!is_null($this->container['static_revenue_amount']) && ($this->container['static_revenue_amount'] > 1000000)) {
            $invalidProperties[] = "invalid value for 'static_revenue_amount', must be smaller than or equal to 1000000.";
        }

        if (!is_null($this->container['static_revenue_amount']) && ($this->container['static_revenue_amount'] < 0)) {
            $invalidProperties[] = "invalid value for 'static_revenue_amount', must be bigger than or equal to 0.";
        }

        if ($this->container['revenue_on_failure'] === null) {
            $invalidProperties[] = "'revenue_on_failure' can't be null";
        }
        if (($this->container['revenue_on_failure'] > 1000000)) {
            $invalidProperties[] = "invalid value for 'revenue_on_failure', must be smaller than or equal to 1000000.";
        }

        if (($this->container['revenue_on_failure'] < 0)) {
            $invalidProperties[] = "invalid value for 'revenue_on_failure', must be bigger than or equal to 0.";
        }

        if ($this->container['conversion_params'] === null) {
            $invalidProperties[] = "'conversion_params' can't be null";
        }
        if ($this->container['conversion_call_length_dynamic'] === null) {
            $invalidProperties[] = "'conversion_call_length_dynamic' can't be null";
        }
        if (!is_null($this->container['max_conversion_call_duration_seconds']) && ($this->container['max_conversion_call_duration_seconds'] > 86400)) {
            $invalidProperties[] = "invalid value for 'max_conversion_call_duration_seconds', must be smaller than or equal to 86400.";
        }

        if (!is_null($this->container['max_conversion_call_duration_seconds']) && ($this->container['max_conversion_call_duration_seconds'] < 0)) {
            $invalidProperties[] = "invalid value for 'max_conversion_call_duration_seconds', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets revenue_dynamic
     *
     * @return bool
     */
    public function getRevenueDynamic()
    {
        return $this->container['revenue_dynamic'];
    }

    /**
     * Sets revenue_dynamic
     *
     * @param bool $revenue_dynamic revenue_dynamic
     *
     * @return $this
     */
    public function setRevenueDynamic($revenue_dynamic)
    {
        $this->container['revenue_dynamic'] = $revenue_dynamic;

        return $this;
    }

    /**
     * Gets static_revenue_amount
     *
     * @return double
     */
    public function getStaticRevenueAmount()
    {
        return $this->container['static_revenue_amount'];
    }

    /**
     * Sets static_revenue_amount
     *
     * @param double $static_revenue_amount static_revenue_amount
     *
     * @return $this
     */
    public function setStaticRevenueAmount($static_revenue_amount)
    {

        if (!is_null($static_revenue_amount) && ($static_revenue_amount > 1000000)) {
            throw new \InvalidArgumentException('invalid value for $static_revenue_amount when calling PingRevenueSettings., must be smaller than or equal to 1000000.');
        }
        if (!is_null($static_revenue_amount) && ($static_revenue_amount < 0)) {
            throw new \InvalidArgumentException('invalid value for $static_revenue_amount when calling PingRevenueSettings., must be bigger than or equal to 0.');
        }

        $this->container['static_revenue_amount'] = $static_revenue_amount;

        return $this;
    }

    /**
     * Gets revenue_on_failure
     *
     * @return double
     */
    public function getRevenueOnFailure()
    {
        return $this->container['revenue_on_failure'];
    }

    /**
     * Sets revenue_on_failure
     *
     * @param double $revenue_on_failure revenue_on_failure
     *
     * @return $this
     */
    public function setRevenueOnFailure($revenue_on_failure)
    {

        if (($revenue_on_failure > 1000000)) {
            throw new \InvalidArgumentException('invalid value for $revenue_on_failure when calling PingRevenueSettings., must be smaller than or equal to 1000000.');
        }
        if (($revenue_on_failure < 0)) {
            throw new \InvalidArgumentException('invalid value for $revenue_on_failure when calling PingRevenueSettings., must be bigger than or equal to 0.');
        }

        $this->container['revenue_on_failure'] = $revenue_on_failure;

        return $this;
    }

    /**
     * Gets conversion_params
     *
     * @return \Ringba\Model\BaseConversion
     */
    public function getConversionParams()
    {
        return $this->container['conversion_params'];
    }

    /**
     * Sets conversion_params
     *
     * @param \Ringba\Model\BaseConversion $conversion_params conversion_params
     *
     * @return $this
     */
    public function setConversionParams($conversion_params)
    {
        $this->container['conversion_params'] = $conversion_params;

        return $this;
    }

    /**
     * Gets conversion_call_length_dynamic
     *
     * @return bool
     */
    public function getConversionCallLengthDynamic()
    {
        return $this->container['conversion_call_length_dynamic'];
    }

    /**
     * Sets conversion_call_length_dynamic
     *
     * @param bool $conversion_call_length_dynamic conversion_call_length_dynamic
     *
     * @return $this
     */
    public function setConversionCallLengthDynamic($conversion_call_length_dynamic)
    {
        $this->container['conversion_call_length_dynamic'] = $conversion_call_length_dynamic;

        return $this;
    }

    /**
     * Gets max_conversion_call_duration_seconds
     *
     * @return int
     */
    public function getMaxConversionCallDurationSeconds()
    {
        return $this->container['max_conversion_call_duration_seconds'];
    }

    /**
     * Sets max_conversion_call_duration_seconds
     *
     * @param int $max_conversion_call_duration_seconds max_conversion_call_duration_seconds
     *
     * @return $this
     */
    public function setMaxConversionCallDurationSeconds($max_conversion_call_duration_seconds)
    {

        if (!is_null($max_conversion_call_duration_seconds) && ($max_conversion_call_duration_seconds > 86400)) {
            throw new \InvalidArgumentException('invalid value for $max_conversion_call_duration_seconds when calling PingRevenueSettings., must be smaller than or equal to 86400.');
        }
        if (!is_null($max_conversion_call_duration_seconds) && ($max_conversion_call_duration_seconds < 0)) {
            throw new \InvalidArgumentException('invalid value for $max_conversion_call_duration_seconds when calling PingRevenueSettings., must be bigger than or equal to 0.');
        }

        $this->container['max_conversion_call_duration_seconds'] = $max_conversion_call_duration_seconds;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


