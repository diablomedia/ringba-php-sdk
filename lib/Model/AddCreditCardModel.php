<?php
/**
 * AddCreditCardModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ringba
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * api.ringba.com
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.10
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ringba\Model;

use \ArrayAccess;
use \Ringba\ObjectSerializer;

/**
 * AddCreditCardModel Class Doc Comment
 *
 * @category Class
 * @package  Ringba
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AddCreditCardModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AddCreditCardModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'use_account_address' => 'bool',
        'use_login_email' => 'bool',
        'email' => 'string',
        'credit_card_address' => '\Ringba\Model\AddressRequestModel',
        'credit_card_number' => 'string',
        'csv' => 'string',
        'exp_month' => 'int',
        'exp_year' => 'int',
        'customer_name_on_card' => 'string',
        'card_name' => 'string',
        'card_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'use_account_address' => null,
        'use_login_email' => null,
        'email' => null,
        'credit_card_address' => null,
        'credit_card_number' => null,
        'csv' => null,
        'exp_month' => 'int32',
        'exp_year' => 'int32',
        'customer_name_on_card' => null,
        'card_name' => null,
        'card_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'use_account_address' => 'useAccountAddress',
        'use_login_email' => 'useLoginEmail',
        'email' => 'email',
        'credit_card_address' => 'creditCardAddress',
        'credit_card_number' => 'creditCardNumber',
        'csv' => 'csv',
        'exp_month' => 'expMonth',
        'exp_year' => 'expYear',
        'customer_name_on_card' => 'customerNameOnCard',
        'card_name' => 'cardName',
        'card_type' => 'cardType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'use_account_address' => 'setUseAccountAddress',
        'use_login_email' => 'setUseLoginEmail',
        'email' => 'setEmail',
        'credit_card_address' => 'setCreditCardAddress',
        'credit_card_number' => 'setCreditCardNumber',
        'csv' => 'setCsv',
        'exp_month' => 'setExpMonth',
        'exp_year' => 'setExpYear',
        'customer_name_on_card' => 'setCustomerNameOnCard',
        'card_name' => 'setCardName',
        'card_type' => 'setCardType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'use_account_address' => 'getUseAccountAddress',
        'use_login_email' => 'getUseLoginEmail',
        'email' => 'getEmail',
        'credit_card_address' => 'getCreditCardAddress',
        'credit_card_number' => 'getCreditCardNumber',
        'csv' => 'getCsv',
        'exp_month' => 'getExpMonth',
        'exp_year' => 'getExpYear',
        'customer_name_on_card' => 'getCustomerNameOnCard',
        'card_name' => 'getCardName',
        'card_type' => 'getCardType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['use_account_address'] = isset($data['use_account_address']) ? $data['use_account_address'] : null;
        $this->container['use_login_email'] = isset($data['use_login_email']) ? $data['use_login_email'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['credit_card_address'] = isset($data['credit_card_address']) ? $data['credit_card_address'] : null;
        $this->container['credit_card_number'] = isset($data['credit_card_number']) ? $data['credit_card_number'] : null;
        $this->container['csv'] = isset($data['csv']) ? $data['csv'] : null;
        $this->container['exp_month'] = isset($data['exp_month']) ? $data['exp_month'] : null;
        $this->container['exp_year'] = isset($data['exp_year']) ? $data['exp_year'] : null;
        $this->container['customer_name_on_card'] = isset($data['customer_name_on_card']) ? $data['customer_name_on_card'] : null;
        $this->container['card_name'] = isset($data['card_name']) ? $data['card_name'] : null;
        $this->container['card_type'] = isset($data['card_type']) ? $data['card_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['credit_card_number'] === null) {
            $invalidProperties[] = "'credit_card_number' can't be null";
        }
        if ($this->container['csv'] === null) {
            $invalidProperties[] = "'csv' can't be null";
        }
        if ($this->container['exp_month'] === null) {
            $invalidProperties[] = "'exp_month' can't be null";
        }
        if (($this->container['exp_month'] > 12)) {
            $invalidProperties[] = "invalid value for 'exp_month', must be smaller than or equal to 12.";
        }

        if (($this->container['exp_month'] < 1)) {
            $invalidProperties[] = "invalid value for 'exp_month', must be bigger than or equal to 1.";
        }

        if ($this->container['exp_year'] === null) {
            $invalidProperties[] = "'exp_year' can't be null";
        }
        if ($this->container['customer_name_on_card'] === null) {
            $invalidProperties[] = "'customer_name_on_card' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets use_account_address
     *
     * @return bool
     */
    public function getUseAccountAddress()
    {
        return $this->container['use_account_address'];
    }

    /**
     * Sets use_account_address
     *
     * @param bool $use_account_address use_account_address
     *
     * @return $this
     */
    public function setUseAccountAddress($use_account_address)
    {
        $this->container['use_account_address'] = $use_account_address;

        return $this;
    }

    /**
     * Gets use_login_email
     *
     * @return bool
     */
    public function getUseLoginEmail()
    {
        return $this->container['use_login_email'];
    }

    /**
     * Sets use_login_email
     *
     * @param bool $use_login_email use_login_email
     *
     * @return $this
     */
    public function setUseLoginEmail($use_login_email)
    {
        $this->container['use_login_email'] = $use_login_email;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets credit_card_address
     *
     * @return \Ringba\Model\AddressRequestModel
     */
    public function getCreditCardAddress()
    {
        return $this->container['credit_card_address'];
    }

    /**
     * Sets credit_card_address
     *
     * @param \Ringba\Model\AddressRequestModel $credit_card_address credit_card_address
     *
     * @return $this
     */
    public function setCreditCardAddress($credit_card_address)
    {
        $this->container['credit_card_address'] = $credit_card_address;

        return $this;
    }

    /**
     * Gets credit_card_number
     *
     * @return string
     */
    public function getCreditCardNumber()
    {
        return $this->container['credit_card_number'];
    }

    /**
     * Sets credit_card_number
     *
     * @param string $credit_card_number credit_card_number
     *
     * @return $this
     */
    public function setCreditCardNumber($credit_card_number)
    {
        $this->container['credit_card_number'] = $credit_card_number;

        return $this;
    }

    /**
     * Gets csv
     *
     * @return string
     */
    public function getCsv()
    {
        return $this->container['csv'];
    }

    /**
     * Sets csv
     *
     * @param string $csv csv
     *
     * @return $this
     */
    public function setCsv($csv)
    {
        $this->container['csv'] = $csv;

        return $this;
    }

    /**
     * Gets exp_month
     *
     * @return int
     */
    public function getExpMonth()
    {
        return $this->container['exp_month'];
    }

    /**
     * Sets exp_month
     *
     * @param int $exp_month exp_month
     *
     * @return $this
     */
    public function setExpMonth($exp_month)
    {

        if (($exp_month > 12)) {
            throw new \InvalidArgumentException('invalid value for $exp_month when calling AddCreditCardModel., must be smaller than or equal to 12.');
        }
        if (($exp_month < 1)) {
            throw new \InvalidArgumentException('invalid value for $exp_month when calling AddCreditCardModel., must be bigger than or equal to 1.');
        }

        $this->container['exp_month'] = $exp_month;

        return $this;
    }

    /**
     * Gets exp_year
     *
     * @return int
     */
    public function getExpYear()
    {
        return $this->container['exp_year'];
    }

    /**
     * Sets exp_year
     *
     * @param int $exp_year exp_year
     *
     * @return $this
     */
    public function setExpYear($exp_year)
    {
        $this->container['exp_year'] = $exp_year;

        return $this;
    }

    /**
     * Gets customer_name_on_card
     *
     * @return string
     */
    public function getCustomerNameOnCard()
    {
        return $this->container['customer_name_on_card'];
    }

    /**
     * Sets customer_name_on_card
     *
     * @param string $customer_name_on_card customer_name_on_card
     *
     * @return $this
     */
    public function setCustomerNameOnCard($customer_name_on_card)
    {
        $this->container['customer_name_on_card'] = $customer_name_on_card;

        return $this;
    }

    /**
     * Gets card_name
     *
     * @return string
     */
    public function getCardName()
    {
        return $this->container['card_name'];
    }

    /**
     * Sets card_name
     *
     * @param string $card_name card_name
     *
     * @return $this
     */
    public function setCardName($card_name)
    {
        $this->container['card_name'] = $card_name;

        return $this;
    }

    /**
     * Gets card_type
     *
     * @return string
     */
    public function getCardType()
    {
        return $this->container['card_type'];
    }

    /**
     * Sets card_type
     *
     * @param string $card_type card_type
     *
     * @return $this
     */
    public function setCardType($card_type)
    {
        $this->container['card_type'] = $card_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


