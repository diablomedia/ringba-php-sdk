<?php
/**
 * TargetGroup
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ringba
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * api.ringba.com
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.10
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ringba\Model;

use \ArrayAccess;
use \Ringba\ObjectSerializer;

/**
 * TargetGroup Class Doc Comment
 *
 * @category Class
 * @package  Ringba
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TargetGroup implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TargetGroup';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'is_simal_dial' => 'bool',
        'o_route_settings' => '\Ringba\Model\OverideSetting',
        'o_capacity' => '\Ringba\Model\OverideSetting',
        'o_concurrency' => '\Ringba\Model\OverideSetting',
        'o_schedule' => '\Ringba\Model\OverideSetting',
        'targets' => '\Ringba\Model\Target[]',
        'disable_targets' => 'bool',
        'owner' => '\Ringba\Model\Buyer',
        'conversion_timer_offset' => 'int',
        'schedule' => '\Ringba\Model\ScheduleAndCapacity',
        'criteria' => '\Ringba\Model\TagRoutableRule[]',
        'name' => 'string',
        'account_id' => 'string',
        'enabled' => 'bool',
        'version' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'is_simal_dial' => null,
        'o_route_settings' => null,
        'o_capacity' => null,
        'o_concurrency' => null,
        'o_schedule' => null,
        'targets' => null,
        'disable_targets' => null,
        'owner' => null,
        'conversion_timer_offset' => 'int32',
        'schedule' => null,
        'criteria' => null,
        'name' => null,
        'account_id' => null,
        'enabled' => null,
        'version' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'is_simal_dial' => 'isSimalDial',
        'o_route_settings' => 'oRouteSettings',
        'o_capacity' => 'oCapacity',
        'o_concurrency' => 'oConcurrency',
        'o_schedule' => 'oSchedule',
        'targets' => 'targets',
        'disable_targets' => 'disableTargets',
        'owner' => 'owner',
        'conversion_timer_offset' => 'conversionTimerOffset',
        'schedule' => 'schedule',
        'criteria' => 'criteria',
        'name' => 'name',
        'account_id' => 'accountId',
        'enabled' => 'enabled',
        'version' => 'version'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'is_simal_dial' => 'setIsSimalDial',
        'o_route_settings' => 'setORouteSettings',
        'o_capacity' => 'setOCapacity',
        'o_concurrency' => 'setOConcurrency',
        'o_schedule' => 'setOSchedule',
        'targets' => 'setTargets',
        'disable_targets' => 'setDisableTargets',
        'owner' => 'setOwner',
        'conversion_timer_offset' => 'setConversionTimerOffset',
        'schedule' => 'setSchedule',
        'criteria' => 'setCriteria',
        'name' => 'setName',
        'account_id' => 'setAccountId',
        'enabled' => 'setEnabled',
        'version' => 'setVersion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'is_simal_dial' => 'getIsSimalDial',
        'o_route_settings' => 'getORouteSettings',
        'o_capacity' => 'getOCapacity',
        'o_concurrency' => 'getOConcurrency',
        'o_schedule' => 'getOSchedule',
        'targets' => 'getTargets',
        'disable_targets' => 'getDisableTargets',
        'owner' => 'getOwner',
        'conversion_timer_offset' => 'getConversionTimerOffset',
        'schedule' => 'getSchedule',
        'criteria' => 'getCriteria',
        'name' => 'getName',
        'account_id' => 'getAccountId',
        'enabled' => 'getEnabled',
        'version' => 'getVersion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['is_simal_dial'] = isset($data['is_simal_dial']) ? $data['is_simal_dial'] : null;
        $this->container['o_route_settings'] = isset($data['o_route_settings']) ? $data['o_route_settings'] : null;
        $this->container['o_capacity'] = isset($data['o_capacity']) ? $data['o_capacity'] : null;
        $this->container['o_concurrency'] = isset($data['o_concurrency']) ? $data['o_concurrency'] : null;
        $this->container['o_schedule'] = isset($data['o_schedule']) ? $data['o_schedule'] : null;
        $this->container['targets'] = isset($data['targets']) ? $data['targets'] : null;
        $this->container['disable_targets'] = isset($data['disable_targets']) ? $data['disable_targets'] : null;
        $this->container['owner'] = isset($data['owner']) ? $data['owner'] : null;
        $this->container['conversion_timer_offset'] = isset($data['conversion_timer_offset']) ? $data['conversion_timer_offset'] : null;
        $this->container['schedule'] = isset($data['schedule']) ? $data['schedule'] : null;
        $this->container['criteria'] = isset($data['criteria']) ? $data['criteria'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets is_simal_dial
     *
     * @return bool
     */
    public function getIsSimalDial()
    {
        return $this->container['is_simal_dial'];
    }

    /**
     * Sets is_simal_dial
     *
     * @param bool $is_simal_dial is_simal_dial
     *
     * @return $this
     */
    public function setIsSimalDial($is_simal_dial)
    {
        $this->container['is_simal_dial'] = $is_simal_dial;

        return $this;
    }

    /**
     * Gets o_route_settings
     *
     * @return \Ringba\Model\OverideSetting
     */
    public function getORouteSettings()
    {
        return $this->container['o_route_settings'];
    }

    /**
     * Sets o_route_settings
     *
     * @param \Ringba\Model\OverideSetting $o_route_settings o_route_settings
     *
     * @return $this
     */
    public function setORouteSettings($o_route_settings)
    {
        $this->container['o_route_settings'] = $o_route_settings;

        return $this;
    }

    /**
     * Gets o_capacity
     *
     * @return \Ringba\Model\OverideSetting
     */
    public function getOCapacity()
    {
        return $this->container['o_capacity'];
    }

    /**
     * Sets o_capacity
     *
     * @param \Ringba\Model\OverideSetting $o_capacity o_capacity
     *
     * @return $this
     */
    public function setOCapacity($o_capacity)
    {
        $this->container['o_capacity'] = $o_capacity;

        return $this;
    }

    /**
     * Gets o_concurrency
     *
     * @return \Ringba\Model\OverideSetting
     */
    public function getOConcurrency()
    {
        return $this->container['o_concurrency'];
    }

    /**
     * Sets o_concurrency
     *
     * @param \Ringba\Model\OverideSetting $o_concurrency o_concurrency
     *
     * @return $this
     */
    public function setOConcurrency($o_concurrency)
    {
        $this->container['o_concurrency'] = $o_concurrency;

        return $this;
    }

    /**
     * Gets o_schedule
     *
     * @return \Ringba\Model\OverideSetting
     */
    public function getOSchedule()
    {
        return $this->container['o_schedule'];
    }

    /**
     * Sets o_schedule
     *
     * @param \Ringba\Model\OverideSetting $o_schedule o_schedule
     *
     * @return $this
     */
    public function setOSchedule($o_schedule)
    {
        $this->container['o_schedule'] = $o_schedule;

        return $this;
    }

    /**
     * Gets targets
     *
     * @return \Ringba\Model\Target[]
     */
    public function getTargets()
    {
        return $this->container['targets'];
    }

    /**
     * Sets targets
     *
     * @param \Ringba\Model\Target[] $targets targets
     *
     * @return $this
     */
    public function setTargets($targets)
    {
        $this->container['targets'] = $targets;

        return $this;
    }

    /**
     * Gets disable_targets
     *
     * @return bool
     */
    public function getDisableTargets()
    {
        return $this->container['disable_targets'];
    }

    /**
     * Sets disable_targets
     *
     * @param bool $disable_targets disable_targets
     *
     * @return $this
     */
    public function setDisableTargets($disable_targets)
    {
        $this->container['disable_targets'] = $disable_targets;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return \Ringba\Model\Buyer
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param \Ringba\Model\Buyer $owner owner
     *
     * @return $this
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets conversion_timer_offset
     *
     * @return int
     */
    public function getConversionTimerOffset()
    {
        return $this->container['conversion_timer_offset'];
    }

    /**
     * Sets conversion_timer_offset
     *
     * @param int $conversion_timer_offset conversion_timer_offset
     *
     * @return $this
     */
    public function setConversionTimerOffset($conversion_timer_offset)
    {
        $this->container['conversion_timer_offset'] = $conversion_timer_offset;

        return $this;
    }

    /**
     * Gets schedule
     *
     * @return \Ringba\Model\ScheduleAndCapacity
     */
    public function getSchedule()
    {
        return $this->container['schedule'];
    }

    /**
     * Sets schedule
     *
     * @param \Ringba\Model\ScheduleAndCapacity $schedule schedule
     *
     * @return $this
     */
    public function setSchedule($schedule)
    {
        $this->container['schedule'] = $schedule;

        return $this;
    }

    /**
     * Gets criteria
     *
     * @return \Ringba\Model\TagRoutableRule[]
     */
    public function getCriteria()
    {
        return $this->container['criteria'];
    }

    /**
     * Sets criteria
     *
     * @param \Ringba\Model\TagRoutableRule[] $criteria criteria
     *
     * @return $this
     */
    public function setCriteria($criteria)
    {
        $this->container['criteria'] = $criteria;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string $account_id account_id
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool $enabled enabled
     *
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets version
     *
     * @return int
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param int $version version
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


